
AutonomousCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002190  00002224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  0080007c  0080007c  00002240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dec  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001369  00000000  00000000  00006490  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000256b  00000000  00000000  000077f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  00009d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001af6  00000000  00000000  0000a920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000289f  00000000  00000000  0000c416  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000ecb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__vector_1>
       8:	0c 94 32 06 	jmp	0xc64	; 0xc64 <__vector_2>
       c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_5>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_9>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	88 02       	muls	r24, r24
      56:	a7 02       	muls	r26, r23
      58:	c6 02       	muls	r28, r22
      5a:	e5 02       	muls	r30, r21
      5c:	04 03       	mulsu	r16, r20
      5e:	22 03       	mulsu	r18, r18
      60:	40 03       	mulsu	r20, r16

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 e9       	ldi	r30, 0x90	; 144
      76:	f1 e2       	ldi	r31, 0x21	; 33
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ac 37       	cpi	r26, 0x7C	; 124
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ac e7       	ldi	r26, 0x7C	; 124
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a0 3f       	cpi	r26, 0xF0	; 240
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 19 05 	call	0xa32	; 0xa32 <main>
      98:	0c 94 c6 10 	jmp	0x218c	; 0x218c <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CarControl_Init>:
void CarControl_Init(void)
{
	enuErrorStatus_t enuRetVar;

	/* Initializing the H-bridge Control component */
	enuRetVar = HBridgeControl_Init();
      a0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <HBridgeControl_Init>
	if(enuRetVar == E_OK)
      a4:	81 30       	cpi	r24, 0x01	; 1
      a6:	29 f4       	brne	.+10     	; 0xb2 <CarControl_Init+0x12>
	{
		/* Initializing the Get Distance component */
		enuRetVar = GetDistance_Init();
      a8:	0e 94 c5 00 	call	0x18a	; 0x18a <GetDistance_Init>
		if(enuRetVar == E_OK)
      ac:	81 30       	cpi	r24, 0x01	; 1
      ae:	09 f4       	brne	.+2      	; 0xb2 <CarControl_Init+0x12>
		{
			/* Enabling the global interrupt */
			sei();
      b0:	78 94       	sei
      b2:	08 95       	ret

000000b4 <CarControl_Update>:
{
	static uint8_t u8LCDInitFlag = LOW;
	enuErrorStatus_t enuRetVar;

	/* Initializing the Display Distance component */
	enuRetVar = DisplayDistance_Init();
      b4:	0e 94 6c 00 	call	0xd8	; 0xd8 <DisplayDistance_Init>
	if((u8LCDInitFlag == HIGH) || (enuRetVar == E_OK))
      b8:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__data_end>
      bc:	91 30       	cpi	r25, 0x01	; 1
      be:	11 f0       	breq	.+4      	; 0xc4 <CarControl_Update+0x10>
      c0:	81 30       	cpi	r24, 0x01	; 1
      c2:	49 f4       	brne	.+18     	; 0xd6 <CarControl_Update+0x22>
	{
		u8LCDInitFlag = HIGH;
      c4:	81 e0       	ldi	r24, 0x01	; 1
      c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
		/* Getting the current distance from the Get Distance component */
		GetDistance_Update();
      ca:	0e 94 ca 00 	call	0x194	; 0x194 <GetDistance_Update>
		/* Displaying the current distance from the Display Distance component */
		DisplayDistance_Update();
      ce:	0e 94 93 00 	call	0x126	; 0x126 <DisplayDistance_Update>
		/* Controlling the H-bridge module from the H-bridge Control component */
		HBridgeControl_Update();
      d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <HBridgeControl_Update>
      d6:	08 95       	ret

000000d8 <DisplayDistance_Init>:
*************************************************************************************************/
enuErrorStatus_t DisplayDistance_Init(void)
{
	enuErrorStatus_t enuRetVar;

	switch(genuLCDFlagStates)
      d8:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <genuLCDFlagStates>
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	61 f0       	breq	.+24     	; 0xf8 <DisplayDistance_Init+0x20>
      e0:	18 f0       	brcs	.+6      	; 0xe8 <DisplayDistance_Init+0x10>
      e2:	82 30       	cpi	r24, 0x02	; 2
      e4:	a1 f0       	breq	.+40     	; 0x10e <DisplayDistance_Init+0x36>
      e6:	1d c0       	rjmp	.+58     	; 0x122 <DisplayDistance_Init+0x4a>
	{
		case LCD_START:
			/* Initializing the LCD module to start displaying on it */
			enuRetVar = LCD_Init();
      e8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LCD_Init>
			if(enuRetVar == E_OK)
      ec:	81 30       	cpi	r24, 0x01	; 1
      ee:	d1 f4       	brne	.+52     	; 0x124 <DisplayDistance_Init+0x4c>
			{
				genuLCDFlagStates = LCD_INIT_DONE;
      f0:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <genuLCDFlagStates>
				enuRetVar = E_ERROR;
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	08 95       	ret
			}
		break;

		case LCD_INIT_DONE:
			/* Setting the position on the cursor at row 0 and column 0 */
			enuRetVar = LCD_goToRowColumn(DISPLAYDISTANCE_LCD_POSITION_ROW0, DISPLAYDISTANCE_LCD_POSITION_COL0);
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_goToRowColumn>
			if(enuRetVar == E_OK)
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	81 f4       	brne	.+32     	; 0x124 <DisplayDistance_Init+0x4c>
			{
				genuLCDFlagStates = LCD_SET_POSITION_0_0_DONE;
     104:	82 e0       	ldi	r24, 0x02	; 2
     106:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <genuLCDFlagStates>
				enuRetVar = E_ERROR;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret
			}
		break;

		case LCD_SET_POSITION_0_0_DONE:
			/* Displaying the string "Distance:" on the LCD screen */
			enuRetVar = LCD_displayString((uint8_t*)"Distance:");
     10e:	83 e6       	ldi	r24, 0x63	; 99
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_displayString>
			if(enuRetVar == E_OK)
     116:	81 30       	cpi	r24, 0x01	; 1
     118:	29 f4       	brne	.+10     	; 0x124 <DisplayDistance_Init+0x4c>
			{
				genuLCDFlagStates = LCD_DISPLAY_STRING_DONE;
     11a:	93 e0       	ldi	r25, 0x03	; 3
     11c:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <genuLCDFlagStates>
     120:	08 95       	ret
			{
			}
		break;

		default:
			enuRetVar = E_ERROR;
     122:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return enuRetVar;
}
     124:	08 95       	ret

00000126 <DisplayDistance_Update>:
*************************************************************************************************/
enuErrorStatus_t DisplayDistance_Update(void)
{
	enuErrorStatus_t enuRetVar;

	switch(genuLCDFlagStates)
     126:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <genuLCDFlagStates>
     12a:	84 30       	cpi	r24, 0x04	; 4
     12c:	79 f0       	breq	.+30     	; 0x14c <DisplayDistance_Update+0x26>
     12e:	85 30       	cpi	r24, 0x05	; 5
     130:	01 f1       	breq	.+64     	; 0x172 <DisplayDistance_Update+0x4c>
     132:	83 30       	cpi	r24, 0x03	; 3
     134:	41 f5       	brne	.+80     	; 0x186 <DisplayDistance_Update+0x60>
	{
		case LCD_DISPLAY_STRING_DONE:
			/* Setting the position on the cursor at row 1 and column 0 */
			enuRetVar = LCD_goToRowColumn(DISPLAYDISTANCE_LCD_POSITION_ROW1, DISPLAYDISTANCE_LCD_POSITION_COL0);
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <LCD_goToRowColumn>
			if(enuRetVar == E_OK)
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	19 f5       	brne	.+70     	; 0x188 <DisplayDistance_Update+0x62>
			{
				genuLCDFlagStates = LCD_SET_POSITION_1_0_DONE;
     142:	84 e0       	ldi	r24, 0x04	; 4
     144:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <genuLCDFlagStates>
				enuRetVar = E_ERROR;
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	08 95       	ret
			}
		break;

		case LCD_SET_POSITION_1_0_DONE:
			/* Displaying the distance of the obstacle on the LCD screen */
			enuRetVar = LCD_intgerToString(gu16Distance);
     14c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <gu16Distance>
     150:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <gu16Distance+0x1>
     154:	0e 94 26 04 	call	0x84c	; 0x84c <LCD_intgerToString>
			if(enuRetVar == E_OK)
     158:	81 30       	cpi	r24, 0x01	; 1
     15a:	b1 f4       	brne	.+44     	; 0x188 <DisplayDistance_Update+0x62>
			{
				genuLCDFlagStates = LCD_DISPLAY_DISTANCE_DONE;
     15c:	85 e0       	ldi	r24, 0x05	; 5
     15e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <genuLCDFlagStates>
				Ultrasonic_Trigger(US_CH1);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	0e 94 d5 04 	call	0x9aa	; 0x9aa <Ultrasonic_Trigger>
				gu8UltrasonicFlag = HIGH;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <gu8UltrasonicFlag>
				enuRetVar = E_ERROR;
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	08 95       	ret
			}
		break;

		case LCD_DISPLAY_DISTANCE_DONE:
			/* Displaying spaces on LCD screen to clear any extra numbers */
			enuRetVar = LCD_displayString((uint8_t*)"          ");
     172:	8d e6       	ldi	r24, 0x6D	; 109
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_displayString>
			if(enuRetVar == E_OK)
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	29 f4       	brne	.+10     	; 0x188 <DisplayDistance_Update+0x62>
			{
				genuLCDFlagStates = LCD_DISPLAY_STRING_DONE;
     17e:	93 e0       	ldi	r25, 0x03	; 3
     180:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <genuLCDFlagStates>
     184:	08 95       	ret
			{
			}
		break;

		default:
			enuRetVar = E_ERROR;
     186:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return enuRetVar;
}
     188:	08 95       	ret

0000018a <GetDistance_Init>:
enuErrorStatus_t GetDistance_Init(void)
{
	enuErrorStatus_t enuRetVar;

	/* Initializing the ultrasonic sensor module to start */
	enuRetVar = Ultrasonic_Init();
     18a:	0e 94 c3 04 	call	0x986	; 0x986 <Ultrasonic_Init>
	gu8UltrasonicFlag = LOW;
     18e:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <gu8UltrasonicFlag>
	return enuRetVar;
}
     192:	08 95       	ret

00000194 <GetDistance_Update>:
*************************************************************************************************/
enuErrorStatus_t GetDistance_Update(void)
{
	enuErrorStatus_t enuRetVar;

	if(gu8UltrasonicFlag == HIGH)
     194:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <gu8UltrasonicFlag>
     198:	81 30       	cpi	r24, 0x01	; 1
     19a:	49 f4       	brne	.+18     	; 0x1ae <GetDistance_Update+0x1a>
	{
		/* Getting the distance read from the ultrasonic sensor */
		enuRetVar = Ultrasonic_GetDistance(&gu16Distance);
     19c:	88 ee       	ldi	r24, 0xE8	; 232
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <Ultrasonic_GetDistance>
		if(enuRetVar == E_OK)
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	21 f4       	brne	.+8      	; 0x1b0 <GetDistance_Update+0x1c>
		{
			gu8UltrasonicFlag = LOW;
     1a8:	10 92 e7 00 	sts	0x00E7, r1	; 0x8000e7 <gu8UltrasonicFlag>
     1ac:	08 95       	ret
		{
		}
	}
	else
	{
		enuRetVar = E_ERROR;
     1ae:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
     1b0:	08 95       	ret

000001b2 <HBridgeControl_Init>:
enuErrorStatus_t HBridgeControl_Init(void)
{
	enuErrorStatus_t enuRetVar;

	/* Initializing the H-bridge module according to the configuration parameters */
	enuRetVar = HBridge_Init(FAST_PWM_ICR1, NON_INVERTED_PWM, PWM_PRESCALER_8);
     1b2:	42 e0       	ldi	r20, 0x02	; 2
     1b4:	62 e0       	ldi	r22, 0x02	; 2
     1b6:	8e e0       	ldi	r24, 0x0E	; 14
     1b8:	0e 94 05 01 	call	0x20a	; 0x20a <HBridge_Init>
	if(enuRetVar == E_OK)
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	39 f4       	brne	.+14     	; 0x1ce <HBridgeControl_Init+0x1c>
	{
		/* Setting the speed of the H-bridge to 40% of its speed */
		enuRetVar = HBridge_SetSpeed(HBRIDGECONTROL_SPEED);
     1c0:	88 e2       	ldi	r24, 0x28	; 40
     1c2:	0e 94 41 01 	call	0x282	; 0x282 <HBridge_SetSpeed>
		if(enuRetVar == E_OK)
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	11 f4       	brne	.+4      	; 0x1ce <HBridgeControl_Init+0x1c>
		{
			/* Triggering the H-bridge's motors to start movement */
			enuRetVar = HBridge_Start();
     1ca:	0e 94 a9 01 	call	0x352	; 0x352 <HBridge_Start>
	}
	else
	{
	}
	return enuRetVar;
}
     1ce:	08 95       	ret

000001d0 <HBridgeControl_Update>:
*************************************************************************************************/
enuErrorStatus_t HBridgeControl_Update(void)
{
	enuErrorStatus_t enuRetVar;

	if((gu16Distance >= HBRIDGECONTROL_MIN_DISTANCE) && (gu16Distance <= HBRIDGECONTROL_MAX_DISTANCE))
     1d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <gu16Distance>
     1d4:	90 91 e9 00 	lds	r25, 0x00E9	; 0x8000e9 <gu16Distance+0x1>
     1d8:	9c 01       	movw	r18, r24
     1da:	22 53       	subi	r18, 0x32	; 50
     1dc:	31 09       	sbc	r19, r1
     1de:	26 30       	cpi	r18, 0x06	; 6
     1e0:	31 05       	cpc	r19, r1
     1e2:	20 f4       	brcc	.+8      	; 0x1ec <HBridgeControl_Update+0x1c>
	{
		/* Setting the direction of H-bridge's motors to turn right */
		enuRetVar = HBridge_SetDirection(TURN_RIGHT);
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	0e 94 4f 01 	call	0x29e	; 0x29e <HBridge_SetDirection>
     1ea:	08 95       	ret
	}
	else if(gu16Distance < HBRIDGECONTROL_MIN_DISTANCE)
     1ec:	82 33       	cpi	r24, 0x32	; 50
     1ee:	91 05       	cpc	r25, r1
     1f0:	20 f4       	brcc	.+8      	; 0x1fa <HBridgeControl_Update+0x2a>
	{
		/* Setting the direction of H-bridge's motors to move backward */
		enuRetVar = HBridge_SetDirection(MOVE_BACKWARD);
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 4f 01 	call	0x29e	; 0x29e <HBridge_SetDirection>
     1f8:	08 95       	ret
	}
	else if(gu16Distance > HBRIDGECONTROL_MAX_DISTANCE)
     1fa:	c8 97       	sbiw	r24, 0x38	; 56
     1fc:	20 f0       	brcs	.+8      	; 0x206 <HBridgeControl_Update+0x36>
	{
		/* Setting the direction of H-bridge's motors to move forward */
		enuRetVar = HBridge_SetDirection(MOVE_FORWARD);
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	0e 94 4f 01 	call	0x29e	; 0x29e <HBridge_SetDirection>
     204:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     206:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
     208:	08 95       	ret

0000020a <HBridge_Init>:
* Parameters	: enuPWMMode, enuPWMCompareOutputMode, enuPWMClock
* Return Value	: enuErrorStatus_t
* Description  : Initialize the H Bridge module according to the configuration
*************************************************************************************************/
enuErrorStatus_t HBridge_Init(enuPWMMode_t enuPWMMode, enuPWMCompareOutputMode_t enuPWMCompareOutputMode, enuPWMClock_t enuPWMClock)
{
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
   enuErrorStatus_t enuRetVar;
   
   if(((enuPWMCompareOutputMode == NORMAL_OPERATION)	|| (enuPWMCompareOutputMode == INVERTED_PWM) || (enuPWMCompareOutputMode == NON_INVERTED_PWM))	&&
     210:	66 23       	and	r22, r22
     212:	21 f0       	breq	.+8      	; 0x21c <HBridge_Init+0x12>
     214:	63 30       	cpi	r22, 0x03	; 3
     216:	11 f0       	breq	.+4      	; 0x21c <HBridge_Init+0x12>
     218:	62 30       	cpi	r22, 0x02	; 2
     21a:	61 f5       	brne	.+88     	; 0x274 <HBridge_Init+0x6a>
		(enuPWMClock > HBRIDGE_CLOCK_MIN_VALUE)			&& (enuPWMClock < HBRIDGE_CLOCK_MAX_VALUE))
     21c:	48 30       	cpi	r20, 0x08	; 8
     21e:	60 f5       	brcc	.+88     	; 0x278 <HBridge_Init+0x6e>
     220:	d4 2f       	mov	r29, r20
     222:	c6 2f       	mov	r28, r22
     224:	18 2f       	mov	r17, r24
   {
	   /* Initializing the DIO pin for motor 1 enable pin */
	   DIO_PinInit(HBRIDGE_MOTOR_1_ENABLE_PIN_NO, OUTPUT, NO_CONNECTION);
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	8c e1       	ldi	r24, 0x1C	; 28
     22c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
	   /* Initializing the DIO pin for motor 2 enable pin */
	   DIO_PinInit(HBRIDGE_MOTOR_2_ENABLE_PIN_NO, OUTPUT, NO_CONNECTION);
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	8d e1       	ldi	r24, 0x1D	; 29
     236:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
	   /* Initializing the DIO pin for motor 1A direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, OUTPUT, NO_CONNECTION);
     23a:	40 e0       	ldi	r20, 0x00	; 0
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	8a e1       	ldi	r24, 0x1A	; 26
     240:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
	   /* Initializing the DIO pin for motor 1B direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, OUTPUT, NO_CONNECTION);
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	8b e1       	ldi	r24, 0x1B	; 27
     24a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
	   /* Initializing the DIO pin for motor 2A direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, OUTPUT, NO_CONNECTION);
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	8e e1       	ldi	r24, 0x1E	; 30
     254:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
	   /* Initializing the DIO pin for motor 2B direction pin */
	   DIO_PinInit(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, OUTPUT, NO_CONNECTION);
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	8f e1       	ldi	r24, 0x1F	; 31
     25e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
	   /* Initializing the PWM signal used for the HBridge module */
	   PWM_Init(enuPWMMode, enuPWMCompareOutputMode, enuPWMClock);
     262:	4d 2f       	mov	r20, r29
     264:	6c 2f       	mov	r22, r28
     266:	81 2f       	mov	r24, r17
     268:	0e 94 80 06 	call	0xd00	; 0xd00 <PWM_Init>
		enuHBridgeState = HBRIDGE_INIT_DONE;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <enuHBridgeState>
	   enuRetVar = E_OK;
     272:	03 c0       	rjmp	.+6      	; 0x27a <HBridge_Init+0x70>
   }
   else
   {
	   enuRetVar = E_ERROR;
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	01 c0       	rjmp	.+2      	; 0x27a <HBridge_Init+0x70>
     278:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	08 95       	ret

00000282 <HBridge_SetSpeed>:
*************************************************************************************************/
enuErrorStatus_t HBridge_SetSpeed(uint8_t u8HBridgeMotorSpeed)
{
   enuErrorStatus_t enuRetVar;
   
   if((enuHBridgeState == HBRIDGE_INIT_DONE) && (u8HBridgeMotorSpeed >= HBRIDGE_MOTOR_SPEED_MIN_VALUE) && (u8HBridgeMotorSpeed <= HBRIDGE_MOTOR_SPEED_MAX_VALUE))
     282:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <enuHBridgeState>
     286:	91 30       	cpi	r25, 0x01	; 1
     288:	31 f4       	brne	.+12     	; 0x296 <HBridge_SetSpeed+0x14>
     28a:	85 36       	cpi	r24, 0x65	; 101
     28c:	30 f4       	brcc	.+12     	; 0x29a <HBridge_SetSpeed+0x18>
   {
		gu8HBridgeMotorSpeed = u8HBridgeMotorSpeed;
     28e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <gu8HBridgeMotorSpeed>
	   enuRetVar = E_OK;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	08 95       	ret
     29a:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;
}
     29c:	08 95       	ret

0000029e <HBridge_SetDirection>:
*************************************************************************************************/
enuErrorStatus_t HBridge_SetDirection(enuHBridgeMotorDirection_t enuHBridgeMotorDirection)
{
   enuErrorStatus_t enuRetVar;
   
   if((enuHBridgeState == HBRIDGE_INIT_DONE) && (enuHBridgeMotorDirection > HBRIDGE_MOTOR_DIRECTION_MIN_VALUE) && (enuHBridgeMotorDirection < HBRIDGE_MOTOR_DIRECTION_MAX_VALUE))
     29e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <enuHBridgeState>
     2a2:	91 30       	cpi	r25, 0x01	; 1
     2a4:	09 f0       	breq	.+2      	; 0x2a8 <HBridge_SetDirection+0xa>
     2a6:	51 c0       	rjmp	.+162    	; 0x34a <HBridge_SetDirection+0xac>
     2a8:	84 30       	cpi	r24, 0x04	; 4
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <HBridge_SetDirection+0x10>
     2ac:	50 c0       	rjmp	.+160    	; 0x34e <HBridge_SetDirection+0xb0>
   {
	   /* Checking if the motor is moving forward or backward */
	   if(enuHBridgeMotorDirection == MOVE_FORWARD)
     2ae:	81 11       	cpse	r24, r1
     2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <HBridge_SetDirection+0x38>
	   {
		   /* Setting the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, HIGH);
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	8a e1       	ldi	r24, 0x1A	; 26
     2b6:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, LOW);
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	8b e1       	ldi	r24, 0x1B	; 27
     2be:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Setting the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, HIGH);
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	8e e1       	ldi	r24, 0x1E	; 30
     2c6:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, LOW);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	8f e1       	ldi	r24, 0x1F	; 31
     2ce:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
	   }
	   enuRetVar = E_OK;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	08 95       	ret
		   /* Setting the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, HIGH);
		   /* Clearing the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, LOW);
	   }
	   else if(enuHBridgeMotorDirection == MOVE_BACKWARD)
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	91 f4       	brne	.+36     	; 0x2fe <HBridge_SetDirection+0x60>
	   {
		   /* Clearing the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, LOW);
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8a e1       	ldi	r24, 0x1A	; 26
     2de:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Setting the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, HIGH);
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	8b e1       	ldi	r24, 0x1B	; 27
     2e6:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	8e e1       	ldi	r24, 0x1E	; 30
     2ee:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	8f e1       	ldi	r24, 0x1F	; 31
     2f6:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
	   }
	   enuRetVar = E_OK;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	08 95       	ret
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
	   }
	   else if(enuHBridgeMotorDirection == TURN_LEFT)
     2fe:	82 30       	cpi	r24, 0x02	; 2
     300:	91 f4       	brne	.+36     	; 0x326 <HBridge_SetDirection+0x88>
	   {
		   /* Clearing the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, LOW);
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	8a e1       	ldi	r24, 0x1A	; 26
     306:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Setting the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, HIGH);
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	8b e1       	ldi	r24, 0x1B	; 27
     30e:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Setting the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, HIGH);
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	8e e1       	ldi	r24, 0x1E	; 30
     316:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, LOW);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	8f e1       	ldi	r24, 0x1F	; 31
     31e:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
	   }
	   enuRetVar = E_OK;
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	08 95       	ret
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, LOW);
	   }
	   else
	   {
		   /* Setting the value of 1A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1A_PIN_NO, HIGH);
     326:	61 e0       	ldi	r22, 0x01	; 1
     328:	8a e1       	ldi	r24, 0x1A	; 26
     32a:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 1B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_1B_PIN_NO, LOW);
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	8b e1       	ldi	r24, 0x1B	; 27
     332:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Clearing the value of 2A direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2A_PIN_NO, LOW);
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	8e e1       	ldi	r24, 0x1E	; 30
     33a:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
		   /* Setting the value of 2B direction pin */
		   DIO_PinWrite(HBRIDGE_MOTOR_DIRECTION_2B_PIN_NO, HIGH);
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	8f e1       	ldi	r24, 0x1F	; 31
     342:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
	   }
	   enuRetVar = E_OK;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	08 95       	ret
     34e:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
}
     350:	08 95       	ret

00000352 <HBridge_Start>:
*************************************************************************************************/
enuErrorStatus_t HBridge_Start(void)
{
   enuErrorStatus_t enuRetVar;
   
   if(enuHBridgeState == HBRIDGE_INIT_DONE)
     352:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <enuHBridgeState>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	31 f4       	brne	.+12     	; 0x366 <HBridge_Start+0x14>
   {
	   #if HBRIDGE_PWM_CONTROL_ON_ENABLE_PINS == HBRIDGE_ENABLE_PWM_ON_ENABLE_PINS
	   /* Stopping both motors */
	   PWM_Start(gu8HBridgeMotorSpeed);
     35a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gu8HBridgeMotorSpeed>
     35e:	0e 94 ef 06 	call	0xdde	; 0xdde <PWM_Start>
		/* Starting motor 1 to move */
		DIO_PinWrite(HBRIDGE_MOTOR_1_ENABLE_PIN_NO, HIGH);
		/* Starting motor 2 to move */
		DIO_PinWrite(HBRIDGE_MOTOR_2_ENABLE_PIN_NO, HIGH);
	   #endif
	   enuRetVar = E_OK;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
     366:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
}
     368:	08 95       	ret

0000036a <LCD_sendCommand>:
{
	/* go to to the required LCD position */
	LCD_goToRowColumn(u8Row, u8Col);
	/* display the string */
	LCD_displayString(pu8Str);
}//end LCD_displayStringRowColumn
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <enuCommandPreviousState>
     376:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <enuCommandCurrentState>
     37a:	29 17       	cp	r18, r25
     37c:	09 f4       	brne	.+2      	; 0x380 <LCD_sendCommand+0x16>
     37e:	81 c0       	rjmp	.+258    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     380:	92 30       	cpi	r25, 0x02	; 2
     382:	09 f4       	brne	.+2      	; 0x386 <LCD_sendCommand+0x1c>
     384:	3f c0       	rjmp	.+126    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     386:	28 f4       	brcc	.+10     	; 0x392 <LCD_sendCommand+0x28>
     388:	99 23       	and	r25, r25
     38a:	59 f0       	breq	.+22     	; 0x3a2 <LCD_sendCommand+0x38>
     38c:	91 30       	cpi	r25, 0x01	; 1
     38e:	c9 f0       	breq	.+50     	; 0x3c2 <LCD_sendCommand+0x58>
     390:	78 c0       	rjmp	.+240    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     392:	94 30       	cpi	r25, 0x04	; 4
     394:	09 f4       	brne	.+2      	; 0x398 <LCD_sendCommand+0x2e>
     396:	64 c0       	rjmp	.+200    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     398:	f0 f1       	brcs	.+124    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     39a:	95 30       	cpi	r25, 0x05	; 5
     39c:	09 f4       	brne	.+2      	; 0x3a0 <LCD_sendCommand+0x36>
     39e:	69 c0       	rjmp	.+210    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     3a0:	70 c0       	rjmp	.+224    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     3a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <enuRetVar.2061>
     3a6:	8b b3       	in	r24, 0x1b	; 27
     3a8:	8d 7f       	andi	r24, 0xFD	; 253
     3aa:	8b bb       	out	0x1b, r24	; 27
     3ac:	8b b3       	in	r24, 0x1b	; 27
     3ae:	8b 7f       	andi	r24, 0xFB	; 251
     3b0:	8b bb       	out	0x1b, r24	; 27
     3b2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <enuCommandCurrentState>
     3b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCommandPreviousState>
     3ba:	8f 5f       	subi	r24, 0xFF	; 255
     3bc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <enuCommandCurrentState>
     3c0:	60 c0       	rjmp	.+192    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     3c2:	9b b3       	in	r25, 0x1b	; 27
     3c4:	9f 70       	andi	r25, 0x0F	; 15
     3c6:	80 7f       	andi	r24, 0xF0	; 240
     3c8:	89 2b       	or	r24, r25
     3ca:	8b bb       	out	0x1b, r24	; 27
     3cc:	8b b3       	in	r24, 0x1b	; 27
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	8b bb       	out	0x1b, r24	; 27
     3d2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <enuCommandCurrentState>
     3d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCommandPreviousState>
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     3e0:	0f 2e       	mov	r0, r31
     3e2:	f8 e4       	ldi	r31, 0x48	; 72
     3e4:	ef 2e       	mov	r14, r31
     3e6:	f2 e0       	ldi	r31, 0x02	; 2
     3e8:	ff 2e       	mov	r15, r31
     3ea:	f0 2d       	mov	r31, r0
     3ec:	01 e0       	ldi	r16, 0x01	; 1
     3ee:	10 e0       	ldi	r17, 0x00	; 0
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <TDelay_ms>
     402:	3f c0       	rjmp	.+126    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     404:	8b b3       	in	r24, 0x1b	; 27
     406:	87 7f       	andi	r24, 0xF7	; 247
     408:	8b bb       	out	0x1b, r24	; 27
     40a:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <enuCommandCurrentState>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <enuCommandCurrentState>
     414:	36 c0       	rjmp	.+108    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     416:	2b b3       	in	r18, 0x1b	; 27
     418:	30 e1       	ldi	r19, 0x10	; 16
     41a:	83 9f       	mul	r24, r19
     41c:	c0 01       	movw	r24, r0
     41e:	11 24       	eor	r1, r1
     420:	92 2f       	mov	r25, r18
     422:	9f 70       	andi	r25, 0x0F	; 15
     424:	89 2b       	or	r24, r25
     426:	8b bb       	out	0x1b, r24	; 27
     428:	8b b3       	in	r24, 0x1b	; 27
     42a:	88 60       	ori	r24, 0x08	; 8
     42c:	8b bb       	out	0x1b, r24	; 27
     42e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <enuCommandCurrentState>
     432:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCommandPreviousState>
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     43c:	0f 2e       	mov	r0, r31
     43e:	f8 e4       	ldi	r31, 0x48	; 72
     440:	ef 2e       	mov	r14, r31
     442:	f2 e0       	ldi	r31, 0x02	; 2
     444:	ff 2e       	mov	r15, r31
     446:	f0 2d       	mov	r31, r0
     448:	01 e0       	ldi	r16, 0x01	; 1
     44a:	10 e0       	ldi	r17, 0x00	; 0
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <TDelay_ms>
     45e:	11 c0       	rjmp	.+34     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     460:	8b b3       	in	r24, 0x1b	; 27
     462:	87 7f       	andi	r24, 0xF7	; 247
     464:	8b bb       	out	0x1b, r24	; 27
     466:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <enuCommandCurrentState>
     46a:	8f 5f       	subi	r24, 0xFF	; 255
     46c:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <enuCommandCurrentState>
     470:	08 c0       	rjmp	.+16     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <enuRetVar.2061>
     478:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <enuCommandCurrentState>
     47c:	85 e0       	ldi	r24, 0x05	; 5
     47e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCommandPreviousState>
     482:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <enuRetVar.2061>
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	08 95       	ret

00000490 <LCD_Callback>:
     490:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <u8LCDFlag>
     494:	81 30       	cpi	r24, 0x01	; 1
     496:	31 f4       	brne	.+12     	; 0x4a4 <LCD_Callback+0x14>
     498:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <enuInitCurrentState>
     49c:	8f 5f       	subi	r24, 0xFF	; 255
     49e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <enuInitCurrentState>
     4a2:	1d c0       	rjmp	.+58     	; 0x4de <LCD_Callback+0x4e>
     4a4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <u8LCDFlag>
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	31 f4       	brne	.+12     	; 0x4b8 <LCD_Callback+0x28>
     4ac:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <enuCommandCurrentState>
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <enuCommandCurrentState>
     4b6:	13 c0       	rjmp	.+38     	; 0x4de <LCD_Callback+0x4e>
     4b8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <u8LCDFlag>
     4bc:	83 30       	cpi	r24, 0x03	; 3
     4be:	31 f4       	brne	.+12     	; 0x4cc <LCD_Callback+0x3c>
     4c0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <enuDataCurrentState>
     4c4:	8f 5f       	subi	r24, 0xFF	; 255
     4c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <enuDataCurrentState>
     4ca:	09 c0       	rjmp	.+18     	; 0x4de <LCD_Callback+0x4e>
     4cc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <u8LCDFlag>
     4d0:	84 30       	cpi	r24, 0x04	; 4
     4d2:	29 f4       	brne	.+10     	; 0x4de <LCD_Callback+0x4e>
     4d4:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <enuClearState>
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <enuClearState>
     4de:	0e 94 a2 08 	call	0x1144	; 0x1144 <T0_Stop>
     4e2:	08 95       	ret

000004e4 <LCD_Init>:
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <enuInitPreviousState>
     4f0:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <enuInitCurrentState>
     4f4:	82 17       	cp	r24, r18
     4f6:	09 f4       	brne	.+2      	; 0x4fa <LCD_Init+0x16>
     4f8:	c8 c0       	rjmp	.+400    	; 0x68a <LCD_Init+0x1a6>
     4fa:	82 2f       	mov	r24, r18
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	87 30       	cpi	r24, 0x07	; 7
     500:	91 05       	cpc	r25, r1
     502:	08 f0       	brcs	.+2      	; 0x506 <LCD_Init+0x22>
     504:	c2 c0       	rjmp	.+388    	; 0x68a <LCD_Init+0x1a6>
     506:	fc 01       	movw	r30, r24
     508:	e6 5d       	subi	r30, 0xD6	; 214
     50a:	ff 4f       	sbci	r31, 0xFF	; 255
     50c:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__tablejump2__>
     510:	8a b3       	in	r24, 0x1a	; 26
     512:	8e 60       	ori	r24, 0x0E	; 14
     514:	8a bb       	out	0x1a, r24	; 26
     516:	8a b3       	in	r24, 0x1a	; 26
     518:	80 6f       	ori	r24, 0xF0	; 240
     51a:	8a bb       	out	0x1a, r24	; 26
     51c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <enuInitCurrentState>
     520:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <enuInitPreviousState>
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     52a:	0f 2e       	mov	r0, r31
     52c:	f8 e4       	ldi	r31, 0x48	; 72
     52e:	ef 2e       	mov	r14, r31
     530:	f2 e0       	ldi	r31, 0x02	; 2
     532:	ff 2e       	mov	r15, r31
     534:	f0 2d       	mov	r31, r0
     536:	02 e3       	ldi	r16, 0x32	; 50
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <TDelay_ms>
     54c:	9e c0       	rjmp	.+316    	; 0x68a <LCD_Init+0x1a6>
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_sendCommand>
     554:	88 23       	and	r24, r24
     556:	09 f4       	brne	.+2      	; 0x55a <LCD_Init+0x76>
     558:	98 c0       	rjmp	.+304    	; 0x68a <LCD_Init+0x1a6>
     55a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <enuInitCurrentState>
     55e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <enuInitPreviousState>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     568:	0f 2e       	mov	r0, r31
     56a:	f8 e4       	ldi	r31, 0x48	; 72
     56c:	ef 2e       	mov	r14, r31
     56e:	f2 e0       	ldi	r31, 0x02	; 2
     570:	ff 2e       	mov	r15, r31
     572:	f0 2d       	mov	r31, r0
     574:	07 e2       	ldi	r16, 0x27	; 39
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <TDelay_us>
     58a:	7f c0       	rjmp	.+254    	; 0x68a <LCD_Init+0x1a6>
     58c:	88 e2       	ldi	r24, 0x28	; 40
     58e:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_sendCommand>
     592:	88 23       	and	r24, r24
     594:	09 f4       	brne	.+2      	; 0x598 <LCD_Init+0xb4>
     596:	79 c0       	rjmp	.+242    	; 0x68a <LCD_Init+0x1a6>
     598:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <enuInitCurrentState>
     59c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <enuInitPreviousState>
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     5a6:	0f 2e       	mov	r0, r31
     5a8:	f8 e4       	ldi	r31, 0x48	; 72
     5aa:	ef 2e       	mov	r14, r31
     5ac:	f2 e0       	ldi	r31, 0x02	; 2
     5ae:	ff 2e       	mov	r15, r31
     5b0:	f0 2d       	mov	r31, r0
     5b2:	07 e2       	ldi	r16, 0x27	; 39
     5b4:	10 e0       	ldi	r17, 0x00	; 0
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <TDelay_us>
     5c8:	60 c0       	rjmp	.+192    	; 0x68a <LCD_Init+0x1a6>
     5ca:	8c e0       	ldi	r24, 0x0C	; 12
     5cc:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_sendCommand>
     5d0:	88 23       	and	r24, r24
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <LCD_Init+0xf2>
     5d4:	5a c0       	rjmp	.+180    	; 0x68a <LCD_Init+0x1a6>
     5d6:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <enuInitCurrentState>
     5da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <enuInitPreviousState>
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     5e4:	0f 2e       	mov	r0, r31
     5e6:	f8 e4       	ldi	r31, 0x48	; 72
     5e8:	ef 2e       	mov	r14, r31
     5ea:	f2 e0       	ldi	r31, 0x02	; 2
     5ec:	ff 2e       	mov	r15, r31
     5ee:	f0 2d       	mov	r31, r0
     5f0:	07 e2       	ldi	r16, 0x27	; 39
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <TDelay_us>
     606:	41 c0       	rjmp	.+130    	; 0x68a <LCD_Init+0x1a6>
     608:	86 e0       	ldi	r24, 0x06	; 6
     60a:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_sendCommand>
     60e:	88 23       	and	r24, r24
     610:	e1 f1       	breq	.+120    	; 0x68a <LCD_Init+0x1a6>
     612:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <enuInitCurrentState>
     616:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <enuInitPreviousState>
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     620:	0f 2e       	mov	r0, r31
     622:	f8 e4       	ldi	r31, 0x48	; 72
     624:	ef 2e       	mov	r14, r31
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	ff 2e       	mov	r15, r31
     62a:	f0 2d       	mov	r31, r0
     62c:	07 e2       	ldi	r16, 0x27	; 39
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <TDelay_us>
     642:	23 c0       	rjmp	.+70     	; 0x68a <LCD_Init+0x1a6>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_sendCommand>
     64a:	88 23       	and	r24, r24
     64c:	f1 f0       	breq	.+60     	; 0x68a <LCD_Init+0x1a6>
     64e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <enuInitCurrentState>
     652:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <enuInitPreviousState>
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     65c:	0f 2e       	mov	r0, r31
     65e:	f8 e4       	ldi	r31, 0x48	; 72
     660:	ef 2e       	mov	r14, r31
     662:	f2 e0       	ldi	r31, 0x02	; 2
     664:	ff 2e       	mov	r15, r31
     666:	f0 2d       	mov	r31, r0
     668:	0a ef       	ldi	r16, 0xFA	; 250
     66a:	15 e0       	ldi	r17, 0x05	; 5
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	60 e0       	ldi	r22, 0x00	; 0
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <TDelay_us>
     67e:	05 c0       	rjmp	.+10     	; 0x68a <LCD_Init+0x1a6>
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <enuRetVar.2049>
     686:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <enuInitPreviousState>
     68a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <enuRetVar.2049>
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	08 95       	ret

00000698 <LCD_displayCharacter>:
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6a4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <enuDataCurrentState>
     6a8:	29 17       	cp	r18, r25
     6aa:	09 f4       	brne	.+2      	; 0x6ae <LCD_displayCharacter+0x16>
     6ac:	81 c0       	rjmp	.+258    	; 0x7b0 <LCD_displayCharacter+0x118>
     6ae:	92 30       	cpi	r25, 0x02	; 2
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <LCD_displayCharacter+0x1c>
     6b2:	3f c0       	rjmp	.+126    	; 0x732 <LCD_displayCharacter+0x9a>
     6b4:	28 f4       	brcc	.+10     	; 0x6c0 <LCD_displayCharacter+0x28>
     6b6:	99 23       	and	r25, r25
     6b8:	59 f0       	breq	.+22     	; 0x6d0 <LCD_displayCharacter+0x38>
     6ba:	91 30       	cpi	r25, 0x01	; 1
     6bc:	c9 f0       	breq	.+50     	; 0x6f0 <LCD_displayCharacter+0x58>
     6be:	78 c0       	rjmp	.+240    	; 0x7b0 <LCD_displayCharacter+0x118>
     6c0:	94 30       	cpi	r25, 0x04	; 4
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <LCD_displayCharacter+0x2e>
     6c4:	64 c0       	rjmp	.+200    	; 0x78e <LCD_displayCharacter+0xf6>
     6c6:	f0 f1       	brcs	.+124    	; 0x744 <LCD_displayCharacter+0xac>
     6c8:	95 30       	cpi	r25, 0x05	; 5
     6ca:	09 f4       	brne	.+2      	; 0x6ce <LCD_displayCharacter+0x36>
     6cc:	69 c0       	rjmp	.+210    	; 0x7a0 <LCD_displayCharacter+0x108>
     6ce:	70 c0       	rjmp	.+224    	; 0x7b0 <LCD_displayCharacter+0x118>
     6d0:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <enuRetVar.2072>
     6d4:	8b b3       	in	r24, 0x1b	; 27
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	8b bb       	out	0x1b, r24	; 27
     6da:	8b b3       	in	r24, 0x1b	; 27
     6dc:	8b 7f       	andi	r24, 0xFB	; 251
     6de:	8b bb       	out	0x1b, r24	; 27
     6e0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <enuDataCurrentState>
     6e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <enuDataCurrentState>
     6ee:	60 c0       	rjmp	.+192    	; 0x7b0 <LCD_displayCharacter+0x118>
     6f0:	9b b3       	in	r25, 0x1b	; 27
     6f2:	9f 70       	andi	r25, 0x0F	; 15
     6f4:	80 7f       	andi	r24, 0xF0	; 240
     6f6:	89 2b       	or	r24, r25
     6f8:	8b bb       	out	0x1b, r24	; 27
     6fa:	8b b3       	in	r24, 0x1b	; 27
     6fc:	88 60       	ori	r24, 0x08	; 8
     6fe:	8b bb       	out	0x1b, r24	; 27
     700:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <enuDataCurrentState>
     704:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     70e:	0f 2e       	mov	r0, r31
     710:	f8 e4       	ldi	r31, 0x48	; 72
     712:	ef 2e       	mov	r14, r31
     714:	f2 e0       	ldi	r31, 0x02	; 2
     716:	ff 2e       	mov	r15, r31
     718:	f0 2d       	mov	r31, r0
     71a:	01 e0       	ldi	r16, 0x01	; 1
     71c:	10 e0       	ldi	r17, 0x00	; 0
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <TDelay_ms>
     730:	3f c0       	rjmp	.+126    	; 0x7b0 <LCD_displayCharacter+0x118>
     732:	8b b3       	in	r24, 0x1b	; 27
     734:	87 7f       	andi	r24, 0xF7	; 247
     736:	8b bb       	out	0x1b, r24	; 27
     738:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <enuDataCurrentState>
     73c:	8f 5f       	subi	r24, 0xFF	; 255
     73e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <enuDataCurrentState>
     742:	36 c0       	rjmp	.+108    	; 0x7b0 <LCD_displayCharacter+0x118>
     744:	2b b3       	in	r18, 0x1b	; 27
     746:	30 e1       	ldi	r19, 0x10	; 16
     748:	83 9f       	mul	r24, r19
     74a:	c0 01       	movw	r24, r0
     74c:	11 24       	eor	r1, r1
     74e:	92 2f       	mov	r25, r18
     750:	9f 70       	andi	r25, 0x0F	; 15
     752:	89 2b       	or	r24, r25
     754:	8b bb       	out	0x1b, r24	; 27
     756:	8b b3       	in	r24, 0x1b	; 27
     758:	88 60       	ori	r24, 0x08	; 8
     75a:	8b bb       	out	0x1b, r24	; 27
     75c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <enuDataCurrentState>
     760:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8LCDFlag>
     76a:	0f 2e       	mov	r0, r31
     76c:	f8 e4       	ldi	r31, 0x48	; 72
     76e:	ef 2e       	mov	r14, r31
     770:	f2 e0       	ldi	r31, 0x02	; 2
     772:	ff 2e       	mov	r15, r31
     774:	f0 2d       	mov	r31, r0
     776:	01 e0       	ldi	r16, 0x01	; 1
     778:	10 e0       	ldi	r17, 0x00	; 0
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <TDelay_ms>
     78c:	11 c0       	rjmp	.+34     	; 0x7b0 <LCD_displayCharacter+0x118>
     78e:	8b b3       	in	r24, 0x1b	; 27
     790:	87 7f       	andi	r24, 0xF7	; 247
     792:	8b bb       	out	0x1b, r24	; 27
     794:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <enuDataCurrentState>
     798:	8f 5f       	subi	r24, 0xFF	; 255
     79a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <enuDataCurrentState>
     79e:	08 c0       	rjmp	.+16     	; 0x7b0 <LCD_displayCharacter+0x118>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <enuRetVar.2072>
     7a6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <enuDataCurrentState>
     7aa:	85 e0       	ldi	r24, 0x05	; 5
     7ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     7b0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <enuRetVar.2072>
     7b4:	1f 91       	pop	r17
     7b6:	0f 91       	pop	r16
     7b8:	ff 90       	pop	r15
     7ba:	ef 90       	pop	r14
     7bc:	08 95       	ret

000007be <LCD_displayString>:
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	b9 f0       	breq	.+46     	; 0x7f0 <LCD_displayString+0x32>
     7c2:	20 91 82 00 	lds	r18, 0x0082	; 0x800082 <u8I.2083>
     7c6:	fc 01       	movw	r30, r24
     7c8:	e2 0f       	add	r30, r18
     7ca:	f1 1d       	adc	r31, r1
     7cc:	80 81       	ld	r24, Z
     7ce:	88 23       	and	r24, r24
     7d0:	59 f0       	breq	.+22     	; 0x7e8 <LCD_displayString+0x2a>
     7d2:	0e 94 4c 03 	call	0x698	; 0x698 <LCD_displayCharacter>
     7d6:	88 23       	and	r24, r24
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <LCD_displayString+0x34>
     7da:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <u8I.2083>
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <u8I.2083>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret
     7e8:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <u8I.2083>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	08 95       	ret
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	08 95       	ret

000007f4 <LCD_goToRowColumn>:
     7f4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <Flag.2089>
     7f8:	91 11       	cpse	r25, r1
     7fa:	1e c0       	rjmp	.+60     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	49 f0       	breq	.+18     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     800:	28 f0       	brcs	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	51 f0       	breq	.+20     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	61 f0       	breq	.+24     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     80a:	0e c0       	rjmp	.+28     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     80c:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <u8Address.2088>
     810:	0b c0       	rjmp	.+22     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     812:	60 5c       	subi	r22, 0xC0	; 192
     814:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <u8Address.2088>
     818:	07 c0       	rjmp	.+14     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     81a:	60 5f       	subi	r22, 0xF0	; 240
     81c:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <u8Address.2088>
     820:	03 c0       	rjmp	.+6      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     822:	60 5b       	subi	r22, 0xB0	; 176
     824:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <u8Address.2088>
     828:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <u8Address.2088>
     82c:	80 68       	ori	r24, 0x80	; 128
     82e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <u8Address.2088>
     832:	9f 5f       	subi	r25, 0xFF	; 255
     834:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <Flag.2089>
     838:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <u8Address.2088>
     83c:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_sendCommand>
     840:	88 23       	and	r24, r24
     842:	19 f0       	breq	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     844:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <Flag.2089>
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	08 95       	ret

0000084c <LCD_intgerToString>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to display integer
*************************************************************************************************/
enuErrorStatus_t LCD_intgerToString(uint16_t u16Data)
{
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	60 97       	sbiw	r28, 0x10	; 16
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	f8 94       	cli
     85a:	de bf       	out	0x3e, r29	; 62
     85c:	0f be       	out	0x3f, r0	; 63
     85e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     860:	4a e0       	ldi	r20, 0x0A	; 10
     862:	be 01       	movw	r22, r28
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 91 10 	call	0x2122	; 0x2122 <__itoa_ncheck>
	/* String to hold the ascii result */
   uint8_t strBuff[SCREEN_WIDTH];
   itoa(u16Data, (char*)strBuff, DECIMAL_BASE); /* 10 for decimal */
   return LCD_displayString(strBuff);
     86c:	ce 01       	movw	r24, r28
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_displayString>
}//end LCD_intgerToString
     874:	60 96       	adiw	r28, 0x10	; 16
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <SW_ICU_Init>:
* Description     : A function to initialize the Software ICU
************************************************************************************/
enuErrorStatus_t SW_ICU_Init(void)
{
   //initialize the software ICU
   EXTINT_Init(SW_ICU_EX_INT_CH);
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	0e 94 84 05 	call	0xb08	; 0xb08 <EXTINT_Init>
   //Set external interrupt channel to detect rising edge 
   EXTINT_SetSenseMode(EXT_RAISING_MODE,SW_ICU_EX_INT_CH);
     88c:	62 e0       	ldi	r22, 0x02	; 2
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	0e 94 9a 05 	call	0xb34	; 0xb34 <EXTINT_SetSenseMode>
   //initialize timer1 
   Timer1_Init(TIMER1_FASTPWM_ICR_TOP_MODE,TIMER1_SCALER_8);
     894:	62 e0       	ldi	r22, 0x02	; 2
     896:	8e e0       	ldi	r24, 0x0E	; 14
     898:	0e 94 89 0a 	call	0x1512	; 0x1512 <Timer1_Init>
   //reset timer 1 overflow counter
   Timer1_ResetOVFCount();
     89c:	0e 94 c5 0a 	call	0x158a	; 0x158a <Timer1_ResetOVFCount>
   //enable timer1 overflow interrupt
   Timer1_OVF_InterruptEnable();
     8a0:	0e 94 ad 0a 	call	0x155a	; 0x155a <Timer1_OVF_InterruptEnable>
   //update the ICR register value to apply the new frequency
   ICR1_R=(TIMER1_FREQ_KHZ*SW_ICU_THOUSAND_MULTIPLIER)/SW_ICU_TWO_DIVISOR;
     8a4:	80 e1       	ldi	r24, 0x10	; 16
     8a6:	97 e2       	ldi	r25, 0x27	; 39
     8a8:	97 bd       	out	0x27, r25	; 39
     8aa:	86 bd       	out	0x26, r24	; 38
   //reset timer register
   TCNT1_R=SW_ICU_TIMER_RESET_VALUE;
     8ac:	1d bc       	out	0x2d, r1	; 45
     8ae:	1c bc       	out	0x2c, r1	; 44
   //return OK status
   return E_OK;
}
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	08 95       	ret

000008b4 <SW_ICU_SetEdge>:
* Description     : A function to set the detection edge of the SW_ICU
************************************************************************************/
enuErrorStatus_t SW_ICU_SetEdge(enuSW_ICU_TriggerMode_t enuEdge)
{
   //Set external interrupt channel to detect the specified edge
   EXTINT_SetSenseMode(enuEdge,SW_ICU_EX_INT_CH);
     8b4:	62 e0       	ldi	r22, 0x02	; 2
     8b6:	0e 94 9a 05 	call	0xb34	; 0xb34 <EXTINT_SetSenseMode>
   //return OK status
   return E_OK;
}
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 95       	ret

000008be <SW_ICU_Reset_Reading>:
* Description     : A function to reset the SW_ICU logic
************************************************************************************/
enuErrorStatus_t SW_ICU_Reset_Reading(void)
{
   //reset timer 1 overflow counter
   Timer1_ResetOVFCount();
     8be:	0e 94 c5 0a 	call	0x158a	; 0x158a <Timer1_ResetOVFCount>
   //return OK status
   return E_OK;
}
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	08 95       	ret

000008c6 <SW_ICU_GetReading>:
* Parameters (out): uint32_t *u32Buffer
* Return value    : enuErrorStatus_t
* Description     : A function to get the SW_ICU register reading
************************************************************************************/
enuErrorStatus_t SW_ICU_GetReading(uint32_t *u32Buffer)
{
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <SW_ICU_GetReading+0xe>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <SW_ICU_GetReading+0x10>
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
   //check if sent pointer points to a valid location
   if (u32Buffer==NULLPTR)
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	01 f1       	breq	.+64     	; 0x91e <SW_ICU_GetReading+0x58>
     8de:	8c 01       	movw	r16, r24
   {
      //return a NOK status
      return E_ERROR;
   }
   //get a snapshot of the timer register
   uint16_t Buffer=TCNT1_R;
     8e0:	ec b4       	in	r14, 0x2c	; 44
     8e2:	fd b4       	in	r15, 0x2d	; 45
   uint32_t overflows=0;
     8e4:	19 82       	std	Y+1, r1	; 0x01
     8e6:	1a 82       	std	Y+2, r1	; 0x02
     8e8:	1b 82       	std	Y+3, r1	; 0x03
     8ea:	1c 82       	std	Y+4, r1	; 0x04
   //get the overflow counter value
   Timer1_GetOVFCount(&overflows);
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <Timer1_GetOVFCount>
   //calculate actual timer value based on overflows number
   *u32Buffer=Buffer+(overflows*TIMER_MAX);
     8f4:	29 81       	ldd	r18, Y+1	; 0x01
     8f6:	3a 81       	ldd	r19, Y+2	; 0x02
     8f8:	4b 81       	ldd	r20, Y+3	; 0x03
     8fa:	5c 81       	ldd	r21, Y+4	; 0x04
     8fc:	a1 e1       	ldi	r26, 0x11	; 17
     8fe:	b7 e2       	ldi	r27, 0x27	; 39
     900:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <__muluhisi3>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	8e 0d       	add	r24, r14
     90a:	9f 1d       	adc	r25, r15
     90c:	a1 1d       	adc	r26, r1
     90e:	b1 1d       	adc	r27, r1
     910:	f8 01       	movw	r30, r16
     912:	80 83       	st	Z, r24
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	a2 83       	std	Z+2, r26	; 0x02
     918:	b3 83       	std	Z+3, r27	; 0x03
   //return OK status
   return E_OK;   
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	01 c0       	rjmp	.+2      	; 0x920 <SW_ICU_GetReading+0x5a>
{
   //check if sent pointer points to a valid location
   if (u32Buffer==NULLPTR)
   {
      //return a NOK status
      return E_ERROR;
     91e:	80 e0       	ldi	r24, 0x00	; 0
   Timer1_GetOVFCount(&overflows);
   //calculate actual timer value based on overflows number
   *u32Buffer=Buffer+(overflows*TIMER_MAX);
   //return OK status
   return E_OK;   
}
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	08 95       	ret

00000936 <SW_ICU_SetCallback>:
* Description     : A function to set callback function to be called in case of ICU event
************************************************************************************/
enuErrorStatus_t SW_ICU_SetCallback(void(*local_fptr)(void))
{
   //check if sent pointer points to a valid location
   if (local_fptr == NULLPTR)
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	29 f0       	breq	.+10     	; 0x944 <SW_ICU_SetCallback+0xe>
   {
      //return a NOK status
      return E_ERROR;
   }
   //set the external interrupt callback to call the sent function
   EXTINT_SetCallBack(local_fptr, SW_ICU_EX_INT_CH);
     93a:	62 e0       	ldi	r22, 0x02	; 2
     93c:	0e 94 f5 05 	call	0xbea	; 0xbea <EXTINT_SetCallBack>
   //return OK status
   return E_OK;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	08 95       	ret
{
   //check if sent pointer points to a valid location
   if (local_fptr == NULLPTR)
   {
      //return a NOK status
      return E_ERROR;
     944:	80 e0       	ldi	r24, 0x00	; 0
   }
   //set the external interrupt callback to call the sent function
   EXTINT_SetCallBack(local_fptr, SW_ICU_EX_INT_CH);
   //return OK status
   return E_OK;
}
     946:	08 95       	ret

00000948 <Get_Readings>:
static void Get_Readings(void)
{
   //create a state flag
   static enuReadingState_t u8Flag=GETTING_RISING_EDGE;
   //check on the flag condition
   switch (u8Flag)
     948:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8Flag.2026>
     94c:	88 23       	and	r24, r24
     94e:	19 f0       	breq	.+6      	; 0x956 <Get_Readings+0xe>
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	61 f0       	breq	.+24     	; 0x96c <Get_Readings+0x24>
     954:	08 95       	ret
   {
      //if the flag is set to detecting a rising edge
      case GETTING_RISING_EDGE:
      //get the rising edge timing
      SW_ICU_GetReading(&Reading1);
     956:	81 e9       	ldi	r24, 0x91	; 145
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SW_ICU_GetReading>
      //switch SW ICU to detect a falling edge
      SW_ICU_SetEdge(SW_ICU_FALLING_EDGE);
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <SW_ICU_SetEdge>
      //switch the flag state
      u8Flag=GETTING_FALLING_EDGE;
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8Flag.2026>
      break;
     96a:	08 95       	ret
      
      //if the flag is set to detecting a rising edge
      case GETTING_FALLING_EDGE:
      SW_ICU_GetReading(&Reading2);
     96c:	8d e8       	ldi	r24, 0x8D	; 141
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SW_ICU_GetReading>
      SW_ICU_SetEdge(SW_ICU_RISING_EDGE);
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <SW_ICU_SetEdge>
      //switch the flag state
      u8Flag=GETTING_RISING_EDGE;
     97a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <u8Flag.2026>
      //switch the Reading Flag state to indecate reading completion
      Reading_Flag=Reading_Complete;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <Reading_Flag>
     984:	08 95       	ret

00000986 <Ultrasonic_Init>:
* Description     : A function to initialize the Ultrasonic Module
************************************************************************************/ 
enuErrorStatus_t Ultrasonic_Init(void)
{
   //initialize Trigger pin
   DIO_PinInit(US_CH0_TRIGGER,OUTPUT,NO_CONNECTION);
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	80 e1       	ldi	r24, 0x10	; 16
     98c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
   //initialize Echo pin
   DIO_PinInit(US_CH0_ECHO,INPUT,NO_CONNECTION);
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	8a e0       	ldi	r24, 0x0A	; 10
     996:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
   //initialize software ICU
   SW_ICU_Init();
     99a:	0e 94 43 04 	call	0x886	; 0x886 <SW_ICU_Init>
   //set callback function to be executed in case of ICU event
   SW_ICU_SetCallback(Get_Readings); 
     99e:	84 ea       	ldi	r24, 0xA4	; 164
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	0e 94 9b 04 	call	0x936	; 0x936 <SW_ICU_SetCallback>
   //return OK status
   return E_OK;
}
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	08 95       	ret

000009aa <Ultrasonic_Trigger>:
* Description     : A function to send a trigger pulse to the Ultrasonic Module
************************************************************************************/
 enuErrorStatus_t Ultrasonic_Trigger(enuUltrasonicChannel_t Channel)
 {
      //reset the reading completion flag
      Reading_Flag=Reading_Not_Complete;
     9aa:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <Reading_Flag>
      //set the ICU to detect a rising edge
      SW_ICU_SetEdge(SW_ICU_RISING_EDGE);
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <SW_ICU_SetEdge>
      //generate the trigger pulse
      DIO_PinWrite(PC0,HIGH);
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	80 e1       	ldi	r24, 0x10	; 16
     9b8:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9bc:	8a e1       	ldi	r24, 0x1A	; 26
     9be:	8a 95       	dec	r24
     9c0:	f1 f7       	brne	.-4      	; 0x9be <Ultrasonic_Trigger+0x14>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <Ultrasonic_Trigger+0x1a>
      _delay_us(TRIGGER_DURATION_US);
      DIO_PinWrite(PC0,LOW);
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	80 e1       	ldi	r24, 0x10	; 16
     9c8:	0e 94 5c 05 	call	0xab8	; 0xab8 <DIO_PinWrite>
      //reset the ICU unit
      SW_ICU_Reset_Reading();
     9cc:	0e 94 5f 04 	call	0x8be	; 0x8be <SW_ICU_Reset_Reading>
      //return an OK status
      return E_OK;
 }
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	08 95       	ret

000009d4 <Ultrasonic_GetDistance>:
 * Parameters (out): uint16_t *Distance
 * Return value    : enuErrorStatus_t
 * Description     : A function to check if ultrasonic reading is complete and return distance
 ************************************************************************************/
 enuErrorStatus_t Ultrasonic_GetDistance(uint16_t *Distance)
 {
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	ec 01       	movw	r28, r24
    //check for reading completion condition
   if (Reading_Flag)
     9de:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Reading_Flag>
     9e2:	88 23       	and	r24, r24
     9e4:	01 f1       	breq	.+64     	; 0xa26 <Ultrasonic_GetDistance+0x52>
   {
      //when echo signal has been received, calculate the distance
      *Distance=((Reading2-Reading1))/US_CM_FACTOR;
     9e6:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Reading2>
     9ea:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <Reading2+0x1>
     9ee:	a0 91 8f 00 	lds	r26, 0x008F	; 0x80008f <Reading2+0x2>
     9f2:	b0 91 90 00 	lds	r27, 0x0090	; 0x800090 <Reading2+0x3>
     9f6:	00 91 91 00 	lds	r16, 0x0091	; 0x800091 <Reading1>
     9fa:	10 91 92 00 	lds	r17, 0x0092	; 0x800092 <Reading1+0x1>
     9fe:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <Reading1+0x2>
     a02:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <Reading1+0x3>
     a06:	bc 01       	movw	r22, r24
     a08:	cd 01       	movw	r24, r26
     a0a:	60 1b       	sub	r22, r16
     a0c:	71 0b       	sbc	r23, r17
     a0e:	82 0b       	sbc	r24, r18
     a10:	93 0b       	sbc	r25, r19
     a12:	2a e3       	ldi	r18, 0x3A	; 58
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
     a1e:	39 83       	std	Y+1, r19	; 0x01
     a20:	28 83       	st	Y, r18
      //return an OK status
      return E_OK;
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <Ultrasonic_GetDistance+0x54>
   }
   //return a NOK status
   return E_ERROR;
     a26:	80 e0       	ldi	r24, 0x00	; 0
 }
     a28:	df 91       	pop	r29
     a2a:	cf 91       	pop	r28
     a2c:	1f 91       	pop	r17
     a2e:	0f 91       	pop	r16
     a30:	08 95       	ret

00000a32 <main>:
#include "APP/CarControl/CarControl.h"


int main(void)
{
   CarControl_Init();
     a32:	0e 94 50 00 	call	0xa0	; 0xa0 <CarControl_Init>
   while (1) 
   {
      CarControl_Update();
     a36:	0e 94 5a 00 	call	0xb4	; 0xb4 <CarControl_Update>
     a3a:	fd cf       	rjmp	.-6      	; 0xa36 <main+0x4>

00000a3c <DIO_PinInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
     a3c:	80 32       	cpi	r24, 0x20	; 32
     a3e:	b0 f5       	brcc	.+108    	; 0xaac <DIO_PinInit+0x70>
     a40:	62 30       	cpi	r22, 0x02	; 2
     a42:	b0 f5       	brcc	.+108    	; 0xab0 <DIO_PinInit+0x74>
     a44:	42 30       	cpi	r20, 0x02	; 2
     a46:	b0 f5       	brcc	.+108    	; 0xab4 <DIO_PinInit+0x78>
     a48:	e8 2f       	mov	r30, r24
     a4a:	e6 95       	lsr	r30
     a4c:	e6 95       	lsr	r30
     a4e:	e6 95       	lsr	r30
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	e8 58       	subi	r30, 0x88	; 136
     a54:	ff 4f       	sbci	r31, 0xFF	; 255
     a56:	e0 81       	ld	r30, Z
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	df 01       	movw	r26, r30
     a5c:	5e 91       	ld	r21, -X
     a5e:	98 2f       	mov	r25, r24
     a60:	97 70       	andi	r25, 0x07	; 7
     a62:	21 e0       	ldi	r18, 0x01	; 1
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	09 2e       	mov	r0, r25
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <DIO_PinInit+0x32>
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	0a 94       	dec	r0
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <DIO_PinInit+0x2e>
     a72:	20 95       	com	r18
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	09 2e       	mov	r0, r25
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_PinInit+0x42>
     a7a:	66 0f       	add	r22, r22
     a7c:	77 1f       	adc	r23, r23
     a7e:	0a 94       	dec	r0
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_PinInit+0x3e>
     a82:	35 2f       	mov	r19, r21
     a84:	32 23       	and	r19, r18
     a86:	63 2b       	or	r22, r19
     a88:	6c 93       	st	X, r22
     a8a:	30 81       	ld	r19, Z
     a8c:	50 e0       	ldi	r21, 0x00	; 0
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_PinInit+0x58>
     a90:	44 0f       	add	r20, r20
     a92:	55 1f       	adc	r21, r21
     a94:	9a 95       	dec	r25
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_PinInit+0x54>
     a98:	23 23       	and	r18, r19
     a9a:	42 2b       	or	r20, r18
     a9c:	40 83       	st	Z, r20
     a9e:	e8 2f       	mov	r30, r24
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	eb 56       	subi	r30, 0x6B	; 107
     aa4:	ff 4f       	sbci	r31, 0xFF	; 255
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 83       	st	Z, r24
     aaa:	08 95       	ret
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	08 95       	ret
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	08 95       	ret

00000ab8 <DIO_PinWrite>:
*************************************************************************************************/
enuErrorStatus_t DIO_PinWrite(enuDIOPinNo_t enuDIOPinNo, uint8_t u8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
     ab8:	e8 2f       	mov	r30, r24
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	eb 56       	subi	r30, 0x6B	; 107
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	90 81       	ld	r25, Z
     ac2:	91 30       	cpi	r25, 0x01	; 1
     ac4:	f9 f4       	brne	.+62     	; 0xb04 <DIO_PinWrite+0x4c>
	{
		/* Writing the value into the corresponding pin */
		ASSIGN_BIT(PORTx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo), u8PinData);
     ac6:	e8 2f       	mov	r30, r24
     ac8:	e6 95       	lsr	r30
     aca:	e6 95       	lsr	r30
     acc:	e6 95       	lsr	r30
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	e8 58       	subi	r30, 0x88	; 136
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	e0 81       	ld	r30, Z
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	90 81       	ld	r25, Z
     ada:	87 70       	andi	r24, 0x07	; 7
     adc:	21 e0       	ldi	r18, 0x01	; 1
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	08 2e       	mov	r0, r24
     ae2:	02 c0       	rjmp	.+4      	; 0xae8 <DIO_PinWrite+0x30>
     ae4:	22 0f       	add	r18, r18
     ae6:	33 1f       	adc	r19, r19
     ae8:	0a 94       	dec	r0
     aea:	e2 f7       	brpl	.-8      	; 0xae4 <DIO_PinWrite+0x2c>
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_PinWrite+0x3c>
     af0:	66 0f       	add	r22, r22
     af2:	77 1f       	adc	r23, r23
     af4:	8a 95       	dec	r24
     af6:	e2 f7       	brpl	.-8      	; 0xaf0 <DIO_PinWrite+0x38>
     af8:	20 95       	com	r18
     afa:	29 23       	and	r18, r25
     afc:	62 2b       	or	r22, r18
     afe:	60 83       	st	Z, r22
		enuRetVar = E_OK;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     b04:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
     b06:	08 95       	ret

00000b08 <EXTINT_Init>:
enuErrorStatus_t EXTINT_Init( enuEXTINTNum enuInterruptNum)
{
	enuErrorStatus_t enuStatus = E_ERROR;

	//Enable peripheral interrupt enable
	switch(enuInterruptNum)
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	41 f0       	breq	.+16     	; 0xb1c <EXTINT_Init+0x14>
     b0c:	18 f0       	brcs	.+6      	; 0xb14 <EXTINT_Init+0xc>
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	49 f0       	breq	.+18     	; 0xb24 <EXTINT_Init+0x1c>
     b12:	0b c0       	rjmp	.+22     	; 0xb2a <EXTINT_Init+0x22>
	{
	case EXTINT_INT0:
		SET_BIT(GICR_R, INT0_B);
     b14:	8b b7       	in	r24, 0x3b	; 59
     b16:	80 64       	ori	r24, 0x40	; 64
     b18:	8b bf       	out	0x3b, r24	; 59
		break;
     b1a:	07 c0       	rjmp	.+14     	; 0xb2a <EXTINT_Init+0x22>
	case EXTINT_INT1:
		SET_BIT(GICR_R, INT1_B);
     b1c:	8b b7       	in	r24, 0x3b	; 59
     b1e:	80 68       	ori	r24, 0x80	; 128
     b20:	8b bf       	out	0x3b, r24	; 59
		break;
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <EXTINT_Init+0x22>
	case EXTINT_INT2:
		SET_BIT(GICR_R, INT2_B);
     b24:	8b b7       	in	r24, 0x3b	; 59
     b26:	80 62       	ori	r24, 0x20	; 32
     b28:	8b bf       	out	0x3b, r24	; 59
		break;
	default:
		break;
	}
    //Enable GIE
	SET_BIT(SREG_R, SREG_I_B);
     b2a:	8f b7       	in	r24, 0x3f	; 63
     b2c:	80 68       	ori	r24, 0x80	; 128
     b2e:	8f bf       	out	0x3f, r24	; 63

	enuStatus = E_OK;

	return enuStatus;
}
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret

00000b34 <EXTINT_SetSenseMode>:
************************************************************************************************/
enuErrorStatus_t EXTINT_SetSenseMode(enuEXTINTSenseControl enuSenseMode, enuEXTINTNum enuInterruptNum)
{
	enuErrorStatus_t enuStatus = E_ERROR;

    if (enuInterruptNum==EXTINT_INT0)
     b34:	61 11       	cpse	r22, r1
     b36:	24 c0       	rjmp	.+72     	; 0xb80 <EXTINT_SetSenseMode+0x4c>
    {
		switch(enuSenseMode)
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	d9 f0       	breq	.+54     	; 0xb72 <EXTINT_SetSenseMode+0x3e>
     b3c:	28 f0       	brcs	.+10     	; 0xb48 <EXTINT_SetSenseMode+0x14>
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	89 f0       	breq	.+34     	; 0xb64 <EXTINT_SetSenseMode+0x30>
     b42:	83 30       	cpi	r24, 0x03	; 3
     b44:	41 f0       	breq	.+16     	; 0xb56 <EXTINT_SetSenseMode+0x22>
     b46:	4f c0       	rjmp	.+158    	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
     b48:	85 b7       	in	r24, 0x35	; 53
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
     b4e:	85 b7       	in	r24, 0x35	; 53
     b50:	8d 7f       	andi	r24, 0xFD	; 253
     b52:	85 bf       	out	0x35, r24	; 53
		  break;
     b54:	48 c0       	rjmp	.+144    	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
     b56:	85 b7       	in	r24, 0x35	; 53
     b58:	81 60       	ori	r24, 0x01	; 1
     b5a:	85 bf       	out	0x35, r24	; 53
		 SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
     b5c:	85 b7       	in	r24, 0x35	; 53
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	85 bf       	out	0x35, r24	; 53
		  break;
     b62:	41 c0       	rjmp	.+130    	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
     b64:	85 b7       	in	r24, 0x35	; 53
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
     b6a:	85 b7       	in	r24, 0x35	; 53
     b6c:	82 60       	ori	r24, 0x02	; 2
     b6e:	85 bf       	out	0x35, r24	; 53
		  break;
     b70:	3a c0       	rjmp	.+116    	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT0);
     b72:	85 b7       	in	r24, 0x35	; 53
     b74:	81 60       	ori	r24, 0x01	; 1
     b76:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT1);
     b78:	85 b7       	in	r24, 0x35	; 53
     b7a:	8d 7f       	andi	r24, 0xFD	; 253
     b7c:	85 bf       	out	0x35, r24	; 53
		  break;
     b7e:	33 c0       	rjmp	.+102    	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT1)
     b80:	61 30       	cpi	r22, 0x01	; 1
     b82:	21 f5       	brne	.+72     	; 0xbcc <EXTINT_SetSenseMode+0x98>
    {
		switch(enuSenseMode)
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	d9 f0       	breq	.+54     	; 0xbbe <EXTINT_SetSenseMode+0x8a>
     b88:	28 f0       	brcs	.+10     	; 0xb94 <EXTINT_SetSenseMode+0x60>
     b8a:	82 30       	cpi	r24, 0x02	; 2
     b8c:	89 f0       	breq	.+34     	; 0xbb0 <EXTINT_SetSenseMode+0x7c>
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	41 f0       	breq	.+16     	; 0xba2 <EXTINT_SetSenseMode+0x6e>
     b92:	29 c0       	rjmp	.+82     	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
     b94:	85 b7       	in	r24, 0x35	; 53
     b96:	8b 7f       	andi	r24, 0xFB	; 251
     b98:	85 bf       	out	0x35, r24	; 53
	      CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
     b9a:	85 b7       	in	r24, 0x35	; 53
     b9c:	87 7f       	andi	r24, 0xF7	; 247
     b9e:	85 bf       	out	0x35, r24	; 53
		  break;
     ba0:	22 c0       	rjmp	.+68     	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
     ba2:	85 b7       	in	r24, 0x35	; 53
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
     ba8:	85 b7       	in	r24, 0x35	; 53
     baa:	88 60       	ori	r24, 0x08	; 8
     bac:	85 bf       	out	0x35, r24	; 53
		  break;
     bae:	1b c0       	rjmp	.+54     	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
     bb0:	85 b7       	in	r24, 0x35	; 53
     bb2:	8b 7f       	andi	r24, 0xFB	; 251
     bb4:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
     bb6:	85 b7       	in	r24, 0x35	; 53
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	85 bf       	out	0x35, r24	; 53
		  break;
     bbc:	14 c0       	rjmp	.+40     	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT2);
     bbe:	85 b7       	in	r24, 0x35	; 53
     bc0:	84 60       	ori	r24, 0x04	; 4
     bc2:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,EXT_INT_MCUCR_R_BIT3);
     bc4:	85 b7       	in	r24, 0x35	; 53
     bc6:	87 7f       	andi	r24, 0xF7	; 247
     bc8:	85 bf       	out	0x35, r24	; 53
		  break;
     bca:	0d c0       	rjmp	.+26     	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT2)
     bcc:	62 30       	cpi	r22, 0x02	; 2
     bce:	59 f4       	brne	.+22     	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
    {
		switch(enuSenseMode)
     bd0:	82 30       	cpi	r24, 0x02	; 2
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <EXTINT_SetSenseMode+0xac>
     bd4:	83 30       	cpi	r24, 0x03	; 3
     bd6:	39 f4       	brne	.+14     	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_RAISING_MODE :
			SET_BIT(MCUCSR_R,ISC2_B);
     bd8:	84 b7       	in	r24, 0x34	; 52
     bda:	80 64       	ori	r24, 0x40	; 64
     bdc:	84 bf       	out	0x34, r24	; 52
			break;
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
			CLEAR_BIT(MCUCSR_R,ISC2_B);
     be0:	84 b7       	in	r24, 0x34	; 52
     be2:	8f 7b       	andi	r24, 0xBF	; 191
     be4:	84 bf       	out	0x34, r24	; 52
    }

	enuStatus = E_OK;

	return enuStatus;
}
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	08 95       	ret

00000bea <EXTINT_SetCallBack>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the sense mode of the External interrupt
************************************************************************************************/
enuErrorStatus_t EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
	if(enuInterruptNum==EXTINT_INT0)
     bea:	61 11       	cpse	r22, r1
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <EXTINT_SetCallBack+0xe>
		pEXTINT0CallBack = pCallBack;
     bee:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <pEXTINT0CallBack+0x1>
     bf2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <pEXTINT0CallBack>
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <EXTINT_SetCallBack+0x28>
	else if(enuInterruptNum==EXTINT_INT1)
     bf8:	61 30       	cpi	r22, 0x01	; 1
     bfa:	29 f4       	brne	.+10     	; 0xc06 <EXTINT_SetCallBack+0x1c>
		pEXTINT1CallBack = pCallBack;
     bfc:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <pEXTINT1CallBack+0x1>
     c00:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <pEXTINT1CallBack>
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <EXTINT_SetCallBack+0x28>
	else if(enuInterruptNum==EXTINT_INT2)
     c06:	62 30       	cpi	r22, 0x02	; 2
     c08:	21 f4       	brne	.+8      	; 0xc12 <EXTINT_SetCallBack+0x28>
		pEXTINT2CallBack = pCallBack;
     c0a:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <pEXTINT2CallBack+0x1>
     c0e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <pEXTINT2CallBack>

	return E_OK;
}
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	08 95       	ret

00000c16 <__vector_1>:
/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void) __attribute__ ((signal,used));

/* ISR to handle the External Interrupt Request 0 */
void __vector_1(void)
{
     c16:	1f 92       	push	r1
     c18:	0f 92       	push	r0
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	0f 92       	push	r0
     c1e:	11 24       	eor	r1, r1
     c20:	2f 93       	push	r18
     c22:	3f 93       	push	r19
     c24:	4f 93       	push	r20
     c26:	5f 93       	push	r21
     c28:	6f 93       	push	r22
     c2a:	7f 93       	push	r23
     c2c:	8f 93       	push	r24
     c2e:	9f 93       	push	r25
     c30:	af 93       	push	r26
     c32:	bf 93       	push	r27
     c34:	ef 93       	push	r30
     c36:	ff 93       	push	r31
	pEXTINT0CallBack();
     c38:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <pEXTINT0CallBack>
     c3c:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <pEXTINT0CallBack+0x1>
     c40:	09 95       	icall
}
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <__vector_2>:

/* ISR to handle the External Interrupt Request 1 */
void __vector_2(void)
{
     c64:	1f 92       	push	r1
     c66:	0f 92       	push	r0
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	0f 92       	push	r0
     c6c:	11 24       	eor	r1, r1
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
	pEXTINT1CallBack();
     c86:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <pEXTINT1CallBack>
     c8a:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <pEXTINT1CallBack+0x1>
     c8e:	09 95       	icall
}
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	0f 90       	pop	r0
     cae:	1f 90       	pop	r1
     cb0:	18 95       	reti

00000cb2 <__vector_3>:

/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void)
{
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	2f 93       	push	r18
     cbe:	3f 93       	push	r19
     cc0:	4f 93       	push	r20
     cc2:	5f 93       	push	r21
     cc4:	6f 93       	push	r22
     cc6:	7f 93       	push	r23
     cc8:	8f 93       	push	r24
     cca:	9f 93       	push	r25
     ccc:	af 93       	push	r26
     cce:	bf 93       	push	r27
     cd0:	ef 93       	push	r30
     cd2:	ff 93       	push	r31
	pEXTINT2CallBack();
     cd4:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <pEXTINT2CallBack>
     cd8:	f0 91 ed 00 	lds	r31, 0x00ED	; 0x8000ed <pEXTINT2CallBack+0x1>
     cdc:	09 95       	icall
}
     cde:	ff 91       	pop	r31
     ce0:	ef 91       	pop	r30
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	7f 91       	pop	r23
     cec:	6f 91       	pop	r22
     cee:	5f 91       	pop	r21
     cf0:	4f 91       	pop	r20
     cf2:	3f 91       	pop	r19
     cf4:	2f 91       	pop	r18
     cf6:	0f 90       	pop	r0
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	0f 90       	pop	r0
     cfc:	1f 90       	pop	r1
     cfe:	18 95       	reti

00000d00 <PWM_Init>:
* Parameters	: enuPWMMode, enuPWMCompareOutputMode, enuPWMClock
* Return Value	: enuErrorStatus_t
* Description  : Initialize the PWM module according to the configuration
*************************************************************************************************/
enuErrorStatus_t PWM_Init(enuPWMMode_t enuPWMMode, enuPWMCompareOutputMode_t enuPWMCompareOutputMode, enuPWMClock_t enuPWMClock)
{
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	
	if(((enuPWMCompareOutputMode == NORMAL_OPERATION)	|| (enuPWMCompareOutputMode == INVERTED_PWM) || (enuPWMCompareOutputMode == NON_INVERTED_PWM))	&&
     d06:	66 23       	and	r22, r22
     d08:	29 f0       	breq	.+10     	; 0xd14 <PWM_Init+0x14>
     d0a:	63 30       	cpi	r22, 0x03	; 3
     d0c:	19 f0       	breq	.+6      	; 0xd14 <PWM_Init+0x14>
     d0e:	62 30       	cpi	r22, 0x02	; 2
     d10:	09 f0       	breq	.+2      	; 0xd14 <PWM_Init+0x14>
     d12:	5e c0       	rjmp	.+188    	; 0xdd0 <PWM_Init+0xd0>
		(enuPWMClock > PWM_CLOCK_MIN_VALUE)					&& (enuPWMClock < PWM_CLOCK_MAX_VALUE)) 
     d14:	48 30       	cpi	r20, 0x08	; 8
     d16:	08 f0       	brcs	.+2      	; 0xd1a <PWM_Init+0x1a>
     d18:	5d c0       	rjmp	.+186    	; 0xdd4 <PWM_Init+0xd4>
     d1a:	14 2f       	mov	r17, r20
     d1c:	d6 2f       	mov	r29, r22
     d1e:	c8 2f       	mov	r28, r24
	{
		/* Initializing OCR1A as output pin */
		DIO_PinInit(PD4, OUTPUT, NO_CONNECTION);
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	8c e1       	ldi	r24, 0x1C	; 28
     d26:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
		/* Initializing OCR1B as output pin */
		DIO_PinInit(PD5, OUTPUT, NO_CONNECTION);
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	8d e1       	ldi	r24, 0x1D	; 29
     d30:	0e 94 1e 05 	call	0xa3c	; 0xa3c <DIO_PinInit>
		/* Selecting the PWM module mode */
		ASSIGN_BITS(TCCR1A_R, PWM_TC1_WGM10_WGM11_START_BIT, enuPWMMode, PWM_TC1_WGM10_WGM11_MASK);
     d34:	8f b5       	in	r24, 0x2f	; 47
     d36:	8c 7f       	andi	r24, 0xFC	; 252
     d38:	8c 2b       	or	r24, r28
     d3a:	8f bd       	out	0x2f, r24	; 47
		ASSIGN_BITS(TCCR1B_R, PWM_TC1_WGM12_WGM13_START_BIT, enuPWMMode, PWM_TC1_WGM12_WGM13_MASK);
     d3c:	2e b5       	in	r18, 0x2e	; 46
     d3e:	8c 2f       	mov	r24, r28
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	88 0f       	add	r24, r24
     d4c:	99 1f       	adc	r25, r25
     d4e:	92 2f       	mov	r25, r18
     d50:	9f 79       	andi	r25, 0x9F	; 159
     d52:	89 2b       	or	r24, r25
     d54:	8e bd       	out	0x2e, r24	; 46
		/* Selecting the behavior of the compare match mode output for channel A (Inverted or Non-inverted PWM) */
		ASSIGN_BITS(TCCR1A_R, PWM_TC1A_COMPARE_OUTPUT_MODE_START_BIT, enuPWMCompareOutputMode, PWM_TC1A_COMPARE_OUTPUT_MODE_MASK);
     d56:	4f b5       	in	r20, 0x2f	; 47
     d58:	8d 2f       	mov	r24, r29
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9c 01       	movw	r18, r24
     d5e:	00 24       	eor	r0, r0
     d60:	36 95       	lsr	r19
     d62:	27 95       	ror	r18
     d64:	07 94       	ror	r0
     d66:	36 95       	lsr	r19
     d68:	27 95       	ror	r18
     d6a:	07 94       	ror	r0
     d6c:	32 2f       	mov	r19, r18
     d6e:	20 2d       	mov	r18, r0
     d70:	34 2f       	mov	r19, r20
     d72:	3f 73       	andi	r19, 0x3F	; 63
     d74:	23 2b       	or	r18, r19
     d76:	2f bd       	out	0x2f, r18	; 47
		/* Selecting the behavior of the compare match mode output for channel B (Inverted or Non-inverted PWM) */
		ASSIGN_BITS(TCCR1A_R, PWM_TC1B_COMPARE_OUTPUT_MODE_START_BIT, enuPWMCompareOutputMode, PWM_TC1B_COMPARE_OUTPUT_MODE_MASK);
     d78:	2f b5       	in	r18, 0x2f	; 47
     d7a:	82 95       	swap	r24
     d7c:	92 95       	swap	r25
     d7e:	90 7f       	andi	r25, 0xF0	; 240
     d80:	98 27       	eor	r25, r24
     d82:	80 7f       	andi	r24, 0xF0	; 240
     d84:	98 27       	eor	r25, r24
     d86:	92 2f       	mov	r25, r18
     d88:	9f 7c       	andi	r25, 0xCF	; 207
     d8a:	89 2b       	or	r24, r25
     d8c:	8f bd       	out	0x2f, r24	; 47
		/* Selecting the pre-configured clock prescaler value */
		ASSIGN_BITS(TCCR1B_R, PWM_CLOCK_SELECT_START_BIT, enuPWMClock, PWM_CLOCK_SELECT_MASK);
     d8e:	4e b5       	in	r20, 0x2e	; 46
     d90:	48 7f       	andi	r20, 0xF8	; 248
     d92:	41 2b       	or	r20, r17
     d94:	4e bd       	out	0x2e, r20	; 46
		/* Stopping the PWM signal at the beginning of initialization phase */
		if(enuPWMCompareOutputMode == INVERTED_PWM)
     d96:	d3 30       	cpi	r29, 0x03	; 3
     d98:	49 f4       	brne	.+18     	; 0xdac <PWM_Init+0xac>
		{
			CLEAR_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
     d9a:	8a b5       	in	r24, 0x2a	; 42
     d9c:	9b b5       	in	r25, 0x2b	; 43
     d9e:	1b bc       	out	0x2b, r1	; 43
     da0:	1a bc       	out	0x2a, r1	; 42
			CLEAR_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
     da2:	88 b5       	in	r24, 0x28	; 40
     da4:	99 b5       	in	r25, 0x29	; 41
     da6:	19 bc       	out	0x29, r1	; 41
     da8:	18 bc       	out	0x28, r1	; 40
     daa:	0c c0       	rjmp	.+24     	; 0xdc4 <PWM_Init+0xc4>
		}
		else if(enuPWMCompareOutputMode == NON_INVERTED_PWM)
     dac:	d2 30       	cpi	r29, 0x02	; 2
     dae:	51 f4       	brne	.+20     	; 0xdc4 <PWM_Init+0xc4>
		{
			SET_BITS(OCR1A_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
     db0:	8a b5       	in	r24, 0x2a	; 42
     db2:	9b b5       	in	r25, 0x2b	; 43
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	9f ef       	ldi	r25, 0xFF	; 255
     db8:	9b bd       	out	0x2b, r25	; 43
     dba:	8a bd       	out	0x2a, r24	; 42
			SET_BITS(OCR1B_R, PWM_TC1_COMPARE_OUTPUT_REGISTER_START_BIT, PWM_TC1_COMPARE_OUTPUT_REGISTER_MASK);
     dbc:	28 b5       	in	r18, 0x28	; 40
     dbe:	39 b5       	in	r19, 0x29	; 41
     dc0:	99 bd       	out	0x29, r25	; 41
     dc2:	88 bd       	out	0x28, r24	; 40
		}
		else
		{
		}
		/* Saving the value of the compare output mode value into a temporary variable */
		enuPWMCompareOutputModeState = enuPWMCompareOutputMode;
     dc4:	d0 93 b5 00 	sts	0x00B5, r29	; 0x8000b5 <enuPWMCompareOutputModeState>
		enuPWMState = PWM_INIT_DONE;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <enuPWMState>
		enuRetVar = E_OK;
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <PWM_Init+0xd6>
	}
	else
	{
		enuRetVar = E_ERROR;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	01 c0       	rjmp	.+2      	; 0xdd6 <PWM_Init+0xd6>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	08 95       	ret

00000dde <PWM_Start>:
enuErrorStatus_t PWM_Start(uint8_t u8DutyCycle)
{
	enuErrorStatus_t enuRetVar = E_OK;
	uint16_t u16PWMRegisterValue;
	
	if((enuPWMState == PWM_INIT_DONE) && (u8DutyCycle >= PWM_DUTY_CYCLE_MIN_VALUE) && (u8DutyCycle <= PWM_DUTY_CYCLE_MAX_VALUE))
     dde:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <enuPWMState>
     de2:	91 30       	cpi	r25, 0x01	; 1
     de4:	c1 f4       	brne	.+48     	; 0xe16 <PWM_Start+0x38>
     de6:	85 36       	cpi	r24, 0x65	; 101
     de8:	c0 f4       	brcc	.+48     	; 0xe1a <PWM_Start+0x3c>
	{
		ICR1_R = PWM_FREQUENCY_10K;
     dea:	20 e1       	ldi	r18, 0x10	; 16
     dec:	37 e2       	ldi	r19, 0x27	; 39
     dee:	37 bd       	out	0x27, r19	; 39
     df0:	26 bd       	out	0x26, r18	; 38
		/* Calculating the PWM register value required according to the equation */
		u16PWMRegisterValue = PWM_CALCULATE_REGISTER_VALUE(ICR1_R, u8DutyCycle);
     df2:	26 b5       	in	r18, 0x26	; 38
     df4:	37 b5       	in	r19, 0x27	; 39
     df6:	a8 2f       	mov	r26, r24
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
     dfe:	24 e6       	ldi	r18, 0x64	; 100
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
		/* Loading the PWM register value into OCR1 registers */
		OCR1A_R = u16PWMRegisterValue;
     e0a:	3b bd       	out	0x2b, r19	; 43
     e0c:	2a bd       	out	0x2a, r18	; 42
		OCR1B_R = u16PWMRegisterValue;
     e0e:	39 bd       	out	0x29, r19	; 41
     e10:	28 bd       	out	0x28, r18	; 40
* Return Value	: enuErrorStatus_t
* Description  : Start the PWM signal with the specified duty cycle
*************************************************************************************************/
enuErrorStatus_t PWM_Start(uint8_t u8DutyCycle)
{
	enuErrorStatus_t enuRetVar = E_OK;
     e12:	81 e0       	ldi	r24, 0x01	; 1
		ICR1_R = PWM_FREQUENCY_10K;
		/* Calculating the PWM register value required according to the equation */
		u16PWMRegisterValue = PWM_CALCULATE_REGISTER_VALUE(ICR1_R, u8DutyCycle);
		/* Loading the PWM register value into OCR1 registers */
		OCR1A_R = u16PWMRegisterValue;
		OCR1B_R = u16PWMRegisterValue;
     e14:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	08 95       	ret
     e1a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
     e1c:	08 95       	ret

00000e1e <T0_Init>:
enuErrorStatus_t T2_OC_InterruptEnable(void)
{
   //set the TOIE bit to enable output compare interrupt
   SET_BIT(TIMSK_R,OCIE2_B);
   return E_OK;
}
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	69 f0       	breq	.+26     	; 0xe3c <T0_Init+0x1e>
     e22:	28 f0       	brcs	.+10     	; 0xe2e <T0_Init+0x10>
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	89 f0       	breq	.+34     	; 0xe4a <T0_Init+0x2c>
     e28:	83 30       	cpi	r24, 0x03	; 3
     e2a:	b1 f0       	breq	.+44     	; 0xe58 <T0_Init+0x3a>
     e2c:	5c c0       	rjmp	.+184    	; 0xee6 <T0_Init+0xc8>
     e2e:	83 b7       	in	r24, 0x33	; 51
     e30:	8f 7b       	andi	r24, 0xBF	; 191
     e32:	83 bf       	out	0x33, r24	; 51
     e34:	83 b7       	in	r24, 0x33	; 51
     e36:	87 7f       	andi	r24, 0xF7	; 247
     e38:	83 bf       	out	0x33, r24	; 51
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <T0_Init+0x46>
     e3c:	83 b7       	in	r24, 0x33	; 51
     e3e:	80 64       	ori	r24, 0x40	; 64
     e40:	83 bf       	out	0x33, r24	; 51
     e42:	83 b7       	in	r24, 0x33	; 51
     e44:	87 7f       	andi	r24, 0xF7	; 247
     e46:	83 bf       	out	0x33, r24	; 51
     e48:	0d c0       	rjmp	.+26     	; 0xe64 <T0_Init+0x46>
     e4a:	83 b7       	in	r24, 0x33	; 51
     e4c:	8f 7b       	andi	r24, 0xBF	; 191
     e4e:	83 bf       	out	0x33, r24	; 51
     e50:	83 b7       	in	r24, 0x33	; 51
     e52:	88 60       	ori	r24, 0x08	; 8
     e54:	83 bf       	out	0x33, r24	; 51
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <T0_Init+0x46>
     e58:	83 b7       	in	r24, 0x33	; 51
     e5a:	80 64       	ori	r24, 0x40	; 64
     e5c:	83 bf       	out	0x33, r24	; 51
     e5e:	83 b7       	in	r24, 0x33	; 51
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	83 bf       	out	0x33, r24	; 51
     e64:	83 b7       	in	r24, 0x33	; 51
     e66:	88 7f       	andi	r24, 0xF8	; 248
     e68:	83 bf       	out	0x33, r24	; 51
     e6a:	83 b7       	in	r24, 0x33	; 51
     e6c:	86 2b       	or	r24, r22
     e6e:	83 bf       	out	0x33, r24	; 51
     e70:	62 30       	cpi	r22, 0x02	; 2
     e72:	c9 f0       	breq	.+50     	; 0xea6 <T0_Init+0x88>
     e74:	28 f4       	brcc	.+10     	; 0xe80 <T0_Init+0x62>
     e76:	66 23       	and	r22, r22
     e78:	49 f0       	breq	.+18     	; 0xe8c <T0_Init+0x6e>
     e7a:	61 30       	cpi	r22, 0x01	; 1
     e7c:	69 f0       	breq	.+26     	; 0xe98 <T0_Init+0x7a>
     e7e:	35 c0       	rjmp	.+106    	; 0xeea <T0_Init+0xcc>
     e80:	64 30       	cpi	r22, 0x04	; 4
     e82:	09 f1       	breq	.+66     	; 0xec6 <T0_Init+0xa8>
     e84:	c0 f0       	brcs	.+48     	; 0xeb6 <T0_Init+0x98>
     e86:	65 30       	cpi	r22, 0x05	; 5
     e88:	31 f1       	breq	.+76     	; 0xed6 <T0_Init+0xb8>
     e8a:	2f c0       	rjmp	.+94     	; 0xeea <T0_Init+0xcc>
     e8c:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <Gu16_T0Prescaler+0x1>
     e90:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <Gu16_T0Prescaler>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Gu16_T0Prescaler+0x1>
     ea0:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Gu16_T0Prescaler>
     ea4:	08 95       	ret
     ea6:	88 e0       	ldi	r24, 0x08	; 8
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Gu16_T0Prescaler+0x1>
     eae:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Gu16_T0Prescaler>
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	08 95       	ret
     eb6:	80 e4       	ldi	r24, 0x40	; 64
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Gu16_T0Prescaler+0x1>
     ebe:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Gu16_T0Prescaler>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	08 95       	ret
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Gu16_T0Prescaler+0x1>
     ece:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Gu16_T0Prescaler>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	08 95       	ret
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	94 e0       	ldi	r25, 0x04	; 4
     eda:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <Gu16_T0Prescaler+0x1>
     ede:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <Gu16_T0Prescaler>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	08 95       	ret
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	08 95       	ret
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	08 95       	ret

00000eee <T0_OV_InterruptEnable>:
     eee:	89 b7       	in	r24, 0x39	; 57
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	89 bf       	out	0x39, r24	; 57
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	08 95       	ret

00000ef8 <T0_OV_InterruptDisable>:
     ef8:	89 b7       	in	r24, 0x39	; 57
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	89 bf       	out	0x39, r24	; 57
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	08 95       	ret

00000f02 <T0_OC_InterruptDisable>:
     f02:	89 b7       	in	r24, 0x39	; 57
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	89 bf       	out	0x39, r24	; 57
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	08 95       	ret

00000f0c <T0_Start>:
     f0c:	2f 92       	push	r2
     f0e:	3f 92       	push	r3
     f10:	4f 92       	push	r4
     f12:	5f 92       	push	r5
     f14:	6f 92       	push	r6
     f16:	7f 92       	push	r7
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	af 92       	push	r10
     f1e:	bf 92       	push	r11
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	2f 97       	sbiw	r28, 0x0f	; 15
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	a2 2e       	mov	r10, r18
     f42:	b3 2e       	mov	r11, r19
     f44:	c4 2e       	mov	r12, r20
     f46:	d5 2e       	mov	r13, r21
     f48:	e6 2e       	mov	r14, r22
     f4a:	f7 2e       	mov	r15, r23
     f4c:	e8 2f       	mov	r30, r24
     f4e:	f9 2f       	mov	r31, r25
     f50:	09 b6       	in	r0, 0x39	; 57
     f52:	00 fc       	sbrc	r0, 0
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <T0_Start+0x50>
     f56:	09 b6       	in	r0, 0x39	; 57
     f58:	01 fe       	sbrs	r0, 1
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <T0_Start+0x60>
     f5c:	01 15       	cp	r16, r1
     f5e:	11 05       	cpc	r17, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <T0_Start+0x58>
     f62:	d4 c0       	rjmp	.+424    	; 0x110c <T0_Start+0x200>
     f64:	10 93 e6 00 	sts	0x00E6, r17	; 0x8000e6 <G_fptr+0x1>
     f68:	00 93 e5 00 	sts	0x00E5, r16	; 0x8000e5 <G_fptr>
     f6c:	2a 2d       	mov	r18, r10
     f6e:	3b 2d       	mov	r19, r11
     f70:	4c 2d       	mov	r20, r12
     f72:	5d 2d       	mov	r21, r13
     f74:	6e 2d       	mov	r22, r14
     f76:	7f 2d       	mov	r23, r15
     f78:	8e 2f       	mov	r24, r30
     f7a:	9f 2f       	mov	r25, r31
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	0e 94 85 10 	call	0x210a	; 0x210a <__cmpdi2_s8>
     f82:	09 f4       	brne	.+2      	; 0xf86 <T0_Start+0x7a>
     f84:	c5 c0       	rjmp	.+394    	; 0x1110 <T0_Start+0x204>
     f86:	21 15       	cp	r18, r1
     f88:	a1 e0       	ldi	r26, 0x01	; 1
     f8a:	3a 07       	cpc	r19, r26
     f8c:	41 05       	cpc	r20, r1
     f8e:	51 05       	cpc	r21, r1
     f90:	61 05       	cpc	r22, r1
     f92:	71 05       	cpc	r23, r1
     f94:	81 05       	cpc	r24, r1
     f96:	91 05       	cpc	r25, r1
     f98:	79 f1       	breq	.+94     	; 0xff8 <T0_Start+0xec>
     f9a:	70 f1       	brcs	.+92     	; 0xff8 <T0_Start+0xec>
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	31 40       	sbci	r19, 0x01	; 1
     fa0:	41 09       	sbc	r20, r1
     fa2:	51 09       	sbc	r21, r1
     fa4:	61 09       	sbc	r22, r1
     fa6:	71 09       	sbc	r23, r1
     fa8:	81 09       	sbc	r24, r1
     faa:	91 09       	sbc	r25, r1
     fac:	2f 3f       	cpi	r18, 0xFF	; 255
     fae:	36 40       	sbci	r19, 0x06	; 6
     fb0:	41 05       	cpc	r20, r1
     fb2:	51 05       	cpc	r21, r1
     fb4:	61 05       	cpc	r22, r1
     fb6:	71 05       	cpc	r23, r1
     fb8:	81 05       	cpc	r24, r1
     fba:	91 05       	cpc	r25, r1
     fbc:	f9 f0       	breq	.+62     	; 0xffc <T0_Start+0xf0>
     fbe:	f0 f0       	brcs	.+60     	; 0xffc <T0_Start+0xf0>
     fc0:	2a 2d       	mov	r18, r10
     fc2:	3b 2d       	mov	r19, r11
     fc4:	4c 2d       	mov	r20, r12
     fc6:	5d 2d       	mov	r21, r13
     fc8:	6e 2d       	mov	r22, r14
     fca:	7f 2d       	mov	r23, r15
     fcc:	8e 2f       	mov	r24, r30
     fce:	9f 2f       	mov	r25, r31
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	38 40       	sbci	r19, 0x08	; 8
     fd4:	41 09       	sbc	r20, r1
     fd6:	51 09       	sbc	r21, r1
     fd8:	61 09       	sbc	r22, r1
     fda:	71 09       	sbc	r23, r1
     fdc:	81 09       	sbc	r24, r1
     fde:	91 09       	sbc	r25, r1
     fe0:	2f 3f       	cpi	r18, 0xFF	; 255
     fe2:	37 41       	sbci	r19, 0x17	; 23
     fe4:	41 05       	cpc	r20, r1
     fe6:	51 05       	cpc	r21, r1
     fe8:	61 05       	cpc	r22, r1
     fea:	71 05       	cpc	r23, r1
     fec:	81 05       	cpc	r24, r1
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <T0_Start+0xe8>
     ff2:	30 f4       	brcc	.+12     	; 0x1000 <T0_Start+0xf4>
     ff4:	64 e0       	ldi	r22, 0x04	; 4
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <T0_Start+0xf6>
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <T0_Start+0xf6>
     ffc:	63 e0       	ldi	r22, 0x03	; 3
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <T0_Start+0xf6>
    1000:	65 e0       	ldi	r22, 0x05	; 5
    1002:	1f 2f       	mov	r17, r31
    1004:	0e 2f       	mov	r16, r30
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 0f 07 	call	0xe1e	; 0xe1e <T0_Init>
    100c:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <Gu16_T0Prescaler>
    1010:	30 91 d3 00 	lds	r19, 0x00D3	; 0x8000d3 <Gu16_T0Prescaler+0x1>
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	72 e1       	ldi	r23, 0x12	; 18
    101c:	8a e7       	ldi	r24, 0x7A	; 122
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>
    1024:	19 01       	movw	r2, r18
    1026:	2a 01       	movw	r4, r20
    1028:	61 2c       	mov	r6, r1
    102a:	71 2c       	mov	r7, r1
    102c:	43 01       	movw	r8, r6
    102e:	2f 83       	std	Y+7, r18	; 0x07
    1030:	38 86       	std	Y+8, r3	; 0x08
    1032:	49 86       	std	Y+9, r4	; 0x09
    1034:	5a 86       	std	Y+10, r5	; 0x0a
    1036:	6b 86       	std	Y+11, r6	; 0x0b
    1038:	7c 86       	std	Y+12, r7	; 0x0c
    103a:	8d 86       	std	Y+13, r8	; 0x0d
    103c:	9e 86       	std	Y+14, r9	; 0x0e
    103e:	33 2d       	mov	r19, r3
    1040:	44 2d       	mov	r20, r4
    1042:	55 2d       	mov	r21, r5
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__muldi3>
    1050:	22 2e       	mov	r2, r18
    1052:	33 2e       	mov	r3, r19
    1054:	49 83       	std	Y+1, r20	; 0x01
    1056:	5a 83       	std	Y+2, r21	; 0x02
    1058:	6b 83       	std	Y+3, r22	; 0x03
    105a:	7c 83       	std	Y+4, r23	; 0x04
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	9e 83       	std	Y+6, r25	; 0x06
    1060:	a1 2c       	mov	r10, r1
    1062:	68 94       	set
    1064:	bb 24       	eor	r11, r11
    1066:	b6 f8       	bld	r11, 6
    1068:	0f 2e       	mov	r0, r31
    106a:	f2 e4       	ldi	r31, 0x42	; 66
    106c:	cf 2e       	mov	r12, r31
    106e:	f0 2d       	mov	r31, r0
    1070:	0f 2e       	mov	r0, r31
    1072:	ff e0       	ldi	r31, 0x0F	; 15
    1074:	df 2e       	mov	r13, r31
    1076:	f0 2d       	mov	r31, r0
    1078:	e1 2c       	mov	r14, r1
    107a:	f1 2c       	mov	r15, r1
    107c:	00 e0       	ldi	r16, 0x00	; 0
    107e:	10 e0       	ldi	r17, 0x00	; 0
    1080:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__udivdi3>
    1084:	2f 87       	std	Y+15, r18	; 0x0f
    1086:	3f 83       	std	Y+7, r19	; 0x07
    1088:	44 2e       	mov	r4, r20
    108a:	55 2e       	mov	r5, r21
    108c:	66 2e       	mov	r6, r22
    108e:	77 2e       	mov	r7, r23
    1090:	88 2e       	mov	r8, r24
    1092:	99 2e       	mov	r9, r25
    1094:	20 93 dd 00 	sts	0x00DD, r18	; 0x8000dd <Gu32_T0MaxOVCount>
    1098:	30 93 de 00 	sts	0x00DE, r19	; 0x8000de <Gu32_T0MaxOVCount+0x1>
    109c:	40 92 df 00 	sts	0x00DF, r4	; 0x8000df <Gu32_T0MaxOVCount+0x2>
    10a0:	50 92 e0 00 	sts	0x00E0, r5	; 0x8000e0 <Gu32_T0MaxOVCount+0x3>
    10a4:	60 92 e1 00 	sts	0x00E1, r6	; 0x8000e1 <Gu32_T0MaxOVCount+0x4>
    10a8:	70 92 e2 00 	sts	0x00E2, r7	; 0x8000e2 <Gu32_T0MaxOVCount+0x5>
    10ac:	80 92 e3 00 	sts	0x00E3, r8	; 0x8000e3 <Gu32_T0MaxOVCount+0x6>
    10b0:	90 92 e4 00 	sts	0x00E4, r9	; 0x8000e4 <Gu32_T0MaxOVCount+0x7>
    10b4:	68 94       	set
    10b6:	aa 24       	eor	r10, r10
    10b8:	a6 f8       	bld	r10, 6
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f2 e4       	ldi	r31, 0x42	; 66
    10be:	bf 2e       	mov	r11, r31
    10c0:	f0 2d       	mov	r31, r0
    10c2:	0f 2e       	mov	r0, r31
    10c4:	ff e0       	ldi	r31, 0x0F	; 15
    10c6:	cf 2e       	mov	r12, r31
    10c8:	f0 2d       	mov	r31, r0
    10ca:	d1 2c       	mov	r13, r1
    10cc:	22 2d       	mov	r18, r2
    10ce:	33 2d       	mov	r19, r3
    10d0:	49 81       	ldd	r20, Y+1	; 0x01
    10d2:	5a 81       	ldd	r21, Y+2	; 0x02
    10d4:	6b 81       	ldd	r22, Y+3	; 0x03
    10d6:	7c 81       	ldd	r23, Y+4	; 0x04
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__udivdi3>
    10e0:	e2 2f       	mov	r30, r18
    10e2:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <Gu32_T0LastOVTicks>
    10e6:	2f 85       	ldd	r18, Y+15	; 0x0f
    10e8:	3f 81       	ldd	r19, Y+7	; 0x07
    10ea:	44 2d       	mov	r20, r4
    10ec:	55 2d       	mov	r21, r5
    10ee:	66 2d       	mov	r22, r6
    10f0:	77 2d       	mov	r23, r7
    10f2:	88 2d       	mov	r24, r8
    10f4:	99 2d       	mov	r25, r9
    10f6:	a0 e0       	ldi	r26, 0x00	; 0
    10f8:	0e 94 85 10 	call	0x210a	; 0x210a <__cmpdi2_s8>
    10fc:	21 f4       	brne	.+8      	; 0x1106 <T0_Start+0x1fa>
    10fe:	e1 95       	neg	r30
    1100:	e2 bf       	out	0x32, r30	; 50
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <T0_Start+0x206>
    1106:	12 be       	out	0x32, r1	; 50
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <T0_Start+0x206>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <T0_Start+0x206>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	2f 96       	adiw	r28, 0x0f	; 15
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	bf 90       	pop	r11
    1130:	af 90       	pop	r10
    1132:	9f 90       	pop	r9
    1134:	8f 90       	pop	r8
    1136:	7f 90       	pop	r7
    1138:	6f 90       	pop	r6
    113a:	5f 90       	pop	r5
    113c:	4f 90       	pop	r4
    113e:	3f 90       	pop	r3
    1140:	2f 90       	pop	r2
    1142:	08 95       	ret

00001144 <T0_Stop>:
    1144:	0e 94 7c 07 	call	0xef8	; 0xef8 <T0_OV_InterruptDisable>
    1148:	0e 94 81 07 	call	0xf02	; 0xf02 <T0_OC_InterruptDisable>
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 0f 07 	call	0xe1e	; 0xe1e <T0_Init>
    1154:	88 b7       	in	r24, 0x38	; 56
    1156:	81 60       	ori	r24, 0x01	; 1
    1158:	88 bf       	out	0x38, r24	; 56
    115a:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <Gu32_T0MaxOVCount>
    115e:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <Gu32_T0MaxOVCount+0x1>
    1162:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <Gu32_T0MaxOVCount+0x2>
    1166:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <Gu32_T0MaxOVCount+0x3>
    116a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <Gu32_T0MaxOVCount+0x4>
    116e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <Gu32_T0MaxOVCount+0x5>
    1172:	10 92 e3 00 	sts	0x00E3, r1	; 0x8000e3 <Gu32_T0MaxOVCount+0x6>
    1176:	10 92 e4 00 	sts	0x00E4, r1	; 0x8000e4 <Gu32_T0MaxOVCount+0x7>
    117a:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <Gu32_T0LastOVTicks>
    117e:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <Gu32_T0CurrentOVCount>
    1182:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    1186:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    118a:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    118e:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    1192:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    1196:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    119a:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	08 95       	ret

000011a2 <T0_GetStatus>:
    11a2:	2f 92       	push	r2
    11a4:	3f 92       	push	r3
    11a6:	4f 92       	push	r4
    11a8:	5f 92       	push	r5
    11aa:	6f 92       	push	r6
    11ac:	7f 92       	push	r7
    11ae:	8f 92       	push	r8
    11b0:	9f 92       	push	r9
    11b2:	af 92       	push	r10
    11b4:	bf 92       	push	r11
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <T0_GetStatus+0x26>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <T0_GetStatus+0x28>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	20 90 d5 00 	lds	r2, 0x00D5	; 0x8000d5 <Gu32_T0CurrentOVCount>
    11d2:	30 90 d6 00 	lds	r3, 0x00D6	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    11d6:	40 90 d7 00 	lds	r4, 0x00D7	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    11da:	50 90 d8 00 	lds	r5, 0x00D8	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    11de:	60 90 d9 00 	lds	r6, 0x00D9	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    11e2:	70 90 da 00 	lds	r7, 0x00DA	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    11e6:	80 90 db 00 	lds	r8, 0x00DB	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    11ea:	90 90 dc 00 	lds	r9, 0x00DC	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    11ee:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <Gu32_T0MaxOVCount>
    11f2:	8c 83       	std	Y+4, r24	; 0x04
    11f4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <Gu32_T0MaxOVCount+0x1>
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	b0 91 df 00 	lds	r27, 0x00DF	; 0x8000df <Gu32_T0MaxOVCount+0x2>
    11fe:	a0 91 e0 00 	lds	r26, 0x00E0	; 0x8000e0 <Gu32_T0MaxOVCount+0x3>
    1202:	f0 91 e1 00 	lds	r31, 0x00E1	; 0x8000e1 <Gu32_T0MaxOVCount+0x4>
    1206:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <Gu32_T0MaxOVCount+0x5>
    120a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <Gu32_T0MaxOVCount+0x6>
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <Gu32_T0MaxOVCount+0x7>
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	22 2d       	mov	r18, r2
    1218:	33 2d       	mov	r19, r3
    121a:	44 2d       	mov	r20, r4
    121c:	55 2d       	mov	r21, r5
    121e:	66 2d       	mov	r22, r6
    1220:	77 2d       	mov	r23, r7
    1222:	88 2d       	mov	r24, r8
    1224:	99 2d       	mov	r25, r9
    1226:	ac 80       	ldd	r10, Y+4	; 0x04
    1228:	bb 80       	ldd	r11, Y+3	; 0x03
    122a:	cb 2e       	mov	r12, r27
    122c:	da 2e       	mov	r13, r26
    122e:	ef 2e       	mov	r14, r31
    1230:	fe 2e       	mov	r15, r30
    1232:	09 81       	ldd	r16, Y+1	; 0x01
    1234:	1a 81       	ldd	r17, Y+2	; 0x02
    1236:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    123a:	f0 f4       	brcc	.+60     	; 0x1278 <T0_GetStatus+0xd6>
    123c:	08 b6       	in	r0, 0x38	; 56
    123e:	00 fe       	sbrs	r0, 0
    1240:	65 c0       	rjmp	.+202    	; 0x130c <T0_GetStatus+0x16a>
    1242:	88 b7       	in	r24, 0x38	; 56
    1244:	81 60       	ori	r24, 0x01	; 1
    1246:	88 bf       	out	0x38, r24	; 56
    1248:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <Gu32_T0CurrentOVCount>
    124c:	88 2d       	mov	r24, r8
    124e:	a1 e0       	ldi	r26, 0x01	; 1
    1250:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    1254:	20 93 d5 00 	sts	0x00D5, r18	; 0x8000d5 <Gu32_T0CurrentOVCount>
    1258:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    125c:	40 93 d7 00 	sts	0x00D7, r20	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    1260:	50 93 d8 00 	sts	0x00D8, r21	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    1264:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    1268:	70 93 da 00 	sts	0x00DA, r23	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    126c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    1270:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	4b c0       	rjmp	.+150    	; 0x130e <T0_GetStatus+0x16c>
    1278:	22 2d       	mov	r18, r2
    127a:	33 2d       	mov	r19, r3
    127c:	44 2d       	mov	r20, r4
    127e:	55 2d       	mov	r21, r5
    1280:	66 2d       	mov	r22, r6
    1282:	77 2d       	mov	r23, r7
    1284:	88 2d       	mov	r24, r8
    1286:	99 2d       	mov	r25, r9
    1288:	ac 80       	ldd	r10, Y+4	; 0x04
    128a:	bb 80       	ldd	r11, Y+3	; 0x03
    128c:	cb 2e       	mov	r12, r27
    128e:	da 2e       	mov	r13, r26
    1290:	ef 2e       	mov	r14, r31
    1292:	fe 2e       	mov	r15, r30
    1294:	09 81       	ldd	r16, Y+1	; 0x01
    1296:	1a 81       	ldd	r17, Y+2	; 0x02
    1298:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    129c:	61 f5       	brne	.+88     	; 0x12f6 <T0_GetStatus+0x154>
    129e:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <Gu32_T0LastOVTicks>
    12a2:	80 95       	com	r24
    12a4:	82 bf       	out	0x32, r24	; 50
    12a6:	88 b7       	in	r24, 0x38	; 56
    12a8:	81 60       	ori	r24, 0x01	; 1
    12aa:	88 bf       	out	0x38, r24	; 56
    12ac:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <Gu32_T0CurrentOVCount>
    12b0:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    12b4:	40 91 d7 00 	lds	r20, 0x00D7	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    12b8:	50 91 d8 00 	lds	r21, 0x00D8	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    12bc:	60 91 d9 00 	lds	r22, 0x00D9	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    12c0:	70 91 da 00 	lds	r23, 0x00DA	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    12c4:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    12c8:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    12cc:	a1 e0       	ldi	r26, 0x01	; 1
    12ce:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    12d2:	20 93 d5 00 	sts	0x00D5, r18	; 0x8000d5 <Gu32_T0CurrentOVCount>
    12d6:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    12da:	40 93 d7 00 	sts	0x00D7, r20	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    12de:	50 93 d8 00 	sts	0x00D8, r21	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    12e2:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    12e6:	70 93 da 00 	sts	0x00DA, r23	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    12ea:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    12ee:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0c c0       	rjmp	.+24     	; 0x130e <T0_GetStatus+0x16c>
    12f6:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <G_fptr>
    12fa:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <G_fptr+0x1>
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	09 f0       	breq	.+2      	; 0x1304 <T0_GetStatus+0x162>
    1302:	09 95       	icall
    1304:	0e 94 a2 08 	call	0x1144	; 0x1144 <T0_Stop>
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	01 c0       	rjmp	.+2      	; 0x130e <T0_GetStatus+0x16c>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	bf 90       	pop	r11
    1328:	af 90       	pop	r10
    132a:	9f 90       	pop	r9
    132c:	8f 90       	pop	r8
    132e:	7f 90       	pop	r7
    1330:	6f 90       	pop	r6
    1332:	5f 90       	pop	r5
    1334:	4f 90       	pop	r4
    1336:	3f 90       	pop	r3
    1338:	2f 90       	pop	r2
    133a:	08 95       	ret

0000133c <__vector_11>:
    133c:	1f 92       	push	r1
    133e:	0f 92       	push	r0
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	0f 92       	push	r0
    1344:	11 24       	eor	r1, r1
    1346:	2f 92       	push	r2
    1348:	3f 92       	push	r3
    134a:	4f 92       	push	r4
    134c:	5f 92       	push	r5
    134e:	6f 92       	push	r6
    1350:	7f 92       	push	r7
    1352:	8f 92       	push	r8
    1354:	9f 92       	push	r9
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	2f 93       	push	r18
    1368:	3f 93       	push	r19
    136a:	4f 93       	push	r20
    136c:	5f 93       	push	r21
    136e:	6f 93       	push	r22
    1370:	7f 93       	push	r23
    1372:	8f 93       	push	r24
    1374:	9f 93       	push	r25
    1376:	af 93       	push	r26
    1378:	bf 93       	push	r27
    137a:	ef 93       	push	r30
    137c:	ff 93       	push	r31
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	00 d0       	rcall	.+0      	; 0x1384 <__vector_11+0x48>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <__vector_11+0x4a>
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	80 90 d5 00 	lds	r8, 0x00D5	; 0x8000d5 <Gu32_T0CurrentOVCount>
    138e:	90 90 d6 00 	lds	r9, 0x00D6	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    1392:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    1396:	8c 83       	std	Y+4, r24	; 0x04
    1398:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    139c:	8b 83       	std	Y+3, r24	; 0x03
    139e:	b0 91 d9 00 	lds	r27, 0x00D9	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    13a2:	a0 91 da 00 	lds	r26, 0x00DA	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    13a6:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    13aa:	e0 91 dc 00 	lds	r30, 0x00DC	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    13ae:	20 90 dd 00 	lds	r2, 0x00DD	; 0x8000dd <Gu32_T0MaxOVCount>
    13b2:	30 90 de 00 	lds	r3, 0x00DE	; 0x8000de <Gu32_T0MaxOVCount+0x1>
    13b6:	40 90 df 00 	lds	r4, 0x00DF	; 0x8000df <Gu32_T0MaxOVCount+0x2>
    13ba:	50 90 e0 00 	lds	r5, 0x00E0	; 0x8000e0 <Gu32_T0MaxOVCount+0x3>
    13be:	60 90 e1 00 	lds	r6, 0x00E1	; 0x8000e1 <Gu32_T0MaxOVCount+0x4>
    13c2:	70 90 e2 00 	lds	r7, 0x00E2	; 0x8000e2 <Gu32_T0MaxOVCount+0x5>
    13c6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <Gu32_T0MaxOVCount+0x6>
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <Gu32_T0MaxOVCount+0x7>
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	28 2d       	mov	r18, r8
    13d4:	39 2d       	mov	r19, r9
    13d6:	4c 81       	ldd	r20, Y+4	; 0x04
    13d8:	5b 81       	ldd	r21, Y+3	; 0x03
    13da:	6b 2f       	mov	r22, r27
    13dc:	7a 2f       	mov	r23, r26
    13de:	8f 2f       	mov	r24, r31
    13e0:	9e 2f       	mov	r25, r30
    13e2:	a2 2c       	mov	r10, r2
    13e4:	b3 2c       	mov	r11, r3
    13e6:	c4 2c       	mov	r12, r4
    13e8:	d5 2c       	mov	r13, r5
    13ea:	e6 2c       	mov	r14, r6
    13ec:	f7 2c       	mov	r15, r7
    13ee:	09 81       	ldd	r16, Y+1	; 0x01
    13f0:	1a 81       	ldd	r17, Y+2	; 0x02
    13f2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    13f6:	a0 f4       	brcc	.+40     	; 0x1420 <__vector_11+0xe4>
    13f8:	a1 e0       	ldi	r26, 0x01	; 1
    13fa:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    13fe:	20 93 d5 00 	sts	0x00D5, r18	; 0x8000d5 <Gu32_T0CurrentOVCount>
    1402:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    1406:	40 93 d7 00 	sts	0x00D7, r20	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    140a:	50 93 d8 00 	sts	0x00D8, r21	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    140e:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    1412:	70 93 da 00 	sts	0x00DA, r23	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    1416:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    141a:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    141e:	52 c0       	rjmp	.+164    	; 0x14c4 <__vector_11+0x188>
    1420:	28 2d       	mov	r18, r8
    1422:	39 2d       	mov	r19, r9
    1424:	4c 81       	ldd	r20, Y+4	; 0x04
    1426:	5b 81       	ldd	r21, Y+3	; 0x03
    1428:	6b 2f       	mov	r22, r27
    142a:	7a 2f       	mov	r23, r26
    142c:	8f 2f       	mov	r24, r31
    142e:	9e 2f       	mov	r25, r30
    1430:	a2 2c       	mov	r10, r2
    1432:	b3 2c       	mov	r11, r3
    1434:	c4 2c       	mov	r12, r4
    1436:	d5 2c       	mov	r13, r5
    1438:	e6 2c       	mov	r14, r6
    143a:	f7 2c       	mov	r15, r7
    143c:	09 81       	ldd	r16, Y+1	; 0x01
    143e:	1a 81       	ldd	r17, Y+2	; 0x02
    1440:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    1444:	41 f5       	brne	.+80     	; 0x1496 <__vector_11+0x15a>
    1446:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <Gu32_T0LastOVTicks>
    144a:	80 95       	com	r24
    144c:	82 bf       	out	0x32, r24	; 50
    144e:	20 91 d5 00 	lds	r18, 0x00D5	; 0x8000d5 <Gu32_T0CurrentOVCount>
    1452:	30 91 d6 00 	lds	r19, 0x00D6	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    1456:	40 91 d7 00 	lds	r20, 0x00D7	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    145a:	50 91 d8 00 	lds	r21, 0x00D8	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    145e:	60 91 d9 00 	lds	r22, 0x00D9	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    1462:	70 91 da 00 	lds	r23, 0x00DA	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    1466:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    146a:	90 91 dc 00 	lds	r25, 0x00DC	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    146e:	a1 e0       	ldi	r26, 0x01	; 1
    1470:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    1474:	20 93 d5 00 	sts	0x00D5, r18	; 0x8000d5 <Gu32_T0CurrentOVCount>
    1478:	30 93 d6 00 	sts	0x00D6, r19	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    147c:	40 93 d7 00 	sts	0x00D7, r20	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    1480:	50 93 d8 00 	sts	0x00D8, r21	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    1484:	60 93 d9 00 	sts	0x00D9, r22	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    1488:	70 93 da 00 	sts	0x00DA, r23	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    148c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    1490:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    1494:	17 c0       	rjmp	.+46     	; 0x14c4 <__vector_11+0x188>
    1496:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <Gu32_T0CurrentOVCount>
    149a:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <Gu32_T0CurrentOVCount+0x1>
    149e:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Gu32_T0CurrentOVCount+0x2>
    14a2:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <Gu32_T0CurrentOVCount+0x3>
    14a6:	10 92 d9 00 	sts	0x00D9, r1	; 0x8000d9 <Gu32_T0CurrentOVCount+0x4>
    14aa:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <Gu32_T0CurrentOVCount+0x5>
    14ae:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <Gu32_T0CurrentOVCount+0x6>
    14b2:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <Gu32_T0CurrentOVCount+0x7>
    14b6:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <G_fptr>
    14ba:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <G_fptr+0x1>
    14be:	30 97       	sbiw	r30, 0x00	; 0
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <__vector_11+0x188>
    14c2:	09 95       	icall
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	3f 90       	pop	r3
    1506:	2f 90       	pop	r2
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f 90       	pop	r0
    150e:	1f 90       	pop	r1
    1510:	18 95       	reti

00001512 <Timer1_Init>:
    1512:	8d 30       	cpi	r24, 0x0D	; 13
    1514:	20 f0       	brcs	.+8      	; 0x151e <Timer1_Init+0xc>
    1516:	92 ef       	ldi	r25, 0xF2	; 242
    1518:	98 0f       	add	r25, r24
    151a:	92 30       	cpi	r25, 0x02	; 2
    151c:	e0 f4       	brcc	.+56     	; 0x1556 <Timer1_Init+0x44>
    151e:	9f b5       	in	r25, 0x2f	; 47
    1520:	9c 7f       	andi	r25, 0xFC	; 252
    1522:	9f bd       	out	0x2f, r25	; 47
    1524:	9f b5       	in	r25, 0x2f	; 47
    1526:	28 2f       	mov	r18, r24
    1528:	23 70       	andi	r18, 0x03	; 3
    152a:	92 2b       	or	r25, r18
    152c:	9f bd       	out	0x2f, r25	; 47
    152e:	9e b5       	in	r25, 0x2e	; 46
    1530:	97 7e       	andi	r25, 0xE7	; 231
    1532:	9e bd       	out	0x2e, r25	; 46
    1534:	2e b5       	in	r18, 0x2e	; 46
    1536:	98 2f       	mov	r25, r24
    1538:	9c 70       	andi	r25, 0x0C	; 12
    153a:	89 2f       	mov	r24, r25
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	82 2b       	or	r24, r18
    1544:	8e bd       	out	0x2e, r24	; 46
    1546:	8e b5       	in	r24, 0x2e	; 46
    1548:	88 7f       	andi	r24, 0xF8	; 248
    154a:	8e bd       	out	0x2e, r24	; 46
    154c:	8e b5       	in	r24, 0x2e	; 46
    154e:	68 2b       	or	r22, r24
    1550:	6e bd       	out	0x2e, r22	; 46
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	08 95       	ret
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	08 95       	ret

0000155a <Timer1_OVF_InterruptEnable>:
    155a:	89 b7       	in	r24, 0x39	; 57
    155c:	84 60       	ori	r24, 0x04	; 4
    155e:	89 bf       	out	0x39, r24	; 57
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	08 95       	ret

00001564 <Timer1_GetOVFCount>:
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	79 f0       	breq	.+30     	; 0x1586 <Timer1_GetOVFCount+0x22>
    1568:	40 91 cc 00 	lds	r20, 0x00CC	; 0x8000cc <Timer1_OVF_Counter>
    156c:	50 91 cd 00 	lds	r21, 0x00CD	; 0x8000cd <Timer1_OVF_Counter+0x1>
    1570:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <Timer1_OVF_Counter+0x2>
    1574:	70 91 cf 00 	lds	r23, 0x00CF	; 0x8000cf <Timer1_OVF_Counter+0x3>
    1578:	fc 01       	movw	r30, r24
    157a:	40 83       	st	Z, r20
    157c:	51 83       	std	Z+1, r21	; 0x01
    157e:	62 83       	std	Z+2, r22	; 0x02
    1580:	73 83       	std	Z+3, r23	; 0x03
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	08 95       	ret
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	08 95       	ret

0000158a <Timer1_ResetOVFCount>:
    158a:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <Timer1_OVF_Counter>
    158e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <Timer1_OVF_Counter+0x1>
    1592:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <Timer1_OVF_Counter+0x2>
    1596:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <Timer1_OVF_Counter+0x3>
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	08 95       	ret

0000159e <__vector_9>:
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	2f 93       	push	r18
    15aa:	3f 93       	push	r19
    15ac:	4f 93       	push	r20
    15ae:	5f 93       	push	r21
    15b0:	6f 93       	push	r22
    15b2:	7f 93       	push	r23
    15b4:	8f 93       	push	r24
    15b6:	9f 93       	push	r25
    15b8:	af 93       	push	r26
    15ba:	bf 93       	push	r27
    15bc:	ef 93       	push	r30
    15be:	ff 93       	push	r31
    15c0:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <Timer1_OVF_Counter>
    15c4:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <Timer1_OVF_Counter+0x1>
    15c8:	a0 91 ce 00 	lds	r26, 0x00CE	; 0x8000ce <Timer1_OVF_Counter+0x2>
    15cc:	b0 91 cf 00 	lds	r27, 0x00CF	; 0x8000cf <Timer1_OVF_Counter+0x3>
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	a1 1d       	adc	r26, r1
    15d4:	b1 1d       	adc	r27, r1
    15d6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <Timer1_OVF_Counter>
    15da:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <Timer1_OVF_Counter+0x1>
    15de:	a0 93 ce 00 	sts	0x00CE, r26	; 0x8000ce <Timer1_OVF_Counter+0x2>
    15e2:	b0 93 cf 00 	sts	0x00CF, r27	; 0x8000cf <Timer1_OVF_Counter+0x3>
    15e6:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <Timer1_OVF_Callback>
    15ea:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <Timer1_OVF_Callback+0x1>
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <__vector_9+0x56>
    15f2:	09 95       	icall
    15f4:	ff 91       	pop	r31
    15f6:	ef 91       	pop	r30
    15f8:	bf 91       	pop	r27
    15fa:	af 91       	pop	r26
    15fc:	9f 91       	pop	r25
    15fe:	8f 91       	pop	r24
    1600:	7f 91       	pop	r23
    1602:	6f 91       	pop	r22
    1604:	5f 91       	pop	r21
    1606:	4f 91       	pop	r20
    1608:	3f 91       	pop	r19
    160a:	2f 91       	pop	r18
    160c:	0f 90       	pop	r0
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	0f 90       	pop	r0
    1612:	1f 90       	pop	r1
    1614:	18 95       	reti

00001616 <T2_Init>:
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	69 f0       	breq	.+26     	; 0x1634 <T2_Init+0x1e>
    161a:	28 f0       	brcs	.+10     	; 0x1626 <T2_Init+0x10>
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	89 f0       	breq	.+34     	; 0x1642 <T2_Init+0x2c>
    1620:	83 30       	cpi	r24, 0x03	; 3
    1622:	b1 f0       	breq	.+44     	; 0x1650 <T2_Init+0x3a>
    1624:	5d c0       	rjmp	.+186    	; 0x16e0 <T2_Init+0xca>
    1626:	85 b5       	in	r24, 0x25	; 37
    1628:	8f 7b       	andi	r24, 0xBF	; 191
    162a:	85 bd       	out	0x25, r24	; 37
    162c:	85 b5       	in	r24, 0x25	; 37
    162e:	87 7f       	andi	r24, 0xF7	; 247
    1630:	85 bd       	out	0x25, r24	; 37
    1632:	14 c0       	rjmp	.+40     	; 0x165c <T2_Init+0x46>
    1634:	85 b5       	in	r24, 0x25	; 37
    1636:	80 64       	ori	r24, 0x40	; 64
    1638:	85 bd       	out	0x25, r24	; 37
    163a:	85 b5       	in	r24, 0x25	; 37
    163c:	87 7f       	andi	r24, 0xF7	; 247
    163e:	85 bd       	out	0x25, r24	; 37
    1640:	0d c0       	rjmp	.+26     	; 0x165c <T2_Init+0x46>
    1642:	85 b5       	in	r24, 0x25	; 37
    1644:	8f 7b       	andi	r24, 0xBF	; 191
    1646:	85 bd       	out	0x25, r24	; 37
    1648:	85 b5       	in	r24, 0x25	; 37
    164a:	88 60       	ori	r24, 0x08	; 8
    164c:	85 bd       	out	0x25, r24	; 37
    164e:	06 c0       	rjmp	.+12     	; 0x165c <T2_Init+0x46>
    1650:	85 b5       	in	r24, 0x25	; 37
    1652:	80 64       	ori	r24, 0x40	; 64
    1654:	85 bd       	out	0x25, r24	; 37
    1656:	85 b5       	in	r24, 0x25	; 37
    1658:	88 60       	ori	r24, 0x08	; 8
    165a:	85 bd       	out	0x25, r24	; 37
    165c:	85 b5       	in	r24, 0x25	; 37
    165e:	88 7f       	andi	r24, 0xF8	; 248
    1660:	85 bd       	out	0x25, r24	; 37
    1662:	85 b5       	in	r24, 0x25	; 37
    1664:	86 2b       	or	r24, r22
    1666:	85 bd       	out	0x25, r24	; 37
    1668:	62 30       	cpi	r22, 0x02	; 2
    166a:	d1 f0       	breq	.+52     	; 0x16a0 <T2_Init+0x8a>
    166c:	28 f4       	brcc	.+10     	; 0x1678 <T2_Init+0x62>
    166e:	66 23       	and	r22, r22
    1670:	51 f0       	breq	.+20     	; 0x1686 <T2_Init+0x70>
    1672:	61 30       	cpi	r22, 0x01	; 1
    1674:	71 f0       	breq	.+28     	; 0x1692 <T2_Init+0x7c>
    1676:	36 c0       	rjmp	.+108    	; 0x16e4 <T2_Init+0xce>
    1678:	66 30       	cpi	r22, 0x06	; 6
    167a:	11 f1       	breq	.+68     	; 0x16c0 <T2_Init+0xaa>
    167c:	67 30       	cpi	r22, 0x07	; 7
    167e:	41 f1       	breq	.+80     	; 0x16d0 <T2_Init+0xba>
    1680:	64 30       	cpi	r22, 0x04	; 4
    1682:	81 f5       	brne	.+96     	; 0x16e4 <T2_Init+0xce>
    1684:	15 c0       	rjmp	.+42     	; 0x16b0 <T2_Init+0x9a>
    1686:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <Gu16_T2Prescaler+0x1>
    168a:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <Gu16_T2Prescaler>
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	08 95       	ret
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <Gu16_T2Prescaler+0x1>
    169a:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Gu16_T2Prescaler>
    169e:	08 95       	ret
    16a0:	88 e0       	ldi	r24, 0x08	; 8
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <Gu16_T2Prescaler+0x1>
    16a8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Gu16_T2Prescaler>
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	08 95       	ret
    16b0:	80 e4       	ldi	r24, 0x40	; 64
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <Gu16_T2Prescaler+0x1>
    16b8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Gu16_T2Prescaler>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	08 95       	ret
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <Gu16_T2Prescaler+0x1>
    16c8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Gu16_T2Prescaler>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	08 95       	ret
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	94 e0       	ldi	r25, 0x04	; 4
    16d4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <Gu16_T2Prescaler+0x1>
    16d8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <Gu16_T2Prescaler>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	08 95       	ret
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	08 95       	ret
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	08 95       	ret

000016e8 <T2_OV_InterruptEnable>:
    16e8:	89 b7       	in	r24, 0x39	; 57
    16ea:	80 64       	ori	r24, 0x40	; 64
    16ec:	89 bf       	out	0x39, r24	; 57
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	08 95       	ret

000016f2 <T2_OV_InterruptDisable>:
    16f2:	89 b7       	in	r24, 0x39	; 57
    16f4:	8f 7b       	andi	r24, 0xBF	; 191
    16f6:	89 bf       	out	0x39, r24	; 57
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	08 95       	ret

000016fc <T2_OC_InterruptDisable>:
* Description: A function to disable output compare interrupt
************************************************************************************/
enuErrorStatus_t T2_OC_InterruptDisable(void)
{
   //clear the TOIE bit to disable output compare interrupt
   CLEAR_BIT(TIMSK_R,OCIE2_B);
    16fc:	89 b7       	in	r24, 0x39	; 57
    16fe:	8f 77       	andi	r24, 0x7F	; 127
    1700:	89 bf       	out	0x39, r24	; 57
   return E_OK;
}
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	08 95       	ret

00001706 <T2_Start>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=E_OK or 0=FAIL
* Description: A function to start the timer and set a callback function to be called when time runs up
************************************************************************************/
enuErrorStatus_t T2_Start(uint64_t u64TimerValue, void(*pfCallback)(void))
{
    1706:	2f 92       	push	r2
    1708:	3f 92       	push	r3
    170a:	4f 92       	push	r4
    170c:	5f 92       	push	r5
    170e:	6f 92       	push	r6
    1710:	7f 92       	push	r7
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	2f 97       	sbiw	r28, 0x0f	; 15
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	a2 2e       	mov	r10, r18
    173c:	b3 2e       	mov	r11, r19
    173e:	c4 2e       	mov	r12, r20
    1740:	d5 2e       	mov	r13, r21
    1742:	e6 2e       	mov	r14, r22
    1744:	f7 2e       	mov	r15, r23
    1746:	e8 2f       	mov	r30, r24
    1748:	f9 2f       	mov	r31, r25
   enuTimer2Scaler_t enuScaler=TIMER2_STOP;

   //check if the timer interrupts are enabled
   if (GET_BIT(TIMSK_R,TOIE2_B) || GET_BIT(TIMSK_R,OCIE2_B))
    174a:	09 b6       	in	r0, 0x39	; 57
    174c:	06 fc       	sbrc	r0, 6
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <T2_Start+0x50>
    1750:	09 b6       	in	r0, 0x39	; 57
    1752:	07 fe       	sbrs	r0, 7
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <T2_Start+0x60>
   {
      //check if the user has not sent a pointer to function to execute
      if (pfCallback == NULLPTR)
    1756:	01 15       	cp	r16, r1
    1758:	11 05       	cpc	r17, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <T2_Start+0x58>
    175c:	d4 c0       	rjmp	.+424    	; 0x1906 <T2_Start+0x200>
         return E_ERROR;
      }
      else
      {
         //else store this pointer to function in the global pointer to function for the ISR to be able to execute
         G_fptr2=pfCallback;
    175e:	10 93 cb 00 	sts	0x00CB, r17	; 0x8000cb <G_fptr2+0x1>
    1762:	00 93 ca 00 	sts	0x00CA, r16	; 0x8000ca <G_fptr2>
      }
   }

    //if the user sent a 0 time delay
    if (u64TimerValue==0)
    1766:	2a 2d       	mov	r18, r10
    1768:	3b 2d       	mov	r19, r11
    176a:	4c 2d       	mov	r20, r12
    176c:	5d 2d       	mov	r21, r13
    176e:	6e 2d       	mov	r22, r14
    1770:	7f 2d       	mov	r23, r15
    1772:	8e 2f       	mov	r24, r30
    1774:	9f 2f       	mov	r25, r31
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	0e 94 85 10 	call	0x210a	; 0x210a <__cmpdi2_s8>
    177c:	09 f4       	brne	.+2      	; 0x1780 <T2_Start+0x7a>
    177e:	c5 c0       	rjmp	.+394    	; 0x190a <T2_Start+0x204>
       //return an error
       return E_ERROR;
    }

    //else select the appropriate timer prescaler depending on the time sent for the least number of overflows
    else if (u64TimerValue<=256)
    1780:	21 15       	cp	r18, r1
    1782:	a1 e0       	ldi	r26, 0x01	; 1
    1784:	3a 07       	cpc	r19, r26
    1786:	41 05       	cpc	r20, r1
    1788:	51 05       	cpc	r21, r1
    178a:	61 05       	cpc	r22, r1
    178c:	71 05       	cpc	r23, r1
    178e:	81 05       	cpc	r24, r1
    1790:	91 05       	cpc	r25, r1
    1792:	79 f1       	breq	.+94     	; 0x17f2 <T2_Start+0xec>
    1794:	70 f1       	brcs	.+92     	; 0x17f2 <T2_Start+0xec>
    {
       enuScaler=TIMER2_SCALER_8;
    }
    else if (u64TimerValue>256 && u64TimerValue<=2048)
    1796:	21 50       	subi	r18, 0x01	; 1
    1798:	31 40       	sbci	r19, 0x01	; 1
    179a:	41 09       	sbc	r20, r1
    179c:	51 09       	sbc	r21, r1
    179e:	61 09       	sbc	r22, r1
    17a0:	71 09       	sbc	r23, r1
    17a2:	81 09       	sbc	r24, r1
    17a4:	91 09       	sbc	r25, r1
    17a6:	2f 3f       	cpi	r18, 0xFF	; 255
    17a8:	36 40       	sbci	r19, 0x06	; 6
    17aa:	41 05       	cpc	r20, r1
    17ac:	51 05       	cpc	r21, r1
    17ae:	61 05       	cpc	r22, r1
    17b0:	71 05       	cpc	r23, r1
    17b2:	81 05       	cpc	r24, r1
    17b4:	91 05       	cpc	r25, r1
    17b6:	f9 f0       	breq	.+62     	; 0x17f6 <T2_Start+0xf0>
    17b8:	f0 f0       	brcs	.+60     	; 0x17f6 <T2_Start+0xf0>
    {
       enuScaler=TIMER2_SCALER_64;
    }
    else if (u64TimerValue>2048 && u64TimerValue<=8192)
    17ba:	2a 2d       	mov	r18, r10
    17bc:	3b 2d       	mov	r19, r11
    17be:	4c 2d       	mov	r20, r12
    17c0:	5d 2d       	mov	r21, r13
    17c2:	6e 2d       	mov	r22, r14
    17c4:	7f 2d       	mov	r23, r15
    17c6:	8e 2f       	mov	r24, r30
    17c8:	9f 2f       	mov	r25, r31
    17ca:	21 50       	subi	r18, 0x01	; 1
    17cc:	38 40       	sbci	r19, 0x08	; 8
    17ce:	41 09       	sbc	r20, r1
    17d0:	51 09       	sbc	r21, r1
    17d2:	61 09       	sbc	r22, r1
    17d4:	71 09       	sbc	r23, r1
    17d6:	81 09       	sbc	r24, r1
    17d8:	91 09       	sbc	r25, r1
    17da:	2f 3f       	cpi	r18, 0xFF	; 255
    17dc:	37 41       	sbci	r19, 0x17	; 23
    17de:	41 05       	cpc	r20, r1
    17e0:	51 05       	cpc	r21, r1
    17e2:	61 05       	cpc	r22, r1
    17e4:	71 05       	cpc	r23, r1
    17e6:	81 05       	cpc	r24, r1
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f0       	breq	.+2      	; 0x17ee <T2_Start+0xe8>
    17ec:	30 f4       	brcc	.+12     	; 0x17fa <T2_Start+0xf4>
    {
       enuScaler=TIMER2_SCALER_256;
    17ee:	66 e0       	ldi	r22, 0x06	; 6
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <T2_Start+0xf6>
    }

    //else select the appropriate timer prescaler depending on the time sent for the least number of overflows
    else if (u64TimerValue<=256)
    {
       enuScaler=TIMER2_SCALER_8;
    17f2:	62 e0       	ldi	r22, 0x02	; 2
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <T2_Start+0xf6>
    }
    else if (u64TimerValue>256 && u64TimerValue<=2048)
    {
       enuScaler=TIMER2_SCALER_64;
    17f6:	64 e0       	ldi	r22, 0x04	; 4
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <T2_Start+0xf6>
    {
       enuScaler=TIMER2_SCALER_256;
    }
    else
    {
       enuScaler=TIMER2_SCALER_1024;
    17fa:	67 e0       	ldi	r22, 0x07	; 7
    17fc:	1f 2f       	mov	r17, r31
    17fe:	0e 2f       	mov	r16, r30
    }

   //initialize the timer in normal mode with the new prescaler
   T2_Init(TIMER2_NORMAL_MODE,enuScaler);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	0e 94 0b 0b 	call	0x1616	; 0x1616 <T2_Init>



   //calculate tick time of the selected prescaler
   uint32_t u32TimerFreq=F_CPU/Gu16_T2Prescaler;
    1806:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <Gu16_T2Prescaler>
    180a:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <Gu16_T2Prescaler+0x1>
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	72 e1       	ldi	r23, 0x12	; 18
    1816:	8a e7       	ldi	r24, 0x7A	; 122
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__udivmodsi4>

   //calculate the number of overflows required to reach the selected time
   Gu32_T2MaxOVCount=((u64TimerValue*u32TimerFreq)/(T2_TICKS*USEC_TO_SEC));
    181e:	19 01       	movw	r2, r18
    1820:	2a 01       	movw	r4, r20
    1822:	61 2c       	mov	r6, r1
    1824:	71 2c       	mov	r7, r1
    1826:	43 01       	movw	r8, r6
    1828:	2f 83       	std	Y+7, r18	; 0x07
    182a:	38 86       	std	Y+8, r3	; 0x08
    182c:	49 86       	std	Y+9, r4	; 0x09
    182e:	5a 86       	std	Y+10, r5	; 0x0a
    1830:	6b 86       	std	Y+11, r6	; 0x0b
    1832:	7c 86       	std	Y+12, r7	; 0x0c
    1834:	8d 86       	std	Y+13, r8	; 0x0d
    1836:	9e 86       	std	Y+14, r9	; 0x0e
    1838:	33 2d       	mov	r19, r3
    183a:	44 2d       	mov	r20, r4
    183c:	55 2d       	mov	r21, r5
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__muldi3>
    184a:	22 2e       	mov	r2, r18
    184c:	33 2e       	mov	r3, r19
    184e:	49 83       	std	Y+1, r20	; 0x01
    1850:	5a 83       	std	Y+2, r21	; 0x02
    1852:	6b 83       	std	Y+3, r22	; 0x03
    1854:	7c 83       	std	Y+4, r23	; 0x04
    1856:	8d 83       	std	Y+5, r24	; 0x05
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	a1 2c       	mov	r10, r1
    185c:	68 94       	set
    185e:	bb 24       	eor	r11, r11
    1860:	b6 f8       	bld	r11, 6
    1862:	0f 2e       	mov	r0, r31
    1864:	f2 e4       	ldi	r31, 0x42	; 66
    1866:	cf 2e       	mov	r12, r31
    1868:	f0 2d       	mov	r31, r0
    186a:	0f 2e       	mov	r0, r31
    186c:	ff e0       	ldi	r31, 0x0F	; 15
    186e:	df 2e       	mov	r13, r31
    1870:	f0 2d       	mov	r31, r0
    1872:	e1 2c       	mov	r14, r1
    1874:	f1 2c       	mov	r15, r1
    1876:	00 e0       	ldi	r16, 0x00	; 0
    1878:	10 e0       	ldi	r17, 0x00	; 0
    187a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__udivdi3>
    187e:	2f 87       	std	Y+15, r18	; 0x0f
    1880:	3f 83       	std	Y+7, r19	; 0x07
    1882:	44 2e       	mov	r4, r20
    1884:	55 2e       	mov	r5, r21
    1886:	66 2e       	mov	r6, r22
    1888:	77 2e       	mov	r7, r23
    188a:	88 2e       	mov	r8, r24
    188c:	99 2e       	mov	r9, r25
    188e:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <Gu32_T2MaxOVCount>
    1892:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <Gu32_T2MaxOVCount+0x1>
    1896:	40 92 c4 00 	sts	0x00C4, r4	; 0x8000c4 <Gu32_T2MaxOVCount+0x2>
    189a:	50 92 c5 00 	sts	0x00C5, r5	; 0x8000c5 <Gu32_T2MaxOVCount+0x3>
    189e:	60 92 c6 00 	sts	0x00C6, r6	; 0x8000c6 <Gu32_T2MaxOVCount+0x4>
    18a2:	70 92 c7 00 	sts	0x00C7, r7	; 0x8000c7 <Gu32_T2MaxOVCount+0x5>
    18a6:	80 92 c8 00 	sts	0x00C8, r8	; 0x8000c8 <Gu32_T2MaxOVCount+0x6>
    18aa:	90 92 c9 00 	sts	0x00C9, r9	; 0x8000c9 <Gu32_T2MaxOVCount+0x7>

   //calculate the time required to setup  the last overflow iteration
   Gu32_T2LastOVTicks=((u64TimerValue*u32TimerFreq)/USEC_TO_SEC)-(Gu32_T2MaxOVCount*T2_TICKS);
    18ae:	68 94       	set
    18b0:	aa 24       	eor	r10, r10
    18b2:	a6 f8       	bld	r10, 6
    18b4:	0f 2e       	mov	r0, r31
    18b6:	f2 e4       	ldi	r31, 0x42	; 66
    18b8:	bf 2e       	mov	r11, r31
    18ba:	f0 2d       	mov	r31, r0
    18bc:	0f 2e       	mov	r0, r31
    18be:	ff e0       	ldi	r31, 0x0F	; 15
    18c0:	cf 2e       	mov	r12, r31
    18c2:	f0 2d       	mov	r31, r0
    18c4:	d1 2c       	mov	r13, r1
    18c6:	22 2d       	mov	r18, r2
    18c8:	33 2d       	mov	r19, r3
    18ca:	49 81       	ldd	r20, Y+1	; 0x01
    18cc:	5a 81       	ldd	r21, Y+2	; 0x02
    18ce:	6b 81       	ldd	r22, Y+3	; 0x03
    18d0:	7c 81       	ldd	r23, Y+4	; 0x04
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <__udivdi3>
    18da:	e2 2f       	mov	r30, r18
    18dc:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <Gu32_T2LastOVTicks>


   //if the time can be achieved without overflows
   if (Gu32_T2MaxOVCount==0)
    18e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    18e2:	3f 81       	ldd	r19, Y+7	; 0x07
    18e4:	44 2d       	mov	r20, r4
    18e6:	55 2d       	mov	r21, r5
    18e8:	66 2d       	mov	r22, r6
    18ea:	77 2d       	mov	r23, r7
    18ec:	88 2d       	mov	r24, r8
    18ee:	99 2d       	mov	r25, r9
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	0e 94 85 10 	call	0x210a	; 0x210a <__cmpdi2_s8>
    18f6:	21 f4       	brne	.+8      	; 0x1900 <T2_Start+0x1fa>
   {
      //set the timer value to overflow on the exact timing
      TCNT2_R= (T2_TICKS-Gu32_T2LastOVTicks);
    18f8:	e1 95       	neg	r30
    18fa:	e4 bd       	out	0x24, r30	; 36
      //else, set the overflow to 0
      TCNT2_R=0;
   }

   //return E_OK state
   return E_OK;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	06 c0       	rjmp	.+12     	; 0x190c <T2_Start+0x206>
      TCNT2_R= (T2_TICKS-Gu32_T2LastOVTicks);
   }
   else
   {
      //else, set the overflow to 0
      TCNT2_R=0;
    1900:	14 bc       	out	0x24, r1	; 36
   }

   //return E_OK state
   return E_OK;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	03 c0       	rjmp	.+6      	; 0x190c <T2_Start+0x206>
   {
      //check if the user has not sent a pointer to function to execute
      if (pfCallback == NULLPTR)
      {
         //return error
         return E_ERROR;
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	01 c0       	rjmp	.+2      	; 0x190c <T2_Start+0x206>

    //if the user sent a 0 time delay
    if (u64TimerValue==0)
    {
       //return an error
       return E_ERROR;
    190a:	80 e0       	ldi	r24, 0x00	; 0
      TCNT2_R=0;
   }

   //return E_OK state
   return E_OK;
}
    190c:	2f 96       	adiw	r28, 0x0f	; 15
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	df 90       	pop	r13
    1926:	cf 90       	pop	r12
    1928:	bf 90       	pop	r11
    192a:	af 90       	pop	r10
    192c:	9f 90       	pop	r9
    192e:	8f 90       	pop	r8
    1930:	7f 90       	pop	r7
    1932:	6f 90       	pop	r6
    1934:	5f 90       	pop	r5
    1936:	4f 90       	pop	r4
    1938:	3f 90       	pop	r3
    193a:	2f 90       	pop	r2
    193c:	08 95       	ret

0000193e <T2_Stop>:
* Description: A function to stop the timer if running
************************************************************************************/
enuErrorStatus_t T2_Stop(void)
{
   //turn off all timer interrupts
   T2_OV_InterruptDisable();
    193e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <T2_OV_InterruptDisable>
   T2_OC_InterruptDisable();
    1942:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <T2_OC_InterruptDisable>
   //initialize the timer with no clock to stop it
   T2_Init(TIMER2_NORMAL_MODE,TIMER2_STOP);
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <T2_Init>
   //clear the timer overflow flag
   SET_BIT(TIFR_R,TOV2_B);
    194e:	88 b7       	in	r24, 0x38	; 56
    1950:	80 64       	ori	r24, 0x40	; 64
    1952:	88 bf       	out	0x38, r24	; 56

   //reset all global variables
   Gu32_T2MaxOVCount=0;
    1954:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <Gu32_T2MaxOVCount>
    1958:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <Gu32_T2MaxOVCount+0x1>
    195c:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <Gu32_T2MaxOVCount+0x2>
    1960:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <Gu32_T2MaxOVCount+0x3>
    1964:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <Gu32_T2MaxOVCount+0x4>
    1968:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <Gu32_T2MaxOVCount+0x5>
    196c:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <Gu32_T2MaxOVCount+0x6>
    1970:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <Gu32_T2MaxOVCount+0x7>
   Gu32_T2LastOVTicks=0;
    1974:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <Gu32_T2LastOVTicks>
   Gu32_T2CurrentOVCount=0;
    1978:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Gu32_T2CurrentOVCount>
    197c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1980:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1984:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1988:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    198c:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1990:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1994:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>

   //return E_OK state
   return E_OK;
}
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	08 95       	ret

0000199c <T2_GetStatus>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=time's up or 0=timer is still running
* Description: A function to check if a previously set up timer is still running or not
************************************************************************************/
enuErrorStatus_t T2_GetStatus(void)
{
    199c:	2f 92       	push	r2
    199e:	3f 92       	push	r3
    19a0:	4f 92       	push	r4
    19a2:	5f 92       	push	r5
    19a4:	6f 92       	push	r6
    19a6:	7f 92       	push	r7
    19a8:	8f 92       	push	r8
    19aa:	9f 92       	push	r9
    19ac:	af 92       	push	r10
    19ae:	bf 92       	push	r11
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <T2_GetStatus+0x26>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <T2_GetStatus+0x28>
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
      //if the current overflow value is less than the total overflows value
      if (Gu32_T2CurrentOVCount < Gu32_T2MaxOVCount)
    19c8:	20 90 ba 00 	lds	r2, 0x00BA	; 0x8000ba <Gu32_T2CurrentOVCount>
    19cc:	30 90 bb 00 	lds	r3, 0x00BB	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    19d0:	40 90 bc 00 	lds	r4, 0x00BC	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    19d4:	50 90 bd 00 	lds	r5, 0x00BD	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    19d8:	60 90 be 00 	lds	r6, 0x00BE	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    19dc:	70 90 bf 00 	lds	r7, 0x00BF	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    19e0:	80 90 c0 00 	lds	r8, 0x00C0	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    19e4:	90 90 c1 00 	lds	r9, 0x00C1	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
    19e8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <Gu32_T2MaxOVCount>
    19ec:	8c 83       	std	Y+4, r24	; 0x04
    19ee:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <Gu32_T2MaxOVCount+0x1>
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	b0 91 c4 00 	lds	r27, 0x00C4	; 0x8000c4 <Gu32_T2MaxOVCount+0x2>
    19f8:	a0 91 c5 00 	lds	r26, 0x00C5	; 0x8000c5 <Gu32_T2MaxOVCount+0x3>
    19fc:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <Gu32_T2MaxOVCount+0x4>
    1a00:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <Gu32_T2MaxOVCount+0x5>
    1a04:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Gu32_T2MaxOVCount+0x6>
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Gu32_T2MaxOVCount+0x7>
    1a0e:	8a 83       	std	Y+2, r24	; 0x02
    1a10:	22 2d       	mov	r18, r2
    1a12:	33 2d       	mov	r19, r3
    1a14:	44 2d       	mov	r20, r4
    1a16:	55 2d       	mov	r21, r5
    1a18:	66 2d       	mov	r22, r6
    1a1a:	77 2d       	mov	r23, r7
    1a1c:	88 2d       	mov	r24, r8
    1a1e:	99 2d       	mov	r25, r9
    1a20:	ac 80       	ldd	r10, Y+4	; 0x04
    1a22:	bb 80       	ldd	r11, Y+3	; 0x03
    1a24:	cb 2e       	mov	r12, r27
    1a26:	da 2e       	mov	r13, r26
    1a28:	ef 2e       	mov	r14, r31
    1a2a:	fe 2e       	mov	r15, r30
    1a2c:	09 81       	ldd	r16, Y+1	; 0x01
    1a2e:	1a 81       	ldd	r17, Y+2	; 0x02
    1a30:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    1a34:	f0 f4       	brcc	.+60     	; 0x1a72 <T2_GetStatus+0xd6>
      {
         //check the over flow flag
         if (GET_BIT(TIFR_R,TOV2_B))
    1a36:	08 b6       	in	r0, 0x38	; 56
    1a38:	06 fe       	sbrs	r0, 6
    1a3a:	65 c0       	rjmp	.+202    	; 0x1b06 <T2_GetStatus+0x16a>
         {
            //if set, clear it
            SET_BIT(TIFR_R,TOV2_B);
    1a3c:	88 b7       	in	r24, 0x38	; 56
    1a3e:	80 64       	ori	r24, 0x40	; 64
    1a40:	88 bf       	out	0x38, r24	; 56
            //and increase the overflow counter
            Gu32_T2CurrentOVCount++;
    1a42:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <Gu32_T2CurrentOVCount>
    1a46:	88 2d       	mov	r24, r8
    1a48:	a1 e0       	ldi	r26, 0x01	; 1
    1a4a:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    1a4e:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <Gu32_T2CurrentOVCount>
    1a52:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1a56:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1a5a:	50 93 bd 00 	sts	0x00BD, r21	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1a5e:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1a62:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1a66:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1a6a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
         //return a E_OK state
         return E_OK;

      }
      // if all failed, return an error state
   return E_ERROR;
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	4b c0       	rjmp	.+150    	; 0x1b08 <T2_GetStatus+0x16c>
            //and increase the overflow counter
            Gu32_T2CurrentOVCount++;
         }
      }
      //if the current overflow value equals the calculated total overflows value
      else if (Gu32_T2CurrentOVCount == Gu32_T2MaxOVCount)
    1a72:	22 2d       	mov	r18, r2
    1a74:	33 2d       	mov	r19, r3
    1a76:	44 2d       	mov	r20, r4
    1a78:	55 2d       	mov	r21, r5
    1a7a:	66 2d       	mov	r22, r6
    1a7c:	77 2d       	mov	r23, r7
    1a7e:	88 2d       	mov	r24, r8
    1a80:	99 2d       	mov	r25, r9
    1a82:	ac 80       	ldd	r10, Y+4	; 0x04
    1a84:	bb 80       	ldd	r11, Y+3	; 0x03
    1a86:	cb 2e       	mov	r12, r27
    1a88:	da 2e       	mov	r13, r26
    1a8a:	ef 2e       	mov	r14, r31
    1a8c:	fe 2e       	mov	r15, r30
    1a8e:	09 81       	ldd	r16, Y+1	; 0x01
    1a90:	1a 81       	ldd	r17, Y+2	; 0x02
    1a92:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    1a96:	61 f5       	brne	.+88     	; 0x1af0 <T2_GetStatus+0x154>
      {
         //set the timer value to the remaining timing
         TCNT2_R=((T2_TICKS-1)-Gu32_T2LastOVTicks);
    1a98:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <Gu32_T2LastOVTicks>
    1a9c:	80 95       	com	r24
    1a9e:	84 bd       	out	0x24, r24	; 36
         //clear the overflow flag
         SET_BIT(TIFR_R,TOV2_B);
    1aa0:	88 b7       	in	r24, 0x38	; 56
    1aa2:	80 64       	ori	r24, 0x40	; 64
    1aa4:	88 bf       	out	0x38, r24	; 56
         //increase the overflow counter
         Gu32_T2CurrentOVCount++;
    1aa6:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <Gu32_T2CurrentOVCount>
    1aaa:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1aae:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1ab2:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1ab6:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1aba:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1abe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1ac2:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
    1ac6:	a1 e0       	ldi	r26, 0x01	; 1
    1ac8:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    1acc:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <Gu32_T2CurrentOVCount>
    1ad0:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1ad4:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1ad8:	50 93 bd 00 	sts	0x00BD, r21	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1adc:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1ae0:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1ae4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1ae8:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
         //return a E_OK state
         return E_OK;

      }
      // if all failed, return an error state
   return E_ERROR;
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	0c c0       	rjmp	.+24     	; 0x1b08 <T2_GetStatus+0x16c>

      //if the time is up
      else
      {
         //check if the global pointer to function holds a valid function address
         if (G_fptr2 != NULLPTR)
    1af0:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <G_fptr2>
    1af4:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <G_fptr2+0x1>
    1af8:	30 97       	sbiw	r30, 0x00	; 0
    1afa:	09 f0       	breq	.+2      	; 0x1afe <T2_GetStatus+0x162>
         {
            //if so, call the function
            G_fptr2();
    1afc:	09 95       	icall
         }
         //stop the timer
         T2_Stop();
    1afe:	0e 94 9f 0c 	call	0x193e	; 0x193e <T2_Stop>
         //return a E_OK state
         return E_OK;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <T2_GetStatus+0x16c>

      }
      // if all failed, return an error state
   return E_ERROR;
    1b06:	80 e0       	ldi	r24, 0x00	; 0
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	df 90       	pop	r13
    1b1e:	cf 90       	pop	r12
    1b20:	bf 90       	pop	r11
    1b22:	af 90       	pop	r10
    1b24:	9f 90       	pop	r9
    1b26:	8f 90       	pop	r8
    1b28:	7f 90       	pop	r7
    1b2a:	6f 90       	pop	r6
    1b2c:	5f 90       	pop	r5
    1b2e:	4f 90       	pop	r4
    1b30:	3f 90       	pop	r3
    1b32:	2f 90       	pop	r2
    1b34:	08 95       	ret

00001b36 <__vector_5>:

/******************** ISR FUNCTIONS ****************************************/

//ISR function to run in case  of a timer overflow interrupt
ISR(TIMER2_OVF_vect)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	2f 92       	push	r2
    1b42:	3f 92       	push	r3
    1b44:	4f 92       	push	r4
    1b46:	5f 92       	push	r5
    1b48:	6f 92       	push	r6
    1b4a:	7f 92       	push	r7
    1b4c:	8f 92       	push	r8
    1b4e:	9f 92       	push	r9
    1b50:	af 92       	push	r10
    1b52:	bf 92       	push	r11
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	2f 93       	push	r18
    1b62:	3f 93       	push	r19
    1b64:	4f 93       	push	r20
    1b66:	5f 93       	push	r21
    1b68:	6f 93       	push	r22
    1b6a:	7f 93       	push	r23
    1b6c:	8f 93       	push	r24
    1b6e:	9f 93       	push	r25
    1b70:	af 93       	push	r26
    1b72:	bf 93       	push	r27
    1b74:	ef 93       	push	r30
    1b76:	ff 93       	push	r31
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <__vector_5+0x48>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <__vector_5+0x4a>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
   //if the current overflow value is less than the total overflows value
   if (Gu32_T2CurrentOVCount < Gu32_T2MaxOVCount)
    1b84:	80 90 ba 00 	lds	r8, 0x00BA	; 0x8000ba <Gu32_T2CurrentOVCount>
    1b88:	90 90 bb 00 	lds	r9, 0x00BB	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1b8c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1b90:	8c 83       	std	Y+4, r24	; 0x04
    1b92:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1b96:	8b 83       	std	Y+3, r24	; 0x03
    1b98:	b0 91 be 00 	lds	r27, 0x00BE	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1b9c:	a0 91 bf 00 	lds	r26, 0x00BF	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1ba0:	f0 91 c0 00 	lds	r31, 0x00C0	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1ba4:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
    1ba8:	20 90 c2 00 	lds	r2, 0x00C2	; 0x8000c2 <Gu32_T2MaxOVCount>
    1bac:	30 90 c3 00 	lds	r3, 0x00C3	; 0x8000c3 <Gu32_T2MaxOVCount+0x1>
    1bb0:	40 90 c4 00 	lds	r4, 0x00C4	; 0x8000c4 <Gu32_T2MaxOVCount+0x2>
    1bb4:	50 90 c5 00 	lds	r5, 0x00C5	; 0x8000c5 <Gu32_T2MaxOVCount+0x3>
    1bb8:	60 90 c6 00 	lds	r6, 0x00C6	; 0x8000c6 <Gu32_T2MaxOVCount+0x4>
    1bbc:	70 90 c7 00 	lds	r7, 0x00C7	; 0x8000c7 <Gu32_T2MaxOVCount+0x5>
    1bc0:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <Gu32_T2MaxOVCount+0x6>
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Gu32_T2MaxOVCount+0x7>
    1bca:	8a 83       	std	Y+2, r24	; 0x02
    1bcc:	28 2d       	mov	r18, r8
    1bce:	39 2d       	mov	r19, r9
    1bd0:	4c 81       	ldd	r20, Y+4	; 0x04
    1bd2:	5b 81       	ldd	r21, Y+3	; 0x03
    1bd4:	6b 2f       	mov	r22, r27
    1bd6:	7a 2f       	mov	r23, r26
    1bd8:	8f 2f       	mov	r24, r31
    1bda:	9e 2f       	mov	r25, r30
    1bdc:	a2 2c       	mov	r10, r2
    1bde:	b3 2c       	mov	r11, r3
    1be0:	c4 2c       	mov	r12, r4
    1be2:	d5 2c       	mov	r13, r5
    1be4:	e6 2c       	mov	r14, r6
    1be6:	f7 2c       	mov	r15, r7
    1be8:	09 81       	ldd	r16, Y+1	; 0x01
    1bea:	1a 81       	ldd	r17, Y+2	; 0x02
    1bec:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    1bf0:	a0 f4       	brcc	.+40     	; 0x1c1a <__vector_5+0xe4>
   {
      //increase the overflow counter
      Gu32_T2CurrentOVCount++;
    1bf2:	a1 e0       	ldi	r26, 0x01	; 1
    1bf4:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    1bf8:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <Gu32_T2CurrentOVCount>
    1bfc:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1c00:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1c04:	50 93 bd 00 	sts	0x00BD, r21	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1c08:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1c0c:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1c10:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1c14:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
    1c18:	52 c0       	rjmp	.+164    	; 0x1cbe <__vector_5+0x188>
   }
   //if the current overflow value equals the calculated total overflows value
   else if (Gu32_T2CurrentOVCount == Gu32_T2MaxOVCount)
    1c1a:	28 2d       	mov	r18, r8
    1c1c:	39 2d       	mov	r19, r9
    1c1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c20:	5b 81       	ldd	r21, Y+3	; 0x03
    1c22:	6b 2f       	mov	r22, r27
    1c24:	7a 2f       	mov	r23, r26
    1c26:	8f 2f       	mov	r24, r31
    1c28:	9e 2f       	mov	r25, r30
    1c2a:	a2 2c       	mov	r10, r2
    1c2c:	b3 2c       	mov	r11, r3
    1c2e:	c4 2c       	mov	r12, r4
    1c30:	d5 2c       	mov	r13, r5
    1c32:	e6 2c       	mov	r14, r6
    1c34:	f7 2c       	mov	r15, r7
    1c36:	09 81       	ldd	r16, Y+1	; 0x01
    1c38:	1a 81       	ldd	r17, Y+2	; 0x02
    1c3a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__cmpdi2>
    1c3e:	41 f5       	brne	.+80     	; 0x1c90 <__vector_5+0x15a>
   {
      //set the timer value to the remaining timing
      TCNT2_R=((T2_TICKS-1)-Gu32_T2LastOVTicks);
    1c40:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <Gu32_T2LastOVTicks>
    1c44:	80 95       	com	r24
    1c46:	84 bd       	out	0x24, r24	; 36
      //increase the overflow counter
      Gu32_T2CurrentOVCount++;
    1c48:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <Gu32_T2CurrentOVCount>
    1c4c:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1c50:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1c54:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1c58:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1c5c:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1c60:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1c64:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
    1c68:	a1 e0       	ldi	r26, 0x01	; 1
    1c6a:	0e 94 67 10 	call	0x20ce	; 0x20ce <__adddi3_s8>
    1c6e:	20 93 ba 00 	sts	0x00BA, r18	; 0x8000ba <Gu32_T2CurrentOVCount>
    1c72:	30 93 bb 00 	sts	0x00BB, r19	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1c76:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1c7a:	50 93 bd 00 	sts	0x00BD, r21	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1c7e:	60 93 be 00 	sts	0x00BE, r22	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1c82:	70 93 bf 00 	sts	0x00BF, r23	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1c86:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1c8a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
    1c8e:	17 c0       	rjmp	.+46     	; 0x1cbe <__vector_5+0x188>
   }
   //if the time is up
   else
   {
      //reset the overflow counter
      Gu32_T2CurrentOVCount=0;
    1c90:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <Gu32_T2CurrentOVCount>
    1c94:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <Gu32_T2CurrentOVCount+0x1>
    1c98:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <Gu32_T2CurrentOVCount+0x2>
    1c9c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <Gu32_T2CurrentOVCount+0x3>
    1ca0:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <Gu32_T2CurrentOVCount+0x4>
    1ca4:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <Gu32_T2CurrentOVCount+0x5>
    1ca8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <Gu32_T2CurrentOVCount+0x6>
    1cac:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <Gu32_T2CurrentOVCount+0x7>
      //check if the global pointer to function holds a valid function address
      if (G_fptr2 != NULLPTR)
    1cb0:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <G_fptr2>
    1cb4:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <G_fptr2+0x1>
    1cb8:	30 97       	sbiw	r30, 0x00	; 0
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <__vector_5+0x188>
      {
         //call the function
         G_fptr2();
    1cbc:	09 95       	icall
      }
   }
}
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	1f 91       	pop	r17
    1ce4:	0f 91       	pop	r16
    1ce6:	ff 90       	pop	r15
    1ce8:	ef 90       	pop	r14
    1cea:	df 90       	pop	r13
    1cec:	cf 90       	pop	r12
    1cee:	bf 90       	pop	r11
    1cf0:	af 90       	pop	r10
    1cf2:	9f 90       	pop	r9
    1cf4:	8f 90       	pop	r8
    1cf6:	7f 90       	pop	r7
    1cf8:	6f 90       	pop	r6
    1cfa:	5f 90       	pop	r5
    1cfc:	4f 90       	pop	r4
    1cfe:	3f 90       	pop	r3
    1d00:	2f 90       	pop	r2
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	0f 90       	pop	r0
    1d08:	1f 90       	pop	r1
    1d0a:	18 95       	reti

00001d0c <TDelay_ms>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with ms
************************************************************************************/
enuErrorStatus_t TDelay_ms(uint8_t u8TimerNumber, uint64_t u64Time_ms, void(*pfCallback)(void))
{
    1d0c:	4f 92       	push	r4
    1d0e:	5f 92       	push	r5
    1d10:	6f 92       	push	r6
    1d12:	7f 92       	push	r7
    1d14:	8f 92       	push	r8
    1d16:	9f 92       	push	r9
    1d18:	af 92       	push	r10
    1d1a:	bf 92       	push	r11
    1d1c:	cf 92       	push	r12
    1d1e:	df 92       	push	r13
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	68 2e       	mov	r6, r24
    1d2e:	80 2e       	mov	r8, r16
    1d30:	91 2e       	mov	r9, r17
    1d32:	d2 2f       	mov	r29, r18
    1d34:	c3 2f       	mov	r28, r19
    1d36:	b4 2f       	mov	r27, r20
    1d38:	a5 2f       	mov	r26, r21
    1d3a:	f6 2f       	mov	r31, r22
    1d3c:	e7 2f       	mov	r30, r23
    1d3e:	27 01       	movw	r4, r14
	enuErrorStatus_t enuStatus = E_ERROR;
	/*Convert ms to us*/
	u64Time_ms *= TDELAY_THOUSAND_MULTIPLIER;
    1d40:	20 2f       	mov	r18, r16
    1d42:	31 2f       	mov	r19, r17
    1d44:	4d 2f       	mov	r20, r29
    1d46:	5c 2f       	mov	r21, r28
    1d48:	6b 2f       	mov	r22, r27
    1d4a:	7a 2f       	mov	r23, r26
    1d4c:	8f 2f       	mov	r24, r31
    1d4e:	9e 2f       	mov	r25, r30
    1d50:	02 e0       	ldi	r16, 0x02	; 2
    1d52:	0e 94 45 10 	call	0x208a	; 0x208a <__ashldi3>
    1d56:	a2 2e       	mov	r10, r18
    1d58:	b3 2e       	mov	r11, r19
    1d5a:	c4 2e       	mov	r12, r20
    1d5c:	d5 2e       	mov	r13, r21
    1d5e:	e6 2e       	mov	r14, r22
    1d60:	f7 2e       	mov	r15, r23
    1d62:	78 2e       	mov	r7, r24
    1d64:	19 2f       	mov	r17, r25
    1d66:	05 e0       	ldi	r16, 0x05	; 5
    1d68:	0e 94 45 10 	call	0x208a	; 0x208a <__ashldi3>
    1d6c:	07 2d       	mov	r16, r7
    1d6e:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__subdi3>
    1d72:	a8 2c       	mov	r10, r8
    1d74:	b9 2c       	mov	r11, r9
    1d76:	cd 2e       	mov	r12, r29
    1d78:	dc 2e       	mov	r13, r28
    1d7a:	eb 2e       	mov	r14, r27
    1d7c:	fa 2e       	mov	r15, r26
    1d7e:	0f 2f       	mov	r16, r31
    1d80:	1e 2f       	mov	r17, r30
    1d82:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__adddi3>
    1d86:	03 e0       	ldi	r16, 0x03	; 3
    1d88:	0e 94 45 10 	call	0x208a	; 0x208a <__ashldi3>
    1d8c:	c2 2e       	mov	r12, r18
    1d8e:	d3 2e       	mov	r13, r19
    1d90:	e4 2e       	mov	r14, r20
    1d92:	f5 2e       	mov	r15, r21
    1d94:	d6 2f       	mov	r29, r22
    1d96:	c7 2f       	mov	r28, r23
    1d98:	a8 2e       	mov	r10, r24
    1d9a:	b9 2e       	mov	r11, r25
	if(u8TimerNumber == TIMER0)
    1d9c:	61 10       	cpse	r6, r1
    1d9e:	10 c0       	rjmp	.+32     	; 0x1dc0 <TDelay_ms+0xb4>
	{
		//turn on timer interrupts
		T0_OV_InterruptEnable();
    1da0:	0e 94 77 07 	call	0xeee	; 0xeee <T0_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T0_Start(u64Time_ms, pfCallback);
    1da4:	82 01       	movw	r16, r4
    1da6:	2c 2d       	mov	r18, r12
    1da8:	3d 2d       	mov	r19, r13
    1daa:	4e 2d       	mov	r20, r14
    1dac:	5f 2d       	mov	r21, r15
    1dae:	6d 2f       	mov	r22, r29
    1db0:	7c 2f       	mov	r23, r28
    1db2:	8a 2d       	mov	r24, r10
    1db4:	9b 2d       	mov	r25, r11
    1db6:	0e 94 86 07 	call	0xf0c	; 0xf0c <T0_Start>
		enuStatus = T0_GetStatus();
    1dba:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <T0_GetStatus>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <TDelay_ms+0xdc>
	}
	else if(u8TimerNumber == TIMER2)
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	68 12       	cpse	r6, r24
    1dc4:	10 c0       	rjmp	.+32     	; 0x1de6 <TDelay_ms+0xda>
	{
		//turn on timer interrupts
		T2_OV_InterruptEnable();
    1dc6:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <T2_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T2_Start(u64Time_ms, pfCallback);
    1dca:	82 01       	movw	r16, r4
    1dcc:	2c 2d       	mov	r18, r12
    1dce:	3d 2d       	mov	r19, r13
    1dd0:	4e 2d       	mov	r20, r14
    1dd2:	5f 2d       	mov	r21, r15
    1dd4:	6d 2f       	mov	r22, r29
    1dd6:	7c 2f       	mov	r23, r28
    1dd8:	8a 2d       	mov	r24, r10
    1dda:	9b 2d       	mov	r25, r11
    1ddc:	0e 94 83 0b 	call	0x1706	; 0x1706 <T2_Start>
		enuStatus = T2_GetStatus();
    1de0:	0e 94 ce 0c 	call	0x199c	; 0x199c <T2_GetStatus>
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <TDelay_ms+0xdc>
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with ms
************************************************************************************/
enuErrorStatus_t TDelay_ms(uint8_t u8TimerNumber, uint64_t u64Time_ms, void(*pfCallback)(void))
{
	enuErrorStatus_t enuStatus = E_ERROR;
    1de6:	80 e0       	ldi	r24, 0x00	; 0
		/*start timer to count in ms, send callBack function*/
		T2_Start(u64Time_ms, pfCallback);
		enuStatus = T2_GetStatus();
	}
	return enuStatus;
}//end TDelay_ms
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	df 90       	pop	r13
    1df6:	cf 90       	pop	r12
    1df8:	bf 90       	pop	r11
    1dfa:	af 90       	pop	r10
    1dfc:	9f 90       	pop	r9
    1dfe:	8f 90       	pop	r8
    1e00:	7f 90       	pop	r7
    1e02:	6f 90       	pop	r6
    1e04:	5f 90       	pop	r5
    1e06:	4f 90       	pop	r4
    1e08:	08 95       	ret

00001e0a <TDelay_us>:
* Parameters (out): None
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with us
************************************************************************************/
enuErrorStatus_t TDelay_us(uint8_t u8TimerNumber, uint64_t u64Time_us, void(*pfCallback)(void))
{
    1e0a:	8f 92       	push	r8
    1e0c:	9f 92       	push	r9
    1e0e:	af 92       	push	r10
    1e10:	bf 92       	push	r11
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	80 2e       	mov	r8, r16
    1e24:	91 2e       	mov	r9, r17
    1e26:	a2 2e       	mov	r10, r18
    1e28:	b3 2e       	mov	r11, r19
    1e2a:	c4 2e       	mov	r12, r20
    1e2c:	d5 2e       	mov	r13, r21
    1e2e:	d6 2f       	mov	r29, r22
    1e30:	c7 2f       	mov	r28, r23
	enuErrorStatus_t enuStatus = E_ERROR;

	if(u8TimerNumber == TIMER0)
    1e32:	81 11       	cpse	r24, r1
    1e34:	10 c0       	rjmp	.+32     	; 0x1e56 <TDelay_us+0x4c>
	{
		//turn on timer interrupts
		T0_OV_InterruptEnable();
    1e36:	0e 94 77 07 	call	0xeee	; 0xeee <T0_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T0_Start(u64Time_us, pfCallback);
    1e3a:	87 01       	movw	r16, r14
    1e3c:	28 2d       	mov	r18, r8
    1e3e:	39 2d       	mov	r19, r9
    1e40:	4a 2d       	mov	r20, r10
    1e42:	5b 2d       	mov	r21, r11
    1e44:	6c 2d       	mov	r22, r12
    1e46:	7d 2d       	mov	r23, r13
    1e48:	8d 2f       	mov	r24, r29
    1e4a:	9c 2f       	mov	r25, r28
    1e4c:	0e 94 86 07 	call	0xf0c	; 0xf0c <T0_Start>
		enuStatus = T0_GetStatus();
    1e50:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <T0_GetStatus>
    1e54:	13 c0       	rjmp	.+38     	; 0x1e7c <TDelay_us+0x72>
	}
	else if(u8TimerNumber == TIMER2)
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	81 f4       	brne	.+32     	; 0x1e7a <TDelay_us+0x70>
	{
		//turn on timer interrupts
		T2_OV_InterruptEnable();
    1e5a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <T2_OV_InterruptEnable>
		/*start timer to count in ms, send callBack function*/
		T2_Start(u64Time_us, pfCallback);
    1e5e:	87 01       	movw	r16, r14
    1e60:	28 2d       	mov	r18, r8
    1e62:	39 2d       	mov	r19, r9
    1e64:	4a 2d       	mov	r20, r10
    1e66:	5b 2d       	mov	r21, r11
    1e68:	6c 2d       	mov	r22, r12
    1e6a:	7d 2d       	mov	r23, r13
    1e6c:	8d 2f       	mov	r24, r29
    1e6e:	9c 2f       	mov	r25, r28
    1e70:	0e 94 83 0b 	call	0x1706	; 0x1706 <T2_Start>
		enuStatus = T2_GetStatus();
    1e74:	0e 94 ce 0c 	call	0x199c	; 0x199c <T2_GetStatus>
    1e78:	01 c0       	rjmp	.+2      	; 0x1e7c <TDelay_us+0x72>
* Return value    : enuErrorStatus_t
* Description     : A function to make delay with us
************************************************************************************/
enuErrorStatus_t TDelay_us(uint8_t u8TimerNumber, uint64_t u64Time_us, void(*pfCallback)(void))
{
	enuErrorStatus_t enuStatus = E_ERROR;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
		/*start timer to count in ms, send callBack function*/
		T2_Start(u64Time_us, pfCallback);
		enuStatus = T2_GetStatus();
	}
	return enuStatus;
}//end TDelay_us
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	bf 90       	pop	r11
    1e8e:	af 90       	pop	r10
    1e90:	9f 90       	pop	r9
    1e92:	8f 90       	pop	r8
    1e94:	08 95       	ret

00001e96 <__udivmodsi4>:
    1e96:	a1 e2       	ldi	r26, 0x21	; 33
    1e98:	1a 2e       	mov	r1, r26
    1e9a:	aa 1b       	sub	r26, r26
    1e9c:	bb 1b       	sub	r27, r27
    1e9e:	fd 01       	movw	r30, r26
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <__udivmodsi4_ep>

00001ea2 <__udivmodsi4_loop>:
    1ea2:	aa 1f       	adc	r26, r26
    1ea4:	bb 1f       	adc	r27, r27
    1ea6:	ee 1f       	adc	r30, r30
    1ea8:	ff 1f       	adc	r31, r31
    1eaa:	a2 17       	cp	r26, r18
    1eac:	b3 07       	cpc	r27, r19
    1eae:	e4 07       	cpc	r30, r20
    1eb0:	f5 07       	cpc	r31, r21
    1eb2:	20 f0       	brcs	.+8      	; 0x1ebc <__udivmodsi4_ep>
    1eb4:	a2 1b       	sub	r26, r18
    1eb6:	b3 0b       	sbc	r27, r19
    1eb8:	e4 0b       	sbc	r30, r20
    1eba:	f5 0b       	sbc	r31, r21

00001ebc <__udivmodsi4_ep>:
    1ebc:	66 1f       	adc	r22, r22
    1ebe:	77 1f       	adc	r23, r23
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	1a 94       	dec	r1
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <__udivmodsi4_loop>
    1ec8:	60 95       	com	r22
    1eca:	70 95       	com	r23
    1ecc:	80 95       	com	r24
    1ece:	90 95       	com	r25
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	bd 01       	movw	r22, r26
    1ed6:	cf 01       	movw	r24, r30
    1ed8:	08 95       	ret

00001eda <__tablejump2__>:
    1eda:	ee 0f       	add	r30, r30
    1edc:	ff 1f       	adc	r31, r31
    1ede:	05 90       	lpm	r0, Z+
    1ee0:	f4 91       	lpm	r31, Z
    1ee2:	e0 2d       	mov	r30, r0
    1ee4:	09 94       	ijmp

00001ee6 <__umulhisi3>:
    1ee6:	a2 9f       	mul	r26, r18
    1ee8:	b0 01       	movw	r22, r0
    1eea:	b3 9f       	mul	r27, r19
    1eec:	c0 01       	movw	r24, r0
    1eee:	a3 9f       	mul	r26, r19
    1ef0:	70 0d       	add	r23, r0
    1ef2:	81 1d       	adc	r24, r1
    1ef4:	11 24       	eor	r1, r1
    1ef6:	91 1d       	adc	r25, r1
    1ef8:	b2 9f       	mul	r27, r18
    1efa:	70 0d       	add	r23, r0
    1efc:	81 1d       	adc	r24, r1
    1efe:	11 24       	eor	r1, r1
    1f00:	91 1d       	adc	r25, r1
    1f02:	08 95       	ret

00001f04 <__muluhisi3>:
    1f04:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
    1f08:	a5 9f       	mul	r26, r21
    1f0a:	90 0d       	add	r25, r0
    1f0c:	b4 9f       	mul	r27, r20
    1f0e:	90 0d       	add	r25, r0
    1f10:	a4 9f       	mul	r26, r20
    1f12:	80 0d       	add	r24, r0
    1f14:	91 1d       	adc	r25, r1
    1f16:	11 24       	eor	r1, r1
    1f18:	08 95       	ret

00001f1a <__muldi3>:
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	1f 93       	push	r17
    1f20:	0f 93       	push	r16
    1f22:	9a 9d       	mul	r25, r10
    1f24:	f0 2d       	mov	r31, r0
    1f26:	21 9f       	mul	r18, r17
    1f28:	f0 0d       	add	r31, r0
    1f2a:	8b 9d       	mul	r24, r11
    1f2c:	f0 0d       	add	r31, r0
    1f2e:	8a 9d       	mul	r24, r10
    1f30:	e0 2d       	mov	r30, r0
    1f32:	f1 0d       	add	r31, r1
    1f34:	03 9f       	mul	r16, r19
    1f36:	f0 0d       	add	r31, r0
    1f38:	02 9f       	mul	r16, r18
    1f3a:	e0 0d       	add	r30, r0
    1f3c:	f1 1d       	adc	r31, r1
    1f3e:	4e 9d       	mul	r20, r14
    1f40:	e0 0d       	add	r30, r0
    1f42:	f1 1d       	adc	r31, r1
    1f44:	5e 9d       	mul	r21, r14
    1f46:	f0 0d       	add	r31, r0
    1f48:	4f 9d       	mul	r20, r15
    1f4a:	f0 0d       	add	r31, r0
    1f4c:	7f 93       	push	r23
    1f4e:	6f 93       	push	r22
    1f50:	bf 92       	push	r11
    1f52:	af 92       	push	r10
    1f54:	5f 93       	push	r21
    1f56:	4f 93       	push	r20
    1f58:	d5 01       	movw	r26, r10
    1f5a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
    1f5e:	8b 01       	movw	r16, r22
    1f60:	ac 01       	movw	r20, r24
    1f62:	d7 01       	movw	r26, r14
    1f64:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
    1f68:	eb 01       	movw	r28, r22
    1f6a:	e8 0f       	add	r30, r24
    1f6c:	f9 1f       	adc	r31, r25
    1f6e:	d6 01       	movw	r26, r12
    1f70:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__muldi3_6>
    1f74:	2f 91       	pop	r18
    1f76:	3f 91       	pop	r19
    1f78:	d6 01       	movw	r26, r12
    1f7a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
    1f7e:	c6 0f       	add	r28, r22
    1f80:	d7 1f       	adc	r29, r23
    1f82:	e8 1f       	adc	r30, r24
    1f84:	f9 1f       	adc	r31, r25
    1f86:	af 91       	pop	r26
    1f88:	bf 91       	pop	r27
    1f8a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <__muldi3_6>
    1f8e:	2f 91       	pop	r18
    1f90:	3f 91       	pop	r19
    1f92:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
    1f96:	c6 0f       	add	r28, r22
    1f98:	d7 1f       	adc	r29, r23
    1f9a:	e8 1f       	adc	r30, r24
    1f9c:	f9 1f       	adc	r31, r25
    1f9e:	d6 01       	movw	r26, r12
    1fa0:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
    1fa4:	e6 0f       	add	r30, r22
    1fa6:	f7 1f       	adc	r31, r23
    1fa8:	98 01       	movw	r18, r16
    1faa:	be 01       	movw	r22, r28
    1fac:	cf 01       	movw	r24, r30
    1fae:	11 24       	eor	r1, r1
    1fb0:	0f 91       	pop	r16
    1fb2:	1f 91       	pop	r17
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <__muldi3_6>:
    1fba:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__umulhisi3>
    1fbe:	46 0f       	add	r20, r22
    1fc0:	57 1f       	adc	r21, r23
    1fc2:	c8 1f       	adc	r28, r24
    1fc4:	d9 1f       	adc	r29, r25
    1fc6:	08 f4       	brcc	.+2      	; 0x1fca <__muldi3_6+0x10>
    1fc8:	31 96       	adiw	r30, 0x01	; 1
    1fca:	08 95       	ret

00001fcc <__umoddi3>:
    1fcc:	68 94       	set
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <__udivdi3_umoddi3>

00001fd0 <__udivdi3>:
    1fd0:	e8 94       	clt

00001fd2 <__udivdi3_umoddi3>:
    1fd2:	8f 92       	push	r8
    1fd4:	9f 92       	push	r9
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmod64>
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	9f 90       	pop	r9
    1fe4:	8f 90       	pop	r8
    1fe6:	08 95       	ret

00001fe8 <__udivmod64>:
    1fe8:	88 24       	eor	r8, r8
    1fea:	99 24       	eor	r9, r9
    1fec:	f4 01       	movw	r30, r8
    1fee:	e4 01       	movw	r28, r8
    1ff0:	b0 e4       	ldi	r27, 0x40	; 64
    1ff2:	9f 93       	push	r25
    1ff4:	aa 27       	eor	r26, r26
    1ff6:	9a 15       	cp	r25, r10
    1ff8:	8b 04       	cpc	r8, r11
    1ffa:	9c 04       	cpc	r9, r12
    1ffc:	ed 05       	cpc	r30, r13
    1ffe:	fe 05       	cpc	r31, r14
    2000:	cf 05       	cpc	r28, r15
    2002:	d0 07       	cpc	r29, r16
    2004:	a1 07       	cpc	r26, r17
    2006:	98 f4       	brcc	.+38     	; 0x202e <__udivmod64+0x46>
    2008:	ad 2f       	mov	r26, r29
    200a:	dc 2f       	mov	r29, r28
    200c:	cf 2f       	mov	r28, r31
    200e:	fe 2f       	mov	r31, r30
    2010:	e9 2d       	mov	r30, r9
    2012:	98 2c       	mov	r9, r8
    2014:	89 2e       	mov	r8, r25
    2016:	98 2f       	mov	r25, r24
    2018:	87 2f       	mov	r24, r23
    201a:	76 2f       	mov	r23, r22
    201c:	65 2f       	mov	r22, r21
    201e:	54 2f       	mov	r21, r20
    2020:	43 2f       	mov	r20, r19
    2022:	32 2f       	mov	r19, r18
    2024:	22 27       	eor	r18, r18
    2026:	b8 50       	subi	r27, 0x08	; 8
    2028:	31 f7       	brne	.-52     	; 0x1ff6 <__udivmod64+0xe>
    202a:	bf 91       	pop	r27
    202c:	27 c0       	rjmp	.+78     	; 0x207c <__udivmod64+0x94>
    202e:	1b 2e       	mov	r1, r27
    2030:	bf 91       	pop	r27
    2032:	bb 27       	eor	r27, r27
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	44 1f       	adc	r20, r20
    203a:	55 1f       	adc	r21, r21
    203c:	66 1f       	adc	r22, r22
    203e:	77 1f       	adc	r23, r23
    2040:	88 1f       	adc	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	88 1c       	adc	r8, r8
    2046:	99 1c       	adc	r9, r9
    2048:	ee 1f       	adc	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	cc 1f       	adc	r28, r28
    204e:	dd 1f       	adc	r29, r29
    2050:	aa 1f       	adc	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	8a 14       	cp	r8, r10
    2056:	9b 04       	cpc	r9, r11
    2058:	ec 05       	cpc	r30, r12
    205a:	fd 05       	cpc	r31, r13
    205c:	ce 05       	cpc	r28, r14
    205e:	df 05       	cpc	r29, r15
    2060:	a0 07       	cpc	r26, r16
    2062:	b1 07       	cpc	r27, r17
    2064:	48 f0       	brcs	.+18     	; 0x2078 <__udivmod64+0x90>
    2066:	8a 18       	sub	r8, r10
    2068:	9b 08       	sbc	r9, r11
    206a:	ec 09       	sbc	r30, r12
    206c:	fd 09       	sbc	r31, r13
    206e:	ce 09       	sbc	r28, r14
    2070:	df 09       	sbc	r29, r15
    2072:	a0 0b       	sbc	r26, r16
    2074:	b1 0b       	sbc	r27, r17
    2076:	21 60       	ori	r18, 0x01	; 1
    2078:	1a 94       	dec	r1
    207a:	e1 f6       	brne	.-72     	; 0x2034 <__udivmod64+0x4c>
    207c:	2e f4       	brtc	.+10     	; 0x2088 <__udivmod64+0xa0>
    207e:	94 01       	movw	r18, r8
    2080:	af 01       	movw	r20, r30
    2082:	be 01       	movw	r22, r28
    2084:	cd 01       	movw	r24, r26
    2086:	00 0c       	add	r0, r0
    2088:	08 95       	ret

0000208a <__ashldi3>:
    208a:	0f 93       	push	r16
    208c:	08 30       	cpi	r16, 0x08	; 8
    208e:	90 f0       	brcs	.+36     	; 0x20b4 <__ashldi3+0x2a>
    2090:	98 2f       	mov	r25, r24
    2092:	87 2f       	mov	r24, r23
    2094:	76 2f       	mov	r23, r22
    2096:	65 2f       	mov	r22, r21
    2098:	54 2f       	mov	r21, r20
    209a:	43 2f       	mov	r20, r19
    209c:	32 2f       	mov	r19, r18
    209e:	22 27       	eor	r18, r18
    20a0:	08 50       	subi	r16, 0x08	; 8
    20a2:	f4 cf       	rjmp	.-24     	; 0x208c <__ashldi3+0x2>
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	44 1f       	adc	r20, r20
    20aa:	55 1f       	adc	r21, r21
    20ac:	66 1f       	adc	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	0a 95       	dec	r16
    20b6:	b2 f7       	brpl	.-20     	; 0x20a4 <__ashldi3+0x1a>
    20b8:	0f 91       	pop	r16
    20ba:	08 95       	ret

000020bc <__adddi3>:
    20bc:	2a 0d       	add	r18, r10
    20be:	3b 1d       	adc	r19, r11
    20c0:	4c 1d       	adc	r20, r12
    20c2:	5d 1d       	adc	r21, r13
    20c4:	6e 1d       	adc	r22, r14
    20c6:	7f 1d       	adc	r23, r15
    20c8:	80 1f       	adc	r24, r16
    20ca:	91 1f       	adc	r25, r17
    20cc:	08 95       	ret

000020ce <__adddi3_s8>:
    20ce:	00 24       	eor	r0, r0
    20d0:	a7 fd       	sbrc	r26, 7
    20d2:	00 94       	com	r0
    20d4:	2a 0f       	add	r18, r26
    20d6:	30 1d       	adc	r19, r0
    20d8:	40 1d       	adc	r20, r0
    20da:	50 1d       	adc	r21, r0
    20dc:	60 1d       	adc	r22, r0
    20de:	70 1d       	adc	r23, r0
    20e0:	80 1d       	adc	r24, r0
    20e2:	90 1d       	adc	r25, r0
    20e4:	08 95       	ret

000020e6 <__subdi3>:
    20e6:	2a 19       	sub	r18, r10
    20e8:	3b 09       	sbc	r19, r11
    20ea:	4c 09       	sbc	r20, r12
    20ec:	5d 09       	sbc	r21, r13
    20ee:	6e 09       	sbc	r22, r14
    20f0:	7f 09       	sbc	r23, r15
    20f2:	80 0b       	sbc	r24, r16
    20f4:	91 0b       	sbc	r25, r17
    20f6:	08 95       	ret

000020f8 <__cmpdi2>:
    20f8:	2a 15       	cp	r18, r10
    20fa:	3b 05       	cpc	r19, r11
    20fc:	4c 05       	cpc	r20, r12
    20fe:	5d 05       	cpc	r21, r13
    2100:	6e 05       	cpc	r22, r14
    2102:	7f 05       	cpc	r23, r15
    2104:	80 07       	cpc	r24, r16
    2106:	91 07       	cpc	r25, r17
    2108:	08 95       	ret

0000210a <__cmpdi2_s8>:
    210a:	00 24       	eor	r0, r0
    210c:	a7 fd       	sbrc	r26, 7
    210e:	00 94       	com	r0
    2110:	2a 17       	cp	r18, r26
    2112:	30 05       	cpc	r19, r0
    2114:	40 05       	cpc	r20, r0
    2116:	50 05       	cpc	r21, r0
    2118:	60 05       	cpc	r22, r0
    211a:	70 05       	cpc	r23, r0
    211c:	80 05       	cpc	r24, r0
    211e:	90 05       	cpc	r25, r0
    2120:	08 95       	ret

00002122 <__itoa_ncheck>:
    2122:	bb 27       	eor	r27, r27
    2124:	4a 30       	cpi	r20, 0x0A	; 10
    2126:	31 f4       	brne	.+12     	; 0x2134 <__itoa_ncheck+0x12>
    2128:	99 23       	and	r25, r25
    212a:	22 f4       	brpl	.+8      	; 0x2134 <__itoa_ncheck+0x12>
    212c:	bd e2       	ldi	r27, 0x2D	; 45
    212e:	90 95       	com	r25
    2130:	81 95       	neg	r24
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__utoa_common>

00002138 <__utoa_ncheck>:
    2138:	bb 27       	eor	r27, r27

0000213a <__utoa_common>:
    213a:	fb 01       	movw	r30, r22
    213c:	55 27       	eor	r21, r21
    213e:	aa 27       	eor	r26, r26
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	aa 1f       	adc	r26, r26
    2146:	a4 17       	cp	r26, r20
    2148:	10 f0       	brcs	.+4      	; 0x214e <__utoa_common+0x14>
    214a:	a4 1b       	sub	r26, r20
    214c:	83 95       	inc	r24
    214e:	50 51       	subi	r21, 0x10	; 16
    2150:	b9 f7       	brne	.-18     	; 0x2140 <__utoa_common+0x6>
    2152:	a0 5d       	subi	r26, 0xD0	; 208
    2154:	aa 33       	cpi	r26, 0x3A	; 58
    2156:	08 f0       	brcs	.+2      	; 0x215a <__utoa_common+0x20>
    2158:	a9 5d       	subi	r26, 0xD9	; 217
    215a:	a1 93       	st	Z+, r26
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	79 f7       	brne	.-34     	; 0x213e <__utoa_common+0x4>
    2160:	b1 11       	cpse	r27, r1
    2162:	b1 93       	st	Z+, r27
    2164:	11 92       	st	Z+, r1
    2166:	cb 01       	movw	r24, r22
    2168:	0c 94 b6 10 	jmp	0x216c	; 0x216c <strrev>

0000216c <strrev>:
    216c:	dc 01       	movw	r26, r24
    216e:	fc 01       	movw	r30, r24
    2170:	67 2f       	mov	r22, r23
    2172:	71 91       	ld	r23, Z+
    2174:	77 23       	and	r23, r23
    2176:	e1 f7       	brne	.-8      	; 0x2170 <strrev+0x4>
    2178:	32 97       	sbiw	r30, 0x02	; 2
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <strrev+0x18>
    217c:	7c 91       	ld	r23, X
    217e:	6d 93       	st	X+, r22
    2180:	70 83       	st	Z, r23
    2182:	62 91       	ld	r22, -Z
    2184:	ae 17       	cp	r26, r30
    2186:	bf 07       	cpc	r27, r31
    2188:	c8 f3       	brcs	.-14     	; 0x217c <strrev+0x10>
    218a:	08 95       	ret

0000218c <_exit>:
    218c:	f8 94       	cli

0000218e <__stop_program>:
    218e:	ff cf       	rjmp	.-2      	; 0x218e <__stop_program>
