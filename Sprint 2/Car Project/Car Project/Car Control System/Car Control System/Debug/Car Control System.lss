
Car Control System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000ae2  00000b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800094  00800094  00000baa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001653  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abc  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7a  00000000  00000000  00002e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080f  00000000  00000000  00003cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000566  00000000  00000000  000044e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	94 04       	cpc	r9, r4
  56:	9e 04       	cpc	r9, r14
  58:	a8 04       	cpc	r10, r8
  5a:	b2 04       	cpc	r11, r2
  5c:	bc 04       	cpc	r11, r12
  5e:	c6 04       	cpc	r12, r6
  60:	d0 04       	cpc	r13, r0
  62:	da 04       	cpc	r13, r10

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 ee       	ldi	r30, 0xE2	; 226
  78:	fa e0       	ldi	r31, 0x0A	; 10
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a4 e9       	ldi	r26, 0x94	; 148
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a7 39       	cpi	r26, 0x97	; 151
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <main>
  9a:	0c 94 6f 05 	jmp	0xade	; 0xade <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <App_Init>:
* Return Value    : void
* Description     : A function to initialize the application
*************************************************************************************************/
void App_Init(void)
{
	DIO_Init();
  a2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <DIO_Init>
	PWM_Init();
  a6:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <PWM_Init>
	BTN_Init();
  aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <BTN_Init>
  ae:	08 95       	ret

000000b0 <App_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void App_Update(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	00 d0       	rcall	.+0      	; 0xb6 <App_Update+0x6>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <App_Update+0x8>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	enuBTNStatus_t enuButton3State;
	static enuCarSpeed_t enuCarSpeed = SPEED_0;
	static uint8_t u8DutyCycle = 0;


	BTN_getState(BTN0, &enuButton0State);
  bc:	be 01       	movw	r22, r28
  be:	6f 5f       	subi	r22, 0xFF	; 255
  c0:	7f 4f       	sbci	r23, 0xFF	; 255
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTN_getState>
	BTN_getState(BTN1, &enuButton1State);
  c8:	be 01       	movw	r22, r28
  ca:	6e 5f       	subi	r22, 0xFE	; 254
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTN_getState>
	BTN_getState(BTN2, &enuButton2State);
  d4:	be 01       	movw	r22, r28
  d6:	6d 5f       	subi	r22, 0xFD	; 253
  d8:	7f 4f       	sbci	r23, 0xFF	; 255
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTN_getState>
	BTN_getState(BTN3, &enuButton3State);
  e0:	be 01       	movw	r22, r28
  e2:	6c 5f       	subi	r22, 0xFC	; 252
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <BTN_getState>
	/* Forward Direction */
	if(enuButton0State == HELD)
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	79 f4       	brne	.+30     	; 0x110 <App_Update+0x60>
	{
		DCMotor_setDirection(MOTOR1, genuMotorDirection);
  f2:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <genuMotorDirection>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 92 01 	call	0x324	; 0x324 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR2, genuMotorDirection);
  fc:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <genuMotorDirection>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 92 01 	call	0x324	; 0x324 <DCMotor_setDirection>
		DCMotor_setSpeed(u8DutyCycle);
 106:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
 10a:	0e 94 c4 01 	call	0x388	; 0x388 <DCMotor_setSpeed>
 10e:	63 c0       	rjmp	.+198    	; 0x1d6 <App_Update+0x126>
	}
	/* Turn Right */
	else if(enuButton1State == HELD)
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	61 f4       	brne	.+24     	; 0x12e <App_Update+0x7e>
	{
		DCMotor_setDirection(MOTOR1, FORWARD);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 92 01 	call	0x324	; 0x324 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR2, BACKWARD);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 92 01 	call	0x324	; 0x324 <DCMotor_setDirection>
		DCMotor_setSpeed(30);
 126:	8e e1       	ldi	r24, 0x1E	; 30
 128:	0e 94 c4 01 	call	0x388	; 0x388 <DCMotor_setSpeed>
 12c:	54 c0       	rjmp	.+168    	; 0x1d6 <App_Update+0x126>
	}
	/*Turn Left */
	else if(enuButton2State == HELD)
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	61 f4       	brne	.+24     	; 0x14c <App_Update+0x9c>
	{
		DCMotor_setDirection(MOTOR2, FORWARD);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 92 01 	call	0x324	; 0x324 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR1, BACKWARD);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 92 01 	call	0x324	; 0x324 <DCMotor_setDirection>
		DCMotor_setSpeed(30);
 144:	8e e1       	ldi	r24, 0x1E	; 30
 146:	0e 94 c4 01 	call	0x388	; 0x388 <DCMotor_setSpeed>
 14a:	45 c0       	rjmp	.+138    	; 0x1d6 <App_Update+0x126>
	}
	/* Change Speed and Direction */
	else if(enuButton3State == PRESSED)
 14c:	8c 81       	ldd	r24, Y+4	; 0x04
 14e:	81 11       	cpse	r24, r1
 150:	40 c0       	rjmp	.+128    	; 0x1d2 <App_Update+0x122>
	{
		DCMotor_stop(MOTOR1);
 152:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <DCMotor_stop>
		DCMotor_stop(MOTOR2);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <DCMotor_stop>
		switch(enuCarSpeed)
 15c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	e1 f0       	breq	.+56     	; 0x19c <App_Update+0xec>
 164:	28 f4       	brcc	.+10     	; 0x170 <App_Update+0xc0>
 166:	88 23       	and	r24, r24
 168:	41 f0       	breq	.+16     	; 0x17a <App_Update+0xca>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	71 f0       	breq	.+28     	; 0x18a <App_Update+0xda>
 16e:	33 c0       	rjmp	.+102    	; 0x1d6 <App_Update+0x126>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	e9 f0       	breq	.+58     	; 0x1ae <App_Update+0xfe>
 174:	84 30       	cpi	r24, 0x04	; 4
 176:	21 f1       	breq	.+72     	; 0x1c0 <App_Update+0x110>
 178:	2e c0       	rjmp	.+92     	; 0x1d6 <App_Update+0x126>
		{
			case SPEED_NEG_30:
			{
				u8DutyCycle = 0;
 17a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
				enuCarSpeed = SPEED_0;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				genuMotorDirection = FORWARD;
 184:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <genuMotorDirection>
			}
			break;
 188:	26 c0       	rjmp	.+76     	; 0x1d6 <App_Update+0x126>
			case SPEED_0:
			{
				u8DutyCycle = 30;
 18a:	8e e1       	ldi	r24, 0x1E	; 30
 18c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
				enuCarSpeed = SPEED_30;
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				genuMotorDirection = FORWARD;
 196:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <genuMotorDirection>
			}
			break;
 19a:	1d c0       	rjmp	.+58     	; 0x1d6 <App_Update+0x126>
			case SPEED_30:
			{
				u8DutyCycle = 60;
 19c:	8c e3       	ldi	r24, 0x3C	; 60
 19e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
				enuCarSpeed = SPEED_60;
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				genuMotorDirection = FORWARD;
 1a8:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <genuMotorDirection>
			}
			break;
 1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <App_Update+0x126>
			case SPEED_60:
			{
				u8DutyCycle = 90;
 1ae:	8a e5       	ldi	r24, 0x5A	; 90
 1b0:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
				enuCarSpeed = SPEED_90;
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				genuMotorDirection = FORWARD;
 1ba:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <genuMotorDirection>
			}
			break;
 1be:	0b c0       	rjmp	.+22     	; 0x1d6 <App_Update+0x126>
			case SPEED_90:
			{
				/* Toggling the direction of car movement */
				u8DutyCycle = 30;
 1c0:	8e e1       	ldi	r24, 0x1E	; 30
 1c2:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
				enuCarSpeed = SPEED_NEG_30;
 1c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
				genuMotorDirection = BACKWARD;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <genuMotorDirection>
			}
			break;
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <App_Update+0x126>
		}
	}
	else
	{
		PWM_Stop();
 1d2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <PWM_Stop>
	}
}
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <BTN_Init>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the button
*************************************************************************************************/
enuErrorStatus_t	BTN_Init(void)
{
	return DIO_Init();
 1e4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <DIO_Init>
}//end BTN_Init
 1e8:	08 95       	ret

000001ea <BTN_getState>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read the button status (pressed, not_pressed)
*************************************************************************************************/
enuErrorStatus_t	BTN_getState(uint8_t u8_BtnNum, enuBTNStatus_t* enuBTNStatus)
{
 1ea:	7f 92       	push	r7
 1ec:	8f 92       	push	r8
 1ee:	9f 92       	push	r9
 1f0:	af 92       	push	r10
 1f2:	bf 92       	push	r11
 1f4:	cf 92       	push	r12
 1f6:	df 92       	push	r13
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	1f 92       	push	r1
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62

	static uint8_t u8_HeldFlag=0;
	uint64_t u64_Counter=0;

	if(enuBTNStatus == NULL_PTR)	return E_ERROR;
 20a:	61 15       	cp	r22, r1
 20c:	71 05       	cpc	r23, r1
 20e:	09 f4       	brne	.+2      	; 0x212 <BTN_getState+0x28>
 210:	79 c0       	rjmp	.+242    	; 0x304 <BTN_getState+0x11a>
 212:	6b 01       	movw	r12, r22
 214:	78 2e       	mov	r7, r24
	else
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);
 216:	be 01       	movw	r22, r28
 218:	6f 5f       	subi	r22, 0xFF	; 255
 21a:	7f 4f       	sbci	r23, 0xFF	; 255
 21c:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_Read>
*************************************************************************************************/
enuErrorStatus_t	BTN_getState(uint8_t u8_BtnNum, enuBTNStatus_t* enuBTNStatus)
{

	static uint8_t u8_HeldFlag=0;
	uint64_t u64_Counter=0;
 220:	a1 2c       	mov	r10, r1
 222:	b1 2c       	mov	r11, r1
 224:	e1 2c       	mov	r14, r1
 226:	f1 2c       	mov	r15, r1
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	10 e0       	ldi	r17, 0x00	; 0
 22c:	81 2c       	mov	r8, r1
 22e:	91 2c       	mov	r9, r1
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);

		while(u8_Data == LOW && u64_Counter < HOLD_DELAY)
 230:	19 c0       	rjmp	.+50     	; 0x264 <BTN_getState+0x7a>
		{
			u64_Counter++;
 232:	2a 2d       	mov	r18, r10
 234:	3b 2d       	mov	r19, r11
 236:	4e 2d       	mov	r20, r14
 238:	5f 2d       	mov	r21, r15
 23a:	60 2f       	mov	r22, r16
 23c:	71 2f       	mov	r23, r17
 23e:	88 2d       	mov	r24, r8
 240:	99 2d       	mov	r25, r9
 242:	a1 e0       	ldi	r26, 0x01	; 1
 244:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__adddi3_s8>
 248:	a2 2e       	mov	r10, r18
 24a:	b3 2e       	mov	r11, r19
 24c:	e4 2e       	mov	r14, r20
 24e:	f5 2e       	mov	r15, r21
 250:	06 2f       	mov	r16, r22
 252:	17 2f       	mov	r17, r23
 254:	88 2e       	mov	r8, r24
 256:	99 2e       	mov	r9, r25
			DIO_Read(u8_BtnNum, &u8_Data);
 258:	be 01       	movw	r22, r28
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	87 2d       	mov	r24, r7
 260:	0e 94 25 04 	call	0x84a	; 0x84a <DIO_Read>
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);

		while(u8_Data == LOW && u64_Counter < HOLD_DELAY)
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	81 11       	cpse	r24, r1
 268:	12 c0       	rjmp	.+36     	; 0x28e <BTN_getState+0xa4>
 26a:	2a 2d       	mov	r18, r10
 26c:	3b 2d       	mov	r19, r11
 26e:	4e 2d       	mov	r20, r14
 270:	5f 2d       	mov	r21, r15
 272:	60 2f       	mov	r22, r16
 274:	71 2f       	mov	r23, r17
 276:	88 2d       	mov	r24, r8
 278:	99 2d       	mov	r25, r9
 27a:	2f 30       	cpi	r18, 0x0F	; 15
 27c:	37 42       	sbci	r19, 0x27	; 39
 27e:	41 05       	cpc	r20, r1
 280:	51 05       	cpc	r21, r1
 282:	61 05       	cpc	r22, r1
 284:	71 05       	cpc	r23, r1
 286:	81 05       	cpc	r24, r1
 288:	91 05       	cpc	r25, r1
 28a:	99 f2       	breq	.-90     	; 0x232 <BTN_getState+0x48>
 28c:	90 f2       	brcs	.-92     	; 0x232 <BTN_getState+0x48>
		{
			u64_Counter++;
			DIO_Read(u8_BtnNum, &u8_Data);
		}
		if(u64_Counter == HOLD_DELAY)
 28e:	2a 2d       	mov	r18, r10
 290:	3b 2d       	mov	r19, r11
 292:	4e 2d       	mov	r20, r14
 294:	5f 2d       	mov	r21, r15
 296:	60 2f       	mov	r22, r16
 298:	71 2f       	mov	r23, r17
 29a:	88 2d       	mov	r24, r8
 29c:	99 2d       	mov	r25, r9
 29e:	20 31       	cpi	r18, 0x10	; 16
 2a0:	37 42       	sbci	r19, 0x27	; 39
 2a2:	41 05       	cpc	r20, r1
 2a4:	51 05       	cpc	r21, r1
 2a6:	61 05       	cpc	r22, r1
 2a8:	71 05       	cpc	r23, r1
 2aa:	81 05       	cpc	r24, r1
 2ac:	91 05       	cpc	r25, r1
 2ae:	39 f4       	brne	.+14     	; 0x2be <BTN_getState+0xd4>
		{
			*enuBTNStatus = HELD;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	f6 01       	movw	r30, r12
 2b4:	80 83       	st	Z, r24
			u8_HeldFlag = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <u8_HeldFlag.1652>
 2bc:	21 c0       	rjmp	.+66     	; 0x300 <BTN_getState+0x116>
		}
		else if(u64_Counter < HOLD_DELAY && u64_Counter > 0 && u8_HeldFlag == 0)
 2be:	2a 2d       	mov	r18, r10
 2c0:	3b 2d       	mov	r19, r11
 2c2:	4e 2d       	mov	r20, r14
 2c4:	5f 2d       	mov	r21, r15
 2c6:	60 2f       	mov	r22, r16
 2c8:	71 2f       	mov	r23, r17
 2ca:	88 2d       	mov	r24, r8
 2cc:	99 2d       	mov	r25, r9
 2ce:	af ef       	ldi	r26, 0xFF	; 255
 2d0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__adddi3_s8>
 2d4:	2e 30       	cpi	r18, 0x0E	; 14
 2d6:	37 42       	sbci	r19, 0x27	; 39
 2d8:	41 05       	cpc	r20, r1
 2da:	51 05       	cpc	r21, r1
 2dc:	61 05       	cpc	r22, r1
 2de:	71 05       	cpc	r23, r1
 2e0:	81 05       	cpc	r24, r1
 2e2:	91 05       	cpc	r25, r1
 2e4:	09 f0       	breq	.+2      	; 0x2e8 <BTN_getState+0xfe>
 2e6:	38 f4       	brcc	.+14     	; 0x2f6 <BTN_getState+0x10c>
 2e8:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <u8_HeldFlag.1652>
 2ec:	81 11       	cpse	r24, r1
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <BTN_getState+0x10c>
		{
			*enuBTNStatus = PRESSED;
 2f0:	f6 01       	movw	r30, r12
 2f2:	10 82       	st	Z, r1
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <BTN_getState+0x116>
		}
		else
		{
			*enuBTNStatus = NOT_PRESSED;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	f6 01       	movw	r30, r12
 2fa:	80 83       	st	Z, r24
			u8_HeldFlag = 0;
 2fc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <u8_HeldFlag.1652>
		}//end else if
		u64_Counter = 0;

		return E_OK;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	01 c0       	rjmp	.+2      	; 0x306 <BTN_getState+0x11c>
{

	static uint8_t u8_HeldFlag=0;
	uint64_t u64_Counter=0;

	if(enuBTNStatus == NULL_PTR)	return E_ERROR;
 304:	80 e0       	ldi	r24, 0x00	; 0
		}//end else if
		u64_Counter = 0;

		return E_OK;
	}//end else
}//end BTN_getState
 306:	0f 90       	pop	r0
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	ef 90       	pop	r14
 314:	df 90       	pop	r13
 316:	cf 90       	pop	r12
 318:	bf 90       	pop	r11
 31a:	af 90       	pop	r10
 31c:	9f 90       	pop	r9
 31e:	8f 90       	pop	r8
 320:	7f 90       	pop	r7
 322:	08 95       	ret

00000324 <DCMotor_setDirection>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor direction
*************************************************************************************************/
enuErrorStatus_t DCMotor_setDirection(uint8_t u8_Motor, enuMotorDirection_t enuDirection)
{
	switch(enuDirection)
 324:	66 23       	and	r22, r22
 326:	19 f0       	breq	.+6      	; 0x32e <DCMotor_setDirection+0xa>
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	b9 f0       	breq	.+46     	; 0x35a <DCMotor_setDirection+0x36>
 32c:	2b c0       	rjmp	.+86     	; 0x384 <DCMotor_setDirection+0x60>
	{
	case FORWARD:

		if(u8_Motor == MOTOR1)
 32e:	81 11       	cpse	r24, r1
 330:	09 c0       	rjmp	.+18     	; 0x344 <DCMotor_setDirection+0x20>
		{
			DIO_Write(DC1_IN1, HIGH);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	87 e0       	ldi	r24, 0x07	; 7
 336:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
			DIO_Write(DC1_IN2, LOW);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	88 e0       	ldi	r24, 0x08	; 8
 33e:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
 342:	20 c0       	rjmp	.+64     	; 0x384 <DCMotor_setDirection+0x60>
		}
		else if(u8_Motor == MOTOR2)
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	f1 f4       	brne	.+60     	; 0x384 <DCMotor_setDirection+0x60>
		{
			DIO_Write(DC2_IN1, HIGH);
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
			DIO_Write(DC2_IN2, LOW);
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	8b e0       	ldi	r24, 0x0B	; 11
 354:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
 358:	15 c0       	rjmp	.+42     	; 0x384 <DCMotor_setDirection+0x60>
		}
		break;
	case BACKWARD:

		if(u8_Motor == MOTOR1)
 35a:	81 11       	cpse	r24, r1
 35c:	09 c0       	rjmp	.+18     	; 0x370 <DCMotor_setDirection+0x4c>
		{
			DIO_Write(DC1_IN1, LOW);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	87 e0       	ldi	r24, 0x07	; 7
 362:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
			DIO_Write(DC1_IN2, HIGH);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	88 e0       	ldi	r24, 0x08	; 8
 36a:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
 36e:	0a c0       	rjmp	.+20     	; 0x384 <DCMotor_setDirection+0x60>
		}
		else if(u8_Motor == MOTOR2)
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	41 f4       	brne	.+16     	; 0x384 <DCMotor_setDirection+0x60>
		{
			DIO_Write(DC2_IN1, LOW);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	8a e0       	ldi	r24, 0x0A	; 10
 378:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
			DIO_Write(DC2_IN2, HIGH);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	8b e0       	ldi	r24, 0x0B	; 11
 380:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
		}
		break;
	}//end switch
	return E_OK;
}//end DCMotor_setDirection
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	08 95       	ret

00000388 <DCMotor_setSpeed>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor speed
*************************************************************************************************/
enuErrorStatus_t DCMotor_setSpeed(uint8_t u8_Speed)
{
 388:	cf 93       	push	r28
	if(u8_Speed > 100)
 38a:	85 36       	cpi	r24, 0x65	; 101
 38c:	40 f4       	brcc	.+16     	; 0x39e <DCMotor_setSpeed+0x16>
 38e:	c8 2f       	mov	r28, r24
	{
		return E_ERROR;
	}//end if
	PWM_Init();
 390:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <PWM_Init>
	PWM_Start(u8_Speed);
 394:	8c 2f       	mov	r24, r28
 396:	0e 94 10 05 	call	0xa20	; 0xa20 <PWM_Start>

	return E_OK;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <DCMotor_setSpeed+0x18>
*************************************************************************************************/
enuErrorStatus_t DCMotor_setSpeed(uint8_t u8_Speed)
{
	if(u8_Speed > 100)
	{
		return E_ERROR;
 39e:	80 e0       	ldi	r24, 0x00	; 0
	PWM_Init();
	PWM_Start(u8_Speed);

	return E_OK;

}//end DCMotor_setSpeed
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <DCMotor_stop>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to stop the motor
*************************************************************************************************/
enuErrorStatus_t DCMotor_stop(uint8_t u8_Motor)
{
	if(u8_Motor == MOTOR1)
 3a4:	81 11       	cpse	r24, r1
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <DCMotor_stop+0x16>
	{
		DIO_Write(DC1_IN1, LOW);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	87 e0       	ldi	r24, 0x07	; 7
 3ac:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
		DIO_Write(DC1_IN2, LOW);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
 3b8:	0a c0       	rjmp	.+20     	; 0x3ce <DCMotor_stop+0x2a>
	}
	else if(u8_Motor == MOTOR2)
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	41 f4       	brne	.+16     	; 0x3ce <DCMotor_stop+0x2a>
	{
		DIO_Write(DC2_IN1, LOW);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	8a e0       	ldi	r24, 0x0A	; 10
 3c2:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
		DIO_Write(DC2_IN2, LOW);
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	8b e0       	ldi	r24, 0x0B	; 11
 3ca:	0e 94 76 03 	call	0x6ec	; 0x6ec <DIO_Write>
	}

	return E_OK;
}//end DCMotor_stop
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	08 95       	ret

000003d2 <main>:
#include "Car_Ctrl_System/CAR.h"


int main(void)
{
   App_Init();
 3d2:	0e 94 51 00 	call	0xa2	; 0xa2 <App_Init>

   while(1)
   {
      App_Update();
 3d6:	0e 94 58 00 	call	0xb0	; 0xb0 <App_Update>
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <main+0x4>

000003dc <DIO_Init>:
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	81 c1       	rjmp	.+770    	; 0x6e2 <__EEPROM_REGION_LENGTH__+0x2e2>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
 3e0:	82 2f       	mov	r24, r18
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	fc 01       	movw	r30, r24
 3e6:	ee 0f       	add	r30, r30
 3e8:	ff 1f       	adc	r31, r31
 3ea:	e8 0f       	add	r30, r24
 3ec:	f9 1f       	adc	r31, r25
 3ee:	ef 59       	subi	r30, 0x9F	; 159
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	31 81       	ldd	r19, Z+1	; 0x01
 3f4:	31 11       	cpse	r19, r1
 3f6:	58 c0       	rjmp	.+176    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
 3f8:	fc 01       	movw	r30, r24
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	e8 0f       	add	r30, r24
 400:	f9 1f       	adc	r31, r25
 402:	ef 59       	subi	r30, 0x9F	; 159
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	40 81       	ld	r20, Z
 408:	48 30       	cpi	r20, 0x08	; 8
 40a:	70 f4       	brcc	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
 40c:	3a b3       	in	r19, 0x1a	; 26
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	70 e0       	ldi	r23, 0x00	; 0
 412:	fb 01       	movw	r30, r22
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	4a 95       	dec	r20
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	af 01       	movw	r20, r30
 420:	40 95       	com	r20
 422:	43 23       	and	r20, r19
 424:	4a bb       	out	0x1a, r20	; 26
 426:	95 c0       	rjmp	.+298    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
 428:	38 ef       	ldi	r19, 0xF8	; 248
 42a:	34 0f       	add	r19, r20
 42c:	38 30       	cpi	r19, 0x08	; 8
 42e:	88 f4       	brcc	.+34     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
 430:	37 b3       	in	r19, 0x17	; 23
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	48 50       	subi	r20, 0x08	; 8
 436:	51 09       	sbc	r21, r1
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	fb 01       	movw	r30, r22
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	4a 95       	dec	r20
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	af 01       	movw	r20, r30
 44a:	40 95       	com	r20
 44c:	43 23       	and	r20, r19
 44e:	47 bb       	out	0x17, r20	; 23
 450:	80 c0       	rjmp	.+256    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
 452:	30 ef       	ldi	r19, 0xF0	; 240
 454:	34 0f       	add	r19, r20
 456:	38 30       	cpi	r19, 0x08	; 8
 458:	88 f4       	brcc	.+34     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
 45a:	34 b3       	in	r19, 0x14	; 20
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	40 51       	subi	r20, 0x10	; 16
 460:	51 09       	sbc	r21, r1
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	fb 01       	movw	r30, r22
 468:	02 c0       	rjmp	.+4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	4a 95       	dec	r20
 470:	e2 f7       	brpl	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	af 01       	movw	r20, r30
 474:	40 95       	com	r20
 476:	43 23       	and	r20, r19
 478:	44 bb       	out	0x14, r20	; 20
 47a:	6b c0       	rjmp	.+214    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
 47c:	38 ee       	ldi	r19, 0xE8	; 232
 47e:	34 0f       	add	r19, r20
 480:	38 30       	cpi	r19, 0x08	; 8
 482:	08 f0       	brcs	.+2      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 484:	66 c0       	rjmp	.+204    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
 486:	31 b3       	in	r19, 0x11	; 17
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	48 51       	subi	r20, 0x18	; 24
 48c:	51 09       	sbc	r21, r1
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	fb 01       	movw	r30, r22
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	ee 0f       	add	r30, r30
 498:	ff 1f       	adc	r31, r31
 49a:	4a 95       	dec	r20
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	af 01       	movw	r20, r30
 4a0:	40 95       	com	r20
 4a2:	43 23       	and	r20, r19
 4a4:	41 bb       	out	0x11, r20	; 17
 4a6:	55 c0       	rjmp	.+170    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
 4a8:	31 30       	cpi	r19, 0x01	; 1
 4aa:	09 f0       	breq	.+2      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4ac:	52 c0       	rjmp	.+164    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
 4ae:	fc 01       	movw	r30, r24
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	e8 0f       	add	r30, r24
 4b6:	f9 1f       	adc	r31, r25
 4b8:	ef 59       	subi	r30, 0x9F	; 159
 4ba:	ff 4f       	sbci	r31, 0xFF	; 255
 4bc:	40 81       	ld	r20, Z
 4be:	48 30       	cpi	r20, 0x08	; 8
 4c0:	68 f4       	brcc	.+26     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
 4c2:	3a b3       	in	r19, 0x1a	; 26
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	fb 01       	movw	r30, r22
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	4a 95       	dec	r20
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d4:	af 01       	movw	r20, r30
 4d6:	43 2b       	or	r20, r19
 4d8:	4a bb       	out	0x1a, r20	; 26
 4da:	3b c0       	rjmp	.+118    	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
 4dc:	38 ef       	ldi	r19, 0xF8	; 248
 4de:	34 0f       	add	r19, r20
 4e0:	38 30       	cpi	r19, 0x08	; 8
 4e2:	80 f4       	brcc	.+32     	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
 4e4:	37 b3       	in	r19, 0x17	; 23
 4e6:	50 e0       	ldi	r21, 0x00	; 0
 4e8:	48 50       	subi	r20, 0x08	; 8
 4ea:	51 09       	sbc	r21, r1
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	fb 01       	movw	r30, r22
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	4a 95       	dec	r20
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4fc:	af 01       	movw	r20, r30
 4fe:	43 2b       	or	r20, r19
 500:	47 bb       	out	0x17, r20	; 23
 502:	27 c0       	rjmp	.+78     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
 504:	30 ef       	ldi	r19, 0xF0	; 240
 506:	34 0f       	add	r19, r20
 508:	38 30       	cpi	r19, 0x08	; 8
 50a:	80 f4       	brcc	.+32     	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
 50c:	34 b3       	in	r19, 0x14	; 20
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	40 51       	subi	r20, 0x10	; 16
 512:	51 09       	sbc	r21, r1
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	fb 01       	movw	r30, r22
 51a:	02 c0       	rjmp	.+4      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	4a 95       	dec	r20
 522:	e2 f7       	brpl	.-8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 524:	af 01       	movw	r20, r30
 526:	43 2b       	or	r20, r19
 528:	44 bb       	out	0x14, r20	; 20
 52a:	13 c0       	rjmp	.+38     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
 52c:	38 ee       	ldi	r19, 0xE8	; 232
 52e:	34 0f       	add	r19, r20
 530:	38 30       	cpi	r19, 0x08	; 8
 532:	78 f4       	brcc	.+30     	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
 534:	31 b3       	in	r19, 0x11	; 17
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	48 51       	subi	r20, 0x18	; 24
 53a:	51 09       	sbc	r21, r1
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	fb 01       	movw	r30, r22
 542:	02 c0       	rjmp	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	4a 95       	dec	r20
 54a:	e2 f7       	brpl	.-8      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 54c:	af 01       	movw	r20, r30
 54e:	43 2b       	or	r20, r19
 550:	41 bb       	out	0x11, r20	; 17
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
 552:	fc 01       	movw	r30, r24
 554:	ee 0f       	add	r30, r30
 556:	ff 1f       	adc	r31, r31
 558:	e8 0f       	add	r30, r24
 55a:	f9 1f       	adc	r31, r25
 55c:	ef 59       	subi	r30, 0x9F	; 159
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
 560:	31 81       	ldd	r19, Z+1	; 0x01
 562:	31 11       	cpse	r19, r1
 564:	60 c0       	rjmp	.+192    	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
 566:	fc 01       	movw	r30, r24
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	e8 0f       	add	r30, r24
 56e:	f9 1f       	adc	r31, r25
 570:	ef 59       	subi	r30, 0x9F	; 159
 572:	ff 4f       	sbci	r31, 0xFF	; 255
 574:	42 81       	ldd	r20, Z+2	; 0x02
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
 576:	41 11       	cpse	r20, r1
 578:	56 c0       	rjmp	.+172    	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
 57a:	fc 01       	movw	r30, r24
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	8e 0f       	add	r24, r30
 582:	9f 1f       	adc	r25, r31
 584:	fc 01       	movw	r30, r24
 586:	ef 59       	subi	r30, 0x9F	; 159
 588:	ff 4f       	sbci	r31, 0xFF	; 255
 58a:	80 81       	ld	r24, Z
 58c:	88 30       	cpi	r24, 0x08	; 8
 58e:	70 f4       	brcc	.+28     	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
 590:	3b b3       	in	r19, 0x1b	; 27
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	ba 01       	movw	r22, r20
 598:	02 c0       	rjmp	.+4      	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 5a2:	cb 01       	movw	r24, r22
 5a4:	80 95       	com	r24
 5a6:	83 23       	and	r24, r19
 5a8:	8b bb       	out	0x1b, r24	; 27
 5aa:	9a c0       	rjmp	.+308    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
 5ac:	98 ef       	ldi	r25, 0xF8	; 248
 5ae:	98 0f       	add	r25, r24
 5b0:	98 30       	cpi	r25, 0x08	; 8
 5b2:	80 f4       	brcc	.+32     	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
 5b4:	38 b3       	in	r19, 0x18	; 24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	08 97       	sbiw	r24, 0x08	; 8
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	fa 01       	movw	r30, r20
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	8a 95       	dec	r24
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
 5ca:	cf 01       	movw	r24, r30
 5cc:	80 95       	com	r24
 5ce:	83 23       	and	r24, r19
 5d0:	88 bb       	out	0x18, r24	; 24
 5d2:	86 c0       	rjmp	.+268    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
 5d4:	90 ef       	ldi	r25, 0xF0	; 240
 5d6:	98 0f       	add	r25, r24
 5d8:	98 30       	cpi	r25, 0x08	; 8
 5da:	80 f4       	brcc	.+32     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
 5dc:	35 b3       	in	r19, 0x15	; 21
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	40 97       	sbiw	r24, 0x10	; 16
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	ba 01       	movw	r22, r20
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
 5f2:	cb 01       	movw	r24, r22
 5f4:	80 95       	com	r24
 5f6:	83 23       	and	r24, r19
 5f8:	85 bb       	out	0x15, r24	; 21
 5fa:	72 c0       	rjmp	.+228    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
 5fc:	98 ee       	ldi	r25, 0xE8	; 232
 5fe:	98 0f       	add	r25, r24
 600:	98 30       	cpi	r25, 0x08	; 8
 602:	08 f0       	brcs	.+2      	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 604:	6d c0       	rjmp	.+218    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
 606:	32 b3       	in	r19, 0x12	; 18
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	48 97       	sbiw	r24, 0x18	; 24
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	50 e0       	ldi	r21, 0x00	; 0
 610:	fa 01       	movw	r30, r20
 612:	02 c0       	rjmp	.+4      	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	8a 95       	dec	r24
 61a:	e2 f7       	brpl	.-8      	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
 61c:	cf 01       	movw	r24, r30
 61e:	80 95       	com	r24
 620:	83 23       	and	r24, r19
 622:	82 bb       	out	0x12, r24	; 18
 624:	5d c0       	rjmp	.+186    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
 626:	31 11       	cpse	r19, r1
 628:	5b c0       	rjmp	.+182    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
 62a:	fc 01       	movw	r30, r24
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	e8 0f       	add	r30, r24
 632:	f9 1f       	adc	r31, r25
 634:	ef 59       	subi	r30, 0x9F	; 159
 636:	ff 4f       	sbci	r31, 0xFF	; 255
 638:	32 81       	ldd	r19, Z+2	; 0x02
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
 63a:	31 30       	cpi	r19, 0x01	; 1
 63c:	09 f0       	breq	.+2      	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
 63e:	50 c0       	rjmp	.+160    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
 640:	fc 01       	movw	r30, r24
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	8e 0f       	add	r24, r30
 648:	9f 1f       	adc	r25, r31
 64a:	fc 01       	movw	r30, r24
 64c:	ef 59       	subi	r30, 0x9F	; 159
 64e:	ff 4f       	sbci	r31, 0xFF	; 255
 650:	80 81       	ld	r24, Z
 652:	88 30       	cpi	r24, 0x08	; 8
 654:	68 f4       	brcc	.+26     	; 0x670 <__EEPROM_REGION_LENGTH__+0x270>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
 656:	3b b3       	in	r19, 0x1b	; 27
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	ba 01       	movw	r22, r20
 65e:	02 c0       	rjmp	.+4      	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	8a 95       	dec	r24
 666:	e2 f7       	brpl	.-8      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
 668:	cb 01       	movw	r24, r22
 66a:	83 2b       	or	r24, r19
 66c:	8b bb       	out	0x1b, r24	; 27
 66e:	38 c0       	rjmp	.+112    	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
 670:	98 ef       	ldi	r25, 0xF8	; 248
 672:	98 0f       	add	r25, r24
 674:	98 30       	cpi	r25, 0x08	; 8
 676:	78 f4       	brcc	.+30     	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
 678:	38 b3       	in	r19, 0x18	; 24
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	08 97       	sbiw	r24, 0x08	; 8
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	fa 01       	movw	r30, r20
 684:	02 c0       	rjmp	.+4      	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 686:	ee 0f       	add	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	8a 95       	dec	r24
 68c:	e2 f7       	brpl	.-8      	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 68e:	cf 01       	movw	r24, r30
 690:	83 2b       	or	r24, r19
 692:	88 bb       	out	0x18, r24	; 24
 694:	25 c0       	rjmp	.+74     	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
 696:	90 ef       	ldi	r25, 0xF0	; 240
 698:	98 0f       	add	r25, r24
 69a:	98 30       	cpi	r25, 0x08	; 8
 69c:	78 f4       	brcc	.+30     	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
 69e:	35 b3       	in	r19, 0x15	; 21
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	40 97       	sbiw	r24, 0x10	; 16
 6a4:	41 e0       	ldi	r20, 0x01	; 1
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	ba 01       	movw	r22, r20
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <__EEPROM_REGION_LENGTH__+0x2b0>
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	8a 95       	dec	r24
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
 6b4:	cb 01       	movw	r24, r22
 6b6:	83 2b       	or	r24, r19
 6b8:	85 bb       	out	0x15, r24	; 21
 6ba:	12 c0       	rjmp	.+36     	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
 6bc:	98 ee       	ldi	r25, 0xE8	; 232
 6be:	98 0f       	add	r25, r24
 6c0:	98 30       	cpi	r25, 0x08	; 8
 6c2:	70 f4       	brcc	.+28     	; 0x6e0 <__EEPROM_REGION_LENGTH__+0x2e0>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
 6c4:	32 b3       	in	r19, 0x12	; 18
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	48 97       	sbiw	r24, 0x18	; 24
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	fa 01       	movw	r30, r20
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <__EEPROM_REGION_LENGTH__+0x2d6>
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	8a 95       	dec	r24
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
 6da:	cf 01       	movw	r24, r30
 6dc:	83 2b       	or	r24, r19
 6de:	82 bb       	out	0x12, r24	; 18
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
 6e0:	2f 5f       	subi	r18, 0xFF	; 255
 6e2:	2f 30       	cpi	r18, 0x0F	; 15
 6e4:	08 f4       	brcc	.+2      	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 6e6:	7c ce       	rjmp	.-776    	; 0x3e0 <DIO_Init+0x4>
			}//end else if
		}//end else if

	}//end for
    return E_OK;
}//end DIO_Init
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	08 95       	ret

000006ec <DIO_Write>:
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
 6ec:	61 11       	cpse	r22, r1
 6ee:	57 c0       	rjmp	.+174    	; 0x79e <DIO_Write+0xb2>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	fc 01       	movw	r30, r24
 6f4:	ee 0f       	add	r30, r30
 6f6:	ff 1f       	adc	r31, r31
 6f8:	8e 0f       	add	r24, r30
 6fa:	9f 1f       	adc	r25, r31
 6fc:	fc 01       	movw	r30, r24
 6fe:	ef 59       	subi	r30, 0x9F	; 159
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	80 81       	ld	r24, Z
 704:	88 30       	cpi	r24, 0x08	; 8
 706:	70 f4       	brcc	.+28     	; 0x724 <DIO_Write+0x38>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
 708:	4b b3       	in	r20, 0x1b	; 27
 70a:	21 e0       	ldi	r18, 0x01	; 1
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	b9 01       	movw	r22, r18
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_Write+0x2a>
 712:	66 0f       	add	r22, r22
 714:	77 1f       	adc	r23, r23
 716:	8a 95       	dec	r24
 718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_Write+0x26>
 71a:	cb 01       	movw	r24, r22
 71c:	80 95       	com	r24
 71e:	84 23       	and	r24, r20
 720:	8b bb       	out	0x1b, r24	; 27
 722:	91 c0       	rjmp	.+290    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
 724:	98 ef       	ldi	r25, 0xF8	; 248
 726:	98 0f       	add	r25, r24
 728:	98 30       	cpi	r25, 0x08	; 8
 72a:	80 f4       	brcc	.+32     	; 0x74c <DIO_Write+0x60>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
 72c:	48 b3       	in	r20, 0x18	; 24
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	08 97       	sbiw	r24, 0x08	; 8
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	b9 01       	movw	r22, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_Write+0x52>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	8a 95       	dec	r24
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_Write+0x4e>
 742:	cb 01       	movw	r24, r22
 744:	80 95       	com	r24
 746:	84 23       	and	r24, r20
 748:	88 bb       	out	0x18, r24	; 24
 74a:	7d c0       	rjmp	.+250    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
 74c:	90 ef       	ldi	r25, 0xF0	; 240
 74e:	98 0f       	add	r25, r24
 750:	98 30       	cpi	r25, 0x08	; 8
 752:	80 f4       	brcc	.+32     	; 0x774 <DIO_Write+0x88>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
 754:	45 b3       	in	r20, 0x15	; 21
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	40 97       	sbiw	r24, 0x10	; 16
 75a:	21 e0       	ldi	r18, 0x01	; 1
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	b9 01       	movw	r22, r18
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_Write+0x7a>
 762:	66 0f       	add	r22, r22
 764:	77 1f       	adc	r23, r23
 766:	8a 95       	dec	r24
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_Write+0x76>
 76a:	cb 01       	movw	r24, r22
 76c:	80 95       	com	r24
 76e:	84 23       	and	r24, r20
 770:	85 bb       	out	0x15, r24	; 21
 772:	69 c0       	rjmp	.+210    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
 774:	98 ee       	ldi	r25, 0xE8	; 232
 776:	98 0f       	add	r25, r24
 778:	98 30       	cpi	r25, 0x08	; 8
 77a:	08 f0       	brcs	.+2      	; 0x77e <DIO_Write+0x92>
 77c:	64 c0       	rjmp	.+200    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
 77e:	42 b3       	in	r20, 0x12	; 18
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	48 97       	sbiw	r24, 0x18	; 24
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	b9 01       	movw	r22, r18
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_Write+0xa4>
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	8a 95       	dec	r24
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_Write+0xa0>
 794:	cb 01       	movw	r24, r22
 796:	80 95       	com	r24
 798:	84 23       	and	r24, r20
 79a:	82 bb       	out	0x12, r24	; 18
 79c:	54 c0       	rjmp	.+168    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
 79e:	61 30       	cpi	r22, 0x01	; 1
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <DIO_Write+0xb8>
 7a2:	51 c0       	rjmp	.+162    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	fc 01       	movw	r30, r24
 7a8:	ee 0f       	add	r30, r30
 7aa:	ff 1f       	adc	r31, r31
 7ac:	8e 0f       	add	r24, r30
 7ae:	9f 1f       	adc	r25, r31
 7b0:	fc 01       	movw	r30, r24
 7b2:	ef 59       	subi	r30, 0x9F	; 159
 7b4:	ff 4f       	sbci	r31, 0xFF	; 255
 7b6:	80 81       	ld	r24, Z
 7b8:	88 30       	cpi	r24, 0x08	; 8
 7ba:	68 f4       	brcc	.+26     	; 0x7d6 <DIO_Write+0xea>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
 7bc:	4b b3       	in	r20, 0x1b	; 27
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	b9 01       	movw	r22, r18
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <DIO_Write+0xde>
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	8a 95       	dec	r24
 7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <DIO_Write+0xda>
 7ce:	cb 01       	movw	r24, r22
 7d0:	84 2b       	or	r24, r20
 7d2:	8b bb       	out	0x1b, r24	; 27
 7d4:	38 c0       	rjmp	.+112    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
 7d6:	98 ef       	ldi	r25, 0xF8	; 248
 7d8:	98 0f       	add	r25, r24
 7da:	98 30       	cpi	r25, 0x08	; 8
 7dc:	78 f4       	brcc	.+30     	; 0x7fc <DIO_Write+0x110>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
 7de:	48 b3       	in	r20, 0x18	; 24
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	08 97       	sbiw	r24, 0x08	; 8
 7e4:	21 e0       	ldi	r18, 0x01	; 1
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	b9 01       	movw	r22, r18
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_Write+0x104>
 7ec:	66 0f       	add	r22, r22
 7ee:	77 1f       	adc	r23, r23
 7f0:	8a 95       	dec	r24
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_Write+0x100>
 7f4:	cb 01       	movw	r24, r22
 7f6:	84 2b       	or	r24, r20
 7f8:	88 bb       	out	0x18, r24	; 24
 7fa:	25 c0       	rjmp	.+74     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
 7fc:	90 ef       	ldi	r25, 0xF0	; 240
 7fe:	98 0f       	add	r25, r24
 800:	98 30       	cpi	r25, 0x08	; 8
 802:	78 f4       	brcc	.+30     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
 804:	45 b3       	in	r20, 0x15	; 21
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	40 97       	sbiw	r24, 0x10	; 16
 80a:	21 e0       	ldi	r18, 0x01	; 1
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	b9 01       	movw	r22, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	66 0f       	add	r22, r22
 814:	77 1f       	adc	r23, r23
 816:	8a 95       	dec	r24
 818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	cb 01       	movw	r24, r22
 81c:	84 2b       	or	r24, r20
 81e:	85 bb       	out	0x15, r24	; 21
 820:	12 c0       	rjmp	.+36     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
 822:	98 ee       	ldi	r25, 0xE8	; 232
 824:	98 0f       	add	r25, r24
 826:	98 30       	cpi	r25, 0x08	; 8
 828:	70 f4       	brcc	.+28     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
 82a:	42 b3       	in	r20, 0x12	; 18
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	48 97       	sbiw	r24, 0x18	; 24
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	b9 01       	movw	r22, r18
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	66 0f       	add	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	8a 95       	dec	r24
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	cb 01       	movw	r24, r22
 842:	84 2b       	or	r24, r20
 844:	82 bb       	out	0x12, r24	; 18
			}//end else if
	    }//end else if
		return E_OK;
}//end DIO_write
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	08 95       	ret

0000084a <DIO_Read>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
	if(pu8_Data == NULL_PTR)		return E_ERROR;
 84a:	61 15       	cp	r22, r1
 84c:	71 05       	cpc	r23, r1
 84e:	09 f4       	brne	.+2      	; 0x852 <DIO_Read+0x8>
 850:	5a c0       	rjmp	.+180    	; 0x906 <__stack+0xa7>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	fc 01       	movw	r30, r24
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	8e 0f       	add	r24, r30
 85c:	9f 1f       	adc	r25, r31
 85e:	fc 01       	movw	r30, r24
 860:	ef 59       	subi	r30, 0x9F	; 159
 862:	ff 4f       	sbci	r31, 0xFF	; 255
 864:	80 81       	ld	r24, Z
 866:	88 30       	cpi	r24, 0x08	; 8
 868:	78 f4       	brcc	.+30     	; 0x888 <__stack+0x29>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
 86a:	49 b3       	in	r20, 0x19	; 25
 86c:	21 e0       	ldi	r18, 0x01	; 1
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	f9 01       	movw	r30, r18
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	ee 0f       	add	r30, r30
 876:	ff 1f       	adc	r31, r31
 878:	8a 95       	dec	r24
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	cf 01       	movw	r24, r30
 87e:	84 23       	and	r24, r20
 880:	fb 01       	movw	r30, r22
 882:	80 83       	st	Z, r24
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
		}//end else if

		return E_OK;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	08 95       	ret
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
 888:	98 ef       	ldi	r25, 0xF8	; 248
 88a:	98 0f       	add	r25, r24
 88c:	98 30       	cpi	r25, 0x08	; 8
 88e:	88 f4       	brcc	.+34     	; 0x8b2 <__stack+0x53>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
 890:	46 b3       	in	r20, 0x16	; 22
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	08 97       	sbiw	r24, 0x08	; 8
 896:	21 e0       	ldi	r18, 0x01	; 1
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	f9 01       	movw	r30, r18
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
 89e:	ee 0f       	add	r30, r30
 8a0:	ff 1f       	adc	r31, r31
 8a2:	8a 95       	dec	r24
 8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
 8a6:	cf 01       	movw	r24, r30
 8a8:	84 23       	and	r24, r20
 8aa:	fb 01       	movw	r30, r22
 8ac:	80 83       	st	Z, r24
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
		}//end else if

		return E_OK;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
 8b2:	90 ef       	ldi	r25, 0xF0	; 240
 8b4:	98 0f       	add	r25, r24
 8b6:	98 30       	cpi	r25, 0x08	; 8
 8b8:	88 f4       	brcc	.+34     	; 0x8dc <__stack+0x7d>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
 8ba:	43 b3       	in	r20, 0x13	; 19
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	40 97       	sbiw	r24, 0x10	; 16
 8c0:	21 e0       	ldi	r18, 0x01	; 1
 8c2:	30 e0       	ldi	r19, 0x00	; 0
 8c4:	f9 01       	movw	r30, r18
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	ee 0f       	add	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	8a 95       	dec	r24
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	cf 01       	movw	r24, r30
 8d2:	84 23       	and	r24, r20
 8d4:	fb 01       	movw	r30, r22
 8d6:	80 83       	st	Z, r24
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
		}//end else if

		return E_OK;
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	08 95       	ret
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
 8dc:	98 ee       	ldi	r25, 0xE8	; 232
 8de:	98 0f       	add	r25, r24
 8e0:	98 30       	cpi	r25, 0x08	; 8
 8e2:	98 f4       	brcc	.+38     	; 0x90a <__stack+0xab>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
 8e4:	40 b3       	in	r20, 0x10	; 16
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	48 97       	sbiw	r24, 0x18	; 24
 8ea:	21 e0       	ldi	r18, 0x01	; 1
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	f9 01       	movw	r30, r18
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__stack+0x97>
 8f2:	ee 0f       	add	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	8a 95       	dec	r24
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__stack+0x93>
 8fa:	cf 01       	movw	r24, r30
 8fc:	84 23       	and	r24, r20
 8fe:	fb 01       	movw	r30, r22
 900:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	08 95       	ret
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
	if(pu8_Data == NULL_PTR)		return E_ERROR;
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	08 95       	ret
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
		}//end else if

		return E_OK;
 90a:	81 e0       	ldi	r24, 0x01	; 1
	}//end else
}//end DIO_Read
 90c:	08 95       	ret

0000090e <setPrescaler>:
}//end PWM_Init

//private function to set prescaler
static void setPrescaler(void)
{
	switch(strpwmConfig.enuPWMPrescal)
 90e:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <strpwmConfig+0x2>
 912:	8e 2f       	mov	r24, r30
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	88 30       	cpi	r24, 0x08	; 8
 918:	91 05       	cpc	r25, r1
 91a:	08 f0       	brcs	.+2      	; 0x91e <setPrescaler+0x10>
 91c:	54 c0       	rjmp	.+168    	; 0x9c6 <setPrescaler+0xb8>
 91e:	fc 01       	movw	r30, r24
 920:	e6 5d       	subi	r30, 0xD6	; 214
 922:	ff 4f       	sbci	r31, 0xFF	; 255
 924:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__tablejump2__>
	{
	case NO_CLOCK:
		CLR_BIT(TCCR0_R, CS00_BIT);
 928:	83 b7       	in	r24, 0x33	; 51
 92a:	8e 7f       	andi	r24, 0xFE	; 254
 92c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS01_BIT);
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	8d 7f       	andi	r24, 0xFD	; 253
 932:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS02_BIT);
 934:	83 b7       	in	r24, 0x33	; 51
 936:	8b 7f       	andi	r24, 0xFB	; 251
 938:	83 bf       	out	0x33, r24	; 51
		break;
 93a:	08 95       	ret
	case NO_PRESCALER:
		SET_BIT(TCCR0_R, CS00_BIT);
 93c:	83 b7       	in	r24, 0x33	; 51
 93e:	81 60       	ori	r24, 0x01	; 1
 940:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS01_BIT);
 942:	83 b7       	in	r24, 0x33	; 51
 944:	8d 7f       	andi	r24, 0xFD	; 253
 946:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS02_BIT);
 948:	83 b7       	in	r24, 0x33	; 51
 94a:	8b 7f       	andi	r24, 0xFB	; 251
 94c:	83 bf       	out	0x33, r24	; 51
		break;
 94e:	08 95       	ret
	case PRESCALER_8:
		CLR_BIT(TCCR0_R, CS00_BIT);
 950:	83 b7       	in	r24, 0x33	; 51
 952:	8e 7f       	andi	r24, 0xFE	; 254
 954:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS01_BIT);
 956:	83 b7       	in	r24, 0x33	; 51
 958:	82 60       	ori	r24, 0x02	; 2
 95a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS02_BIT);
 95c:	83 b7       	in	r24, 0x33	; 51
 95e:	8b 7f       	andi	r24, 0xFB	; 251
 960:	83 bf       	out	0x33, r24	; 51
		break;
 962:	08 95       	ret
	case PRESCALER_64:
		SET_BIT(TCCR0_R, CS00_BIT);
 964:	83 b7       	in	r24, 0x33	; 51
 966:	81 60       	ori	r24, 0x01	; 1
 968:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS01_BIT);
 96a:	83 b7       	in	r24, 0x33	; 51
 96c:	82 60       	ori	r24, 0x02	; 2
 96e:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS02_BIT);
 970:	83 b7       	in	r24, 0x33	; 51
 972:	8b 7f       	andi	r24, 0xFB	; 251
 974:	83 bf       	out	0x33, r24	; 51
		break;
 976:	08 95       	ret
	case PRESCALER_256:
		CLR_BIT(TCCR0_R, CS00_BIT);
 978:	83 b7       	in	r24, 0x33	; 51
 97a:	8e 7f       	andi	r24, 0xFE	; 254
 97c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS01_BIT);
 97e:	83 b7       	in	r24, 0x33	; 51
 980:	8d 7f       	andi	r24, 0xFD	; 253
 982:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS02_BIT);
 984:	83 b7       	in	r24, 0x33	; 51
 986:	84 60       	ori	r24, 0x04	; 4
 988:	83 bf       	out	0x33, r24	; 51
		break;
 98a:	08 95       	ret
	case PRESCALER_1024:
		SET_BIT(TCCR0_R, CS00_BIT);
 98c:	83 b7       	in	r24, 0x33	; 51
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_R, CS01_BIT);
 992:	83 b7       	in	r24, 0x33	; 51
 994:	8d 7f       	andi	r24, 0xFD	; 253
 996:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS02_BIT);
 998:	83 b7       	in	r24, 0x33	; 51
 99a:	84 60       	ori	r24, 0x04	; 4
 99c:	83 bf       	out	0x33, r24	; 51
		break;
 99e:	08 95       	ret
	case EXTERNAL_CLOCK_FALL_EDGE:
		CLR_BIT(TCCR0_R, CS00_BIT);
 9a0:	83 b7       	in	r24, 0x33	; 51
 9a2:	8e 7f       	andi	r24, 0xFE	; 254
 9a4:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS01_BIT);
 9a6:	83 b7       	in	r24, 0x33	; 51
 9a8:	82 60       	ori	r24, 0x02	; 2
 9aa:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS02_BIT);
 9ac:	83 b7       	in	r24, 0x33	; 51
 9ae:	84 60       	ori	r24, 0x04	; 4
 9b0:	83 bf       	out	0x33, r24	; 51
		break;
 9b2:	08 95       	ret
	case EXTERNAL_CLOCK_RISE_EDGE:
		SET_BIT(TCCR0_R, CS00_BIT);
 9b4:	83 b7       	in	r24, 0x33	; 51
 9b6:	81 60       	ori	r24, 0x01	; 1
 9b8:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS01_BIT);
 9ba:	83 b7       	in	r24, 0x33	; 51
 9bc:	82 60       	ori	r24, 0x02	; 2
 9be:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_R, CS02_BIT);
 9c0:	83 b7       	in	r24, 0x33	; 51
 9c2:	84 60       	ori	r24, 0x04	; 4
 9c4:	83 bf       	out	0x33, r24	; 51
 9c6:	08 95       	ret

000009c8 <PWM_Init>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the PWM
*************************************************************************************************/
enuErrorStatus_t PWM_Init(void)
{
	if(strpwmConfig.enuTimer == TIMER0)
 9c8:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <strpwmConfig>
 9cc:	81 11       	cpse	r24, r1
 9ce:	26 c0       	rjmp	.+76     	; 0xa1c <PWM_Init+0x54>
	{
		//Select PWM mode
		if(strpwmConfig.enuPWMMode == FAST_PWM)
 9d0:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <strpwmConfig+0x1>
 9d4:	81 11       	cpse	r24, r1
 9d6:	07 c0       	rjmp	.+14     	; 0x9e6 <PWM_Init+0x1e>
		{
			SET_BIT(TCCR0_R, WGM00_BIT);
 9d8:	83 b7       	in	r24, 0x33	; 51
 9da:	80 64       	ori	r24, 0x40	; 64
 9dc:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0_R, WGM01_BIT);
 9de:	83 b7       	in	r24, 0x33	; 51
 9e0:	88 60       	ori	r24, 0x08	; 8
 9e2:	83 bf       	out	0x33, r24	; 51
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <PWM_Init+0x2e>
		}
		else if(strpwmConfig.enuPWMMode == PC_PWM)
 9e6:	81 30       	cpi	r24, 0x01	; 1
 9e8:	31 f4       	brne	.+12     	; 0x9f6 <PWM_Init+0x2e>
		{
			SET_BIT(TCCR0_R, WGM00_BIT);
 9ea:	83 b7       	in	r24, 0x33	; 51
 9ec:	80 64       	ori	r24, 0x40	; 64
 9ee:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0_R, WGM01_BIT);
 9f0:	83 b7       	in	r24, 0x33	; 51
 9f2:	87 7f       	andi	r24, 0xF7	; 247
 9f4:	83 bf       	out	0x33, r24	; 51
		}//end else if

		//select OC0 mode
		if(strpwmConfig.enuOCMode == NON_INVERTING)
 9f6:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <strpwmConfig+0x4>
 9fa:	81 11       	cpse	r24, r1
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <PWM_Init+0x44>
		{
			CLR_BIT(TCCR0_R, COM00_BIT);
 9fe:	83 b7       	in	r24, 0x33	; 51
 a00:	8f 7e       	andi	r24, 0xEF	; 239
 a02:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0_R, COM01_BIT);
 a04:	83 b7       	in	r24, 0x33	; 51
 a06:	80 62       	ori	r24, 0x20	; 32
 a08:	83 bf       	out	0x33, r24	; 51
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <PWM_Init+0x54>
		}//end if
		else if(strpwmConfig.enuOCMode == INVERTING)
 a0c:	81 30       	cpi	r24, 0x01	; 1
 a0e:	31 f4       	brne	.+12     	; 0xa1c <PWM_Init+0x54>
		{
			SET_BIT(TCCR0_R, COM00_BIT);
 a10:	83 b7       	in	r24, 0x33	; 51
 a12:	80 61       	ori	r24, 0x10	; 16
 a14:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0_R, COM01_BIT);
 a16:	83 b7       	in	r24, 0x33	; 51
 a18:	80 62       	ori	r24, 0x20	; 32
 a1a:	83 bf       	out	0x33, r24	; 51
		}//end else if
	}//end if for timer0

	return E_OK;
}//end PWM_Init
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	08 95       	ret

00000a20 <PWM_Start>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to start generating PWM wave
*************************************************************************************************/
enuErrorStatus_t PWM_Start(uint8_t u8_Duty)
{
	switch(strpwmConfig.enuOCMode)
 a20:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <strpwmConfig+0x4>
 a24:	99 23       	and	r25, r25
 a26:	19 f0       	breq	.+6      	; 0xa2e <PWM_Start+0xe>
 a28:	91 30       	cpi	r25, 0x01	; 1
 a2a:	59 f0       	breq	.+22     	; 0xa42 <PWM_Start+0x22>
 a2c:	12 c0       	rjmp	.+36     	; 0xa52 <PWM_Start+0x32>
    {
    case NON_INVERTING:
        OCR0_R = ((u8_Duty *255)/100);
 a2e:	2f ef       	ldi	r18, 0xFF	; 255
 a30:	82 9f       	mul	r24, r18
 a32:	c0 01       	movw	r24, r0
 a34:	11 24       	eor	r1, r1
 a36:	64 e6       	ldi	r22, 0x64	; 100
 a38:	70 e0       	ldi	r23, 0x00	; 0
 a3a:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divmodhi4>
 a3e:	6c bf       	out	0x3c, r22	; 60
        break;
 a40:	08 c0       	rjmp	.+16     	; 0xa52 <PWM_Start+0x32>
    case INVERTING:
        OCR0_R = 255 - ((256 * u8_Duty)/100);
 a42:	98 2f       	mov	r25, r24
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	64 e6       	ldi	r22, 0x64	; 100
 a48:	70 e0       	ldi	r23, 0x00	; 0
 a4a:	0e 94 35 05 	call	0xa6a	; 0xa6a <__divmodhi4>
 a4e:	60 95       	com	r22
 a50:	6c bf       	out	0x3c, r22	; 60
    break;
    }
    setPrescaler();
 a52:	0e 94 87 04 	call	0x90e	; 0x90e <setPrescaler>
	return E_OK;
}//end PWM_Start
 a56:	81 e0       	ldi	r24, 0x01	; 1
 a58:	08 95       	ret

00000a5a <PWM_Stop>:
enuErrorStatus_t PWM_Stop(void)
{
//	CLR_BIT(TCCR0_R, CS00_BIT);
//	CLR_BIT(TCCR0_R, CS01_BIT);
//	CLR_BIT(TCCR0_R, CS02_BIT);
	CLR_BIT(TCCR0_R, COM00_BIT);
 a5a:	83 b7       	in	r24, 0x33	; 51
 a5c:	8f 7e       	andi	r24, 0xEF	; 239
 a5e:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0_R, COM01_BIT);
 a60:	83 b7       	in	r24, 0x33	; 51
 a62:	8f 7d       	andi	r24, 0xDF	; 223
 a64:	83 bf       	out	0x33, r24	; 51
	return E_OK;
}//end PWM_Stop
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	08 95       	ret

00000a6a <__divmodhi4>:
 a6a:	97 fb       	bst	r25, 7
 a6c:	07 2e       	mov	r0, r23
 a6e:	16 f4       	brtc	.+4      	; 0xa74 <__divmodhi4+0xa>
 a70:	00 94       	com	r0
 a72:	07 d0       	rcall	.+14     	; 0xa82 <__divmodhi4_neg1>
 a74:	77 fd       	sbrc	r23, 7
 a76:	09 d0       	rcall	.+18     	; 0xa8a <__divmodhi4_neg2>
 a78:	0e 94 5b 05 	call	0xab6	; 0xab6 <__udivmodhi4>
 a7c:	07 fc       	sbrc	r0, 7
 a7e:	05 d0       	rcall	.+10     	; 0xa8a <__divmodhi4_neg2>
 a80:	3e f4       	brtc	.+14     	; 0xa90 <__divmodhi4_exit>

00000a82 <__divmodhi4_neg1>:
 a82:	90 95       	com	r25
 a84:	81 95       	neg	r24
 a86:	9f 4f       	sbci	r25, 0xFF	; 255
 a88:	08 95       	ret

00000a8a <__divmodhi4_neg2>:
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000a90 <__divmodhi4_exit>:
 a90:	08 95       	ret

00000a92 <__tablejump2__>:
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	05 90       	lpm	r0, Z+
 a98:	f4 91       	lpm	r31, Z
 a9a:	e0 2d       	mov	r30, r0
 a9c:	09 94       	ijmp

00000a9e <__adddi3_s8>:
 a9e:	00 24       	eor	r0, r0
 aa0:	a7 fd       	sbrc	r26, 7
 aa2:	00 94       	com	r0
 aa4:	2a 0f       	add	r18, r26
 aa6:	30 1d       	adc	r19, r0
 aa8:	40 1d       	adc	r20, r0
 aaa:	50 1d       	adc	r21, r0
 aac:	60 1d       	adc	r22, r0
 aae:	70 1d       	adc	r23, r0
 ab0:	80 1d       	adc	r24, r0
 ab2:	90 1d       	adc	r25, r0
 ab4:	08 95       	ret

00000ab6 <__udivmodhi4>:
 ab6:	aa 1b       	sub	r26, r26
 ab8:	bb 1b       	sub	r27, r27
 aba:	51 e1       	ldi	r21, 0x11	; 17
 abc:	07 c0       	rjmp	.+14     	; 0xacc <__udivmodhi4_ep>

00000abe <__udivmodhi4_loop>:
 abe:	aa 1f       	adc	r26, r26
 ac0:	bb 1f       	adc	r27, r27
 ac2:	a6 17       	cp	r26, r22
 ac4:	b7 07       	cpc	r27, r23
 ac6:	10 f0       	brcs	.+4      	; 0xacc <__udivmodhi4_ep>
 ac8:	a6 1b       	sub	r26, r22
 aca:	b7 0b       	sbc	r27, r23

00000acc <__udivmodhi4_ep>:
 acc:	88 1f       	adc	r24, r24
 ace:	99 1f       	adc	r25, r25
 ad0:	5a 95       	dec	r21
 ad2:	a9 f7       	brne	.-22     	; 0xabe <__udivmodhi4_loop>
 ad4:	80 95       	com	r24
 ad6:	90 95       	com	r25
 ad8:	bc 01       	movw	r22, r24
 ada:	cd 01       	movw	r24, r26
 adc:	08 95       	ret

00000ade <_exit>:
 ade:	f8 94       	cli

00000ae0 <__stop_program>:
 ae0:	ff cf       	rjmp	.-2      	; 0xae0 <__stop_program>
