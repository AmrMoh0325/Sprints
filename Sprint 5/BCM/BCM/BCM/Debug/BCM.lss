
BCM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000bfe  00000c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800064  00800064  00000c96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001854  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b38  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de0  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00004050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000921  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4f  00000000  00000000  00004d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000057ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 02 	call	0x4d2	; 0x4d2 <main>
  8a:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BCM_RxHandler>:
}


static void BCM_RxHandler(void)
{
	if(gstrBCMPacket.enuBCMStateMachine == BCM_STATE_IDLE)
  92:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gstrBCMPacket+0x4>
  96:	81 11       	cpse	r24, r1
  98:	03 c0       	rjmp	.+6      	; 0xa0 <BCM_RxHandler+0xe>
	{
		gstrBCMPacket.enuBCMStateMachine = BCM_STATE_RXCMD;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gstrBCMPacket+0x4>
	}
	else
	{
	}
	UART_RecieveDataNoBLOCK(&gu16RxBuffer);
  a0:	80 e7       	ldi	r24, 0x70	; 112
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 60 05 	call	0xac0	; 0xac0 <UART_RecieveDataNoBLOCK>
	gu8RxFlag=HIGH;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <gu8RxFlag>
  ae:	08 95       	ret

000000b0 <BCM_Init>:

enuErrorStatus_t BCM_Init(strBCMCfg_t *strBCMCfg)
{
	enuErrorStatus_t enuErrorStatus;

	if(strBCMCfg==NULLPTR)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	39 f1       	breq	.+78     	; 0x102 <BCM_Init+0x52>
  b4:	fc 01       	movw	r30, r24
	{
		enuErrorStatus = E_ERROR;
	}
	else
	{
		switch(strBCMCfg->enuBCMChannel)
  b6:	20 81       	ld	r18, Z
  b8:	21 30       	cpi	r18, 0x01	; 1
  ba:	79 f0       	breq	.+30     	; 0xda <BCM_Init+0x2a>
  bc:	18 f0       	brcs	.+6      	; 0xc4 <BCM_Init+0x14>
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	e1 f0       	breq	.+56     	; 0xfa <BCM_Init+0x4a>
  c2:	21 c0       	rjmp	.+66     	; 0x106 <BCM_Init+0x56>
		{
			case BCM_UART_CHANNEL:
				UART_Init();
  c4:	0e 94 3a 05 	call	0xa74	; 0xa74 <UART_Init>
				UART_RX_Enable_Interrupt();
  c8:	0e 94 71 05 	call	0xae2	; 0xae2 <UART_RX_Enable_Interrupt>
				sei();
  cc:	78 94       	sei
				UART_RX_SetCallBack(BCM_RxHandler);
  ce:	89 e4       	ldi	r24, 0x49	; 73
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 76 05 	call	0xaec	; 0xaec <UART_RX_SetCallBack>
				enuErrorStatus = E_OK;
  d6:	81 e0       	ldi	r24, 0x01	; 1
				break;
  d8:	19 c0       	rjmp	.+50     	; 0x10c <BCM_Init+0x5c>
			case BCM_SPI_CHANNEL:
				switch(strBCMCfg->enuBCMMode)
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	49 f0       	breq	.+18     	; 0xf2 <BCM_Init+0x42>
  e0:	20 f0       	brcs	.+8      	; 0xea <BCM_Init+0x3a>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	91 f4       	brne	.+36     	; 0x10a <BCM_Init+0x5a>
					case BCM_RX:
						SPI_initSlave();
						enuErrorStatus = E_OK;
						break;
					case BCM_TX_RX:
						enuErrorStatus = E_OK;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	11 c0       	rjmp	.+34     	; 0x10c <BCM_Init+0x5c>
				break;
			case BCM_SPI_CHANNEL:
				switch(strBCMCfg->enuBCMMode)
				{
					case BCM_TX:
						SPI_initMaster();
  ea:	0e 94 30 05 	call	0xa60	; 0xa60 <SPI_initMaster>
						enuErrorStatus = E_OK;
  ee:	81 e0       	ldi	r24, 0x01	; 1
						break;
  f0:	0d c0       	rjmp	.+26     	; 0x10c <BCM_Init+0x5c>
					case BCM_RX:
						SPI_initSlave();
  f2:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_initSlave>
						enuErrorStatus = E_OK;
  f6:	81 e0       	ldi	r24, 0x01	; 1
						break;
  f8:	09 c0       	rjmp	.+18     	; 0x10c <BCM_Init+0x5c>
					default:
						enuErrorStatus = E_ERROR;
				}
				break;
			case BCM_I2C_CHANNEL:
				TWI_init();
  fa:	0e 94 29 05 	call	0xa52	; 0xa52 <TWI_init>
				enuErrorStatus = E_OK;
  fe:	81 e0       	ldi	r24, 0x01	; 1
				break;
 100:	05 c0       	rjmp	.+10     	; 0x10c <BCM_Init+0x5c>
{
	enuErrorStatus_t enuErrorStatus;

	if(strBCMCfg==NULLPTR)
	{
		enuErrorStatus = E_ERROR;
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	03 c0       	rjmp	.+6      	; 0x10c <BCM_Init+0x5c>
			case BCM_I2C_CHANNEL:
				TWI_init();
				enuErrorStatus = E_OK;
				break;
			default:
				enuErrorStatus = E_ERROR;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	01 c0       	rjmp	.+2      	; 0x10c <BCM_Init+0x5c>
						break;
					case BCM_TX_RX:
						enuErrorStatus = E_OK;
						break;
					default:
						enuErrorStatus = E_ERROR;
 10a:	80 e0       	ldi	r24, 0x00	; 0
				break;
			default:
				enuErrorStatus = E_ERROR;
		}
	}
	gu8BCMInitState = HIGH;
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <gu8BCMInitState>

	return enuErrorStatus;
}
 112:	08 95       	ret

00000114 <BCM_Setup>:

enuErrorStatus_t BCM_Setup(strBCMTaskCfg_t *pstrBCMTaskCfg)
{
	enuErrorStatus_t enuErrorStatus;

	if((pstrBCMTaskCfg==NULLPTR) || (gu8BCMInitState==LOW))
 114:	00 97       	sbiw	r24, 0x00	; 0
 116:	69 f0       	breq	.+26     	; 0x132 <BCM_Setup+0x1e>
 118:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <gu8BCMInitState>
 11c:	22 23       	and	r18, r18
 11e:	59 f0       	breq	.+22     	; 0x136 <BCM_Setup+0x22>
	{
		enuErrorStatus = E_ERROR;
	}
	else
	{
      gstrBCMPacket.strBCMTaskCfg=pstrBCMTaskCfg;
 120:	e2 e7       	ldi	r30, 0x72	; 114
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	91 83       	std	Z+1, r25	; 0x01
 126:	80 83       	st	Z, r24
 		gstrBCMPacket.enuBCMStateMachine = BCM_STATE_IDLE;
 128:	14 82       	std	Z+4, r1	; 0x04
		gstrBCMPacket.u16ByteCounter = 0;
 12a:	13 82       	std	Z+3, r1	; 0x03
 12c:	12 82       	std	Z+2, r1	; 0x02
		enuErrorStatus = E_OK;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
{
	enuErrorStatus_t enuErrorStatus;

	if((pstrBCMTaskCfg==NULLPTR) || (gu8BCMInitState==LOW))
	{
		enuErrorStatus = E_ERROR;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 95       	ret
 136:	80 e0       	ldi	r24, 0x00	; 0
 		gstrBCMPacket.enuBCMStateMachine = BCM_STATE_IDLE;
		gstrBCMPacket.u16ByteCounter = 0;
		enuErrorStatus = E_OK;
	}
	return enuErrorStatus;
}
 138:	08 95       	ret

0000013a <BCM_RxDispatcher>:


enuErrorStatus_t BCM_RxDispatcher(void)
{
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	enuErrorStatus_t enuErrorStatus= E_ERROR;

	if((gu8BCMInitState == LOW) && (gstrBCMPacket.strBCMTaskCfg->enuBCMMode == BCM_TX))
 152:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gu8BCMInitState>
 156:	81 11       	cpse	r24, r1
 158:	08 c0       	rjmp	.+16     	; 0x16a <BCM_RxDispatcher+0x30>
 15a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <gstrBCMPacket>
 15e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <gstrBCMPacket+0x1>
 162:	80 89       	ldd	r24, Z+16	; 0x10
 164:	88 23       	and	r24, r24
 166:	09 f4       	brne	.+2      	; 0x16a <BCM_RxDispatcher+0x30>
 168:	a0 c1       	rjmp	.+832    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	{
		enuErrorStatus = E_ERROR;
	}
	else
	{
		if(gu8RxFlag == HIGH)
 16a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <gu8RxFlag>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	09 f0       	breq	.+2      	; 0x174 <BCM_RxDispatcher+0x3a>
 172:	9d c1       	rjmp	.+826    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			switch(gstrBCMPacket.enuBCMStateMachine)
 174:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <gstrBCMPacket+0x4>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	21 f1       	breq	.+72     	; 0x1c4 <BCM_RxDispatcher+0x8a>
 17c:	28 f4       	brcc	.+10     	; 0x188 <BCM_RxDispatcher+0x4e>
 17e:	88 23       	and	r24, r24
 180:	59 f0       	breq	.+22     	; 0x198 <BCM_RxDispatcher+0x5e>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	59 f0       	breq	.+22     	; 0x19c <BCM_RxDispatcher+0x62>
 186:	8d c1       	rjmp	.+794    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 188:	84 30       	cpi	r24, 0x04	; 4
 18a:	09 f4       	brne	.+2      	; 0x18e <BCM_RxDispatcher+0x54>
 18c:	f8 c0       	rjmp	.+496    	; 0x37e <BCM_RxDispatcher+0x244>
 18e:	08 f4       	brcc	.+2      	; 0x192 <BCM_RxDispatcher+0x58>
 190:	50 c0       	rjmp	.+160    	; 0x232 <BCM_RxDispatcher+0xf8>
 192:	85 30       	cpi	r24, 0x05	; 5
 194:	09 f0       	breq	.+2      	; 0x198 <BCM_RxDispatcher+0x5e>
 196:	85 c1       	rjmp	.+778    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				case BCM_STATE_IDLE:
					/* ISR will change state to BCM_STATE_RXBYTE */
					enuErrorStatus = E_OK;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	84 c1       	rjmp	.+776    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					break;
				case BCM_STATE_RXCMD:
					gstrBCMPacket.strBCMTaskCfg->enuBCMCommand = (uint8_t)(gu16RxBuffer - '0');
 19c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <gstrBCMPacket>
 1a0:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <gstrBCMPacket+0x1>
 1a4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu16RxBuffer>
 1a8:	80 53       	subi	r24, 0x30	; 48
 1aa:	80 83       	st	Z, r24
					if (gstrBCMPacket.strBCMTaskCfg->enuBCMCommand == BCM_ID)
 1ac:	81 11       	cpse	r24, r1
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <BCM_RxDispatcher+0x80>
					{
						gstrBCMPacket.enuBCMStateMachine = BCM_STATE_RXSIZE;
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gstrBCMPacket+0x4>
						enuErrorStatus = E_OK;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	75 c1       	rjmp	.+746    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					}
					else
					{
						gstrBCMPacket.enuBCMStateMachine = BCM_STATE_ERROR;
 1ba:	86 e0       	ldi	r24, 0x06	; 6
 1bc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gstrBCMPacket+0x4>
						enuErrorStatus = E_ERROR;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	70 c1       	rjmp	.+736    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					}
					break;
				case BCM_STATE_RXSIZE:
					if (gstrBCMPacket.u16ByteCounter == 0)
 1c4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <gstrBCMPacket+0x2>
 1c8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <gstrBCMPacket+0x3>
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	79 f4       	brne	.+30     	; 0x1ee <BCM_RxDispatcher+0xb4>
					{
						u16RxSize = (uint8_t)(gu16RxBuffer - '0');
 1d0:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <gu16RxBuffer>
 1d4:	20 53       	subi	r18, 0x30	; 48
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <__data_end+0x1>
 1dc:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <__data_end>
						gstrBCMPacket.u16ByteCounter++;
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <gstrBCMPacket+0x3>
 1e6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <gstrBCMPacket+0x2>
}


enuErrorStatus_t BCM_RxDispatcher(void)
{
	enuErrorStatus_t enuErrorStatus= E_ERROR;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	5b c1       	rjmp	.+694    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
						u16RxSize = (uint8_t)(gu16RxBuffer - '0');
						gstrBCMPacket.u16ByteCounter++;
					}
					else
					{
						u16RxSize <<=8;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
						u16RxSize |= (uint8_t)(gu16RxBuffer - '0');
 1f6:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <gu16RxBuffer>
 1fa:	20 53       	subi	r18, 0x30	; 48
 1fc:	82 2b       	or	r24, r18
 1fe:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 202:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
                  gstrBCMPacket.u16ByteCounter=0;
 206:	e2 e7       	ldi	r30, 0x72	; 114
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	13 82       	std	Z+3, r1	; 0x03
 20c:	12 82       	std	Z+2, r1	; 0x02
                  if (u16RxSize<=gstrBCMPacket.strBCMTaskCfg->u16Size)
 20e:	01 90       	ld	r0, Z+
 210:	f0 81       	ld	r31, Z
 212:	e0 2d       	mov	r30, r0
 214:	21 81       	ldd	r18, Z+1	; 0x01
 216:	32 81       	ldd	r19, Z+2	; 0x02
 218:	28 17       	cp	r18, r24
 21a:	39 07       	cpc	r19, r25
 21c:	28 f0       	brcs	.+10     	; 0x228 <BCM_RxDispatcher+0xee>
                  {
                     gstrBCMPacket.enuBCMStateMachine= BCM_STATE_RXDATA;
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gstrBCMPacket+0x4>
                     enuErrorStatus = E_OK;
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	3e c1       	rjmp	.+636    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
                  }
                  else
                  {
                     gstrBCMPacket.enuBCMStateMachine= BCM_STATE_ERROR;
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gstrBCMPacket+0x4>
                     enuErrorStatus = E_ERROR;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	39 c1       	rjmp	.+626    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					}
					break;
               
				case BCM_STATE_RXDATA:
               
               DIO_Write(0, HIGH);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 27 04 	call	0x84e	; 0x84e <DIO_Write>
					if (gstrBCMPacket.u16ByteCounter < (u16RxSize - 1))
 23a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <gstrBCMPacket+0x2>
 23e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <gstrBCMPacket+0x3>
 242:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <__data_end>
 246:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <__data_end+0x1>
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	31 09       	sbc	r19, r1
 24e:	82 17       	cp	r24, r18
 250:	93 07       	cpc	r25, r19
 252:	08 f0       	brcs	.+2      	; 0x256 <BCM_RxDispatcher+0x11c>
 254:	43 c0       	rjmp	.+134    	; 0x2dc <BCM_RxDispatcher+0x1a2>
					{
						gstrBCMPacket.strBCMTaskCfg->pu8DataBuffer[gstrBCMPacket.u16ByteCounter]=(uint8_t)gu16RxBuffer;
 256:	a2 e7       	ldi	r26, 0x72	; 114
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	ed 91       	ld	r30, X+
 25c:	fc 91       	ld	r31, X
 25e:	11 97       	sbiw	r26, 0x01	; 1
 260:	03 80       	ldd	r0, Z+3	; 0x03
 262:	f4 81       	ldd	r31, Z+4	; 0x04
 264:	e0 2d       	mov	r30, r0
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <gu16RxBuffer>
 26e:	20 83       	st	Z, r18
						gstrBCMPacket.u16ByteCounter++;
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	13 96       	adiw	r26, 0x03	; 3
 274:	9c 93       	st	X, r25
 276:	8e 93       	st	-X, r24
 278:	12 97       	sbiw	r26, 0x02	; 2
                  gu64LocalCheckSum+=gu16RxBuffer-'0';
 27a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <gu16RxBuffer>
 27e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <gu16RxBuffer+0x1>
 282:	c0 97       	sbiw	r24, 0x30	; 48
 284:	28 2f       	mov	r18, r24
 286:	39 2f       	mov	r19, r25
 288:	40 e0       	ldi	r20, 0x00	; 0
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	a0 90 66 00 	lds	r10, 0x0066	; 0x800066 <gu64LocalCheckSum>
 298:	b0 90 67 00 	lds	r11, 0x0067	; 0x800067 <gu64LocalCheckSum+0x1>
 29c:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <gu64LocalCheckSum+0x2>
 2a0:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <gu64LocalCheckSum+0x3>
 2a4:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <gu64LocalCheckSum+0x4>
 2a8:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <gu64LocalCheckSum+0x5>
 2ac:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <gu64LocalCheckSum+0x6>
 2b0:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <gu64LocalCheckSum+0x7>
 2b4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__adddi3>
 2b8:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <gu64LocalCheckSum>
 2bc:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <gu64LocalCheckSum+0x1>
 2c0:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <gu64LocalCheckSum+0x2>
 2c4:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <gu64LocalCheckSum+0x3>
 2c8:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <gu64LocalCheckSum+0x4>
 2cc:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <gu64LocalCheckSum+0x5>
 2d0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gu64LocalCheckSum+0x6>
 2d4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <gu64LocalCheckSum+0x7>
						gstrBCMPacket.enuBCMStateMachine= BCM_STATE_RXCS;
                  
                  UART_SendData(gu64LocalCheckSum);
                  gstrBCMPacket.strBCMTaskCfg->u64CheckSum=0;
					}
					enuErrorStatus = E_OK;
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	e4 c0       	rjmp	.+456    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
						gstrBCMPacket.u16ByteCounter++;
                  gu64LocalCheckSum+=gu16RxBuffer-'0';
					}
					else
					{
						gstrBCMPacket.strBCMTaskCfg->pu8DataBuffer[gstrBCMPacket.u16ByteCounter]=(uint8_t)gu16RxBuffer;
 2dc:	c2 e7       	ldi	r28, 0x72	; 114
 2de:	d0 e0       	ldi	r29, 0x00	; 0
 2e0:	e8 81       	ld	r30, Y
 2e2:	f9 81       	ldd	r31, Y+1	; 0x01
 2e4:	23 81       	ldd	r18, Z+3	; 0x03
 2e6:	34 81       	ldd	r19, Z+4	; 0x04
 2e8:	f9 01       	movw	r30, r18
 2ea:	e8 0f       	add	r30, r24
 2ec:	f9 1f       	adc	r31, r25
 2ee:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <gu16RxBuffer>
 2f2:	20 83       	st	Z, r18
						gstrBCMPacket.u16ByteCounter = 0;
 2f4:	1b 82       	std	Y+3, r1	; 0x03
 2f6:	1a 82       	std	Y+2, r1	; 0x02
                  gu64LocalCheckSum+=gu16RxBuffer-'0';
 2f8:	80 90 70 00 	lds	r8, 0x0070	; 0x800070 <gu16RxBuffer>
 2fc:	90 90 71 00 	lds	r9, 0x0071	; 0x800071 <gu16RxBuffer+0x1>
 300:	80 e3       	ldi	r24, 0x30	; 48
 302:	88 1a       	sub	r8, r24
 304:	91 08       	sbc	r9, r1
 306:	28 2d       	mov	r18, r8
 308:	39 2d       	mov	r19, r9
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	a0 90 66 00 	lds	r10, 0x0066	; 0x800066 <gu64LocalCheckSum>
 31a:	b0 90 67 00 	lds	r11, 0x0067	; 0x800067 <gu64LocalCheckSum+0x1>
 31e:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <gu64LocalCheckSum+0x2>
 322:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <gu64LocalCheckSum+0x3>
 326:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <gu64LocalCheckSum+0x4>
 32a:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <gu64LocalCheckSum+0x5>
 32e:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <gu64LocalCheckSum+0x6>
 332:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <gu64LocalCheckSum+0x7>
 336:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__adddi3>
 33a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <gu64LocalCheckSum>
 33e:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <gu64LocalCheckSum+0x1>
 342:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <gu64LocalCheckSum+0x2>
 346:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <gu64LocalCheckSum+0x3>
 34a:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <gu64LocalCheckSum+0x4>
 34e:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <gu64LocalCheckSum+0x5>
 352:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <gu64LocalCheckSum+0x6>
 356:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <gu64LocalCheckSum+0x7>
						gstrBCMPacket.enuBCMStateMachine= BCM_STATE_RXCS;
 35a:	84 e0       	ldi	r24, 0x04	; 4
 35c:	8c 83       	std	Y+4, r24	; 0x04
                  
                  UART_SendData(gu64LocalCheckSum);
 35e:	82 2f       	mov	r24, r18
 360:	93 2f       	mov	r25, r19
 362:	0e 94 52 05 	call	0xaa4	; 0xaa4 <UART_SendData>
                  gstrBCMPacket.strBCMTaskCfg->u64CheckSum=0;
 366:	e8 81       	ld	r30, Y
 368:	f9 81       	ldd	r31, Y+1	; 0x01
 36a:	15 82       	std	Z+5, r1	; 0x05
 36c:	16 82       	std	Z+6, r1	; 0x06
 36e:	17 82       	std	Z+7, r1	; 0x07
 370:	10 86       	std	Z+8, r1	; 0x08
 372:	11 86       	std	Z+9, r1	; 0x09
 374:	12 86       	std	Z+10, r1	; 0x0a
 376:	13 86       	std	Z+11, r1	; 0x0b
 378:	14 86       	std	Z+12, r1	; 0x0c
					}
					enuErrorStatus = E_OK;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	93 c0       	rjmp	.+294    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
					break;
               
				case BCM_STATE_RXCS:
                  
					if (gstrBCMPacket.u16ByteCounter < 7)
 37e:	e0 90 74 00 	lds	r14, 0x0074	; 0x800074 <gstrBCMPacket+0x2>
 382:	f0 90 75 00 	lds	r15, 0x0075	; 0x800075 <gstrBCMPacket+0x3>
 386:	a7 e0       	ldi	r26, 0x07	; 7
 388:	ea 16       	cp	r14, r26
 38a:	f1 04       	cpc	r15, r1
 38c:	b8 f5       	brcc	.+110    	; 0x3fc <BCM_RxDispatcher+0x2c2>
					{
 						gstrBCMPacket.strBCMTaskCfg->u64CheckSum<<=8;
 38e:	0f 2e       	mov	r0, r31
 390:	f2 e7       	ldi	r31, 0x72	; 114
 392:	cf 2e       	mov	r12, r31
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	df 2e       	mov	r13, r31
 398:	f0 2d       	mov	r31, r0
 39a:	d6 01       	movw	r26, r12
 39c:	ed 91       	ld	r30, X+
 39e:	fc 91       	ld	r31, X
 3a0:	25 81       	ldd	r18, Z+5	; 0x05
 3a2:	36 81       	ldd	r19, Z+6	; 0x06
 3a4:	47 81       	ldd	r20, Z+7	; 0x07
 3a6:	50 85       	ldd	r21, Z+8	; 0x08
 3a8:	61 85       	ldd	r22, Z+9	; 0x09
 3aa:	72 85       	ldd	r23, Z+10	; 0x0a
 3ac:	83 85       	ldd	r24, Z+11	; 0x0b
 3ae:	94 85       	ldd	r25, Z+12	; 0x0c
 3b0:	08 e0       	ldi	r16, 0x08	; 8
 3b2:	0e 94 d2 05 	call	0xba4	; 0xba4 <__ashldi3>
 						gstrBCMPacket.strBCMTaskCfg->u64CheckSum|=(uint8_t)gu16RxBuffer-'0';
 3b6:	c0 91 70 00 	lds	r28, 0x0070	; 0x800070 <gu16RxBuffer>
 3ba:	d0 91 71 00 	lds	r29, 0x0071	; 0x800071 <gu16RxBuffer+0x1>
 3be:	dd 27       	eor	r29, r29
 3c0:	e0 97       	sbiw	r28, 0x30	; 48
 3c2:	ad 2f       	mov	r26, r29
 3c4:	aa 0f       	add	r26, r26
 3c6:	aa 0b       	sbc	r26, r26
 3c8:	2c 2b       	or	r18, r28
 3ca:	3d 2b       	or	r19, r29
 3cc:	4a 2b       	or	r20, r26
 3ce:	5a 2b       	or	r21, r26
 3d0:	6a 2b       	or	r22, r26
 3d2:	7a 2b       	or	r23, r26
 3d4:	8a 2b       	or	r24, r26
 3d6:	9a 2b       	or	r25, r26
 3d8:	25 83       	std	Z+5, r18	; 0x05
 3da:	36 83       	std	Z+6, r19	; 0x06
 3dc:	47 83       	std	Z+7, r20	; 0x07
 3de:	50 87       	std	Z+8, r21	; 0x08
 3e0:	61 87       	std	Z+9, r22	; 0x09
 3e2:	72 87       	std	Z+10, r23	; 0x0a
 3e4:	83 87       	std	Z+11, r24	; 0x0b
 3e6:	94 87       	std	Z+12, r25	; 0x0c
						gstrBCMPacket.u16ByteCounter++;
 3e8:	ef ef       	ldi	r30, 0xFF	; 255
 3ea:	ee 1a       	sub	r14, r30
 3ec:	fe 0a       	sbc	r15, r30
 3ee:	d6 01       	movw	r26, r12
 3f0:	13 96       	adiw	r26, 0x03	; 3
 3f2:	fc 92       	st	X, r15
 3f4:	ee 92       	st	-X, r14
 3f6:	12 97       	sbiw	r26, 0x02	; 2
}


enuErrorStatus_t BCM_RxDispatcher(void)
{
	enuErrorStatus_t enuErrorStatus= E_ERROR;
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	54 c0       	rjmp	.+168    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 						gstrBCMPacket.strBCMTaskCfg->u64CheckSum|=(uint8_t)gu16RxBuffer-'0';
						gstrBCMPacket.u16ByteCounter++;
					}
					else
					{
 						gstrBCMPacket.strBCMTaskCfg->u64CheckSum<<=8;
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f2 e7       	ldi	r31, 0x72	; 114
 400:	ef 2e       	mov	r14, r31
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	ff 2e       	mov	r15, r31
 406:	f0 2d       	mov	r31, r0
 408:	d7 01       	movw	r26, r14
 40a:	ed 91       	ld	r30, X+
 40c:	fc 91       	ld	r31, X
 40e:	25 81       	ldd	r18, Z+5	; 0x05
 410:	36 81       	ldd	r19, Z+6	; 0x06
 412:	47 81       	ldd	r20, Z+7	; 0x07
 414:	50 85       	ldd	r21, Z+8	; 0x08
 416:	61 85       	ldd	r22, Z+9	; 0x09
 418:	72 85       	ldd	r23, Z+10	; 0x0a
 41a:	83 85       	ldd	r24, Z+11	; 0x0b
 41c:	94 85       	ldd	r25, Z+12	; 0x0c
 41e:	08 e0       	ldi	r16, 0x08	; 8
 420:	0e 94 d2 05 	call	0xba4	; 0xba4 <__ashldi3>
 						gstrBCMPacket.strBCMTaskCfg->u64CheckSum|=(uint8_t)gu16RxBuffer-'0';
 424:	c0 91 70 00 	lds	r28, 0x0070	; 0x800070 <gu16RxBuffer>
 428:	d0 91 71 00 	lds	r29, 0x0071	; 0x800071 <gu16RxBuffer+0x1>
 42c:	dd 27       	eor	r29, r29
 42e:	e0 97       	sbiw	r28, 0x30	; 48
 430:	ad 2f       	mov	r26, r29
 432:	aa 0f       	add	r26, r26
 434:	aa 0b       	sbc	r26, r26
 436:	2c 2b       	or	r18, r28
 438:	3d 2b       	or	r19, r29
 43a:	4a 2b       	or	r20, r26
 43c:	5a 2b       	or	r21, r26
 43e:	6a 2b       	or	r22, r26
 440:	7a 2b       	or	r23, r26
 442:	8a 2b       	or	r24, r26
 444:	9a 2b       	or	r25, r26
 446:	25 83       	std	Z+5, r18	; 0x05
 448:	36 83       	std	Z+6, r19	; 0x06
 44a:	47 83       	std	Z+7, r20	; 0x07
 44c:	50 87       	std	Z+8, r21	; 0x08
 44e:	61 87       	std	Z+9, r22	; 0x09
 450:	72 87       	std	Z+10, r23	; 0x0a
 452:	83 87       	std	Z+11, r24	; 0x0b
 454:	94 87       	std	Z+12, r25	; 0x0c
						gstrBCMPacket.u16ByteCounter=0;
 456:	d7 01       	movw	r26, r14
 458:	13 96       	adiw	r26, 0x03	; 3
 45a:	1c 92       	st	X, r1
 45c:	1e 92       	st	-X, r1
 45e:	12 97       	sbiw	r26, 0x02	; 2
                  if (gu64LocalCheckSum == gstrBCMPacket.strBCMTaskCfg->u64CheckSum)
 460:	a0 90 66 00 	lds	r10, 0x0066	; 0x800066 <gu64LocalCheckSum>
 464:	b0 90 67 00 	lds	r11, 0x0067	; 0x800067 <gu64LocalCheckSum+0x1>
 468:	c0 90 68 00 	lds	r12, 0x0068	; 0x800068 <gu64LocalCheckSum+0x2>
 46c:	d0 90 69 00 	lds	r13, 0x0069	; 0x800069 <gu64LocalCheckSum+0x3>
 470:	e0 90 6a 00 	lds	r14, 0x006A	; 0x80006a <gu64LocalCheckSum+0x4>
 474:	f0 90 6b 00 	lds	r15, 0x006B	; 0x80006b <gu64LocalCheckSum+0x5>
 478:	00 91 6c 00 	lds	r16, 0x006C	; 0x80006c <gu64LocalCheckSum+0x6>
 47c:	10 91 6d 00 	lds	r17, 0x006D	; 0x80006d <gu64LocalCheckSum+0x7>
 480:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__cmpdi2>
 484:	49 f4       	brne	.+18     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
                  {
                     gstrBCMPacket.strBCMTaskCfg->pfTaskCompleteNotify();
 486:	05 84       	ldd	r0, Z+13	; 0x0d
 488:	f6 85       	ldd	r31, Z+14	; 0x0e
 48a:	e0 2d       	mov	r30, r0
 48c:	09 95       	icall
                     gstrBCMPacket.enuBCMStateMachine= BCM_STATE_FINISHED;
 48e:	85 e0       	ldi	r24, 0x05	; 5
 490:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gstrBCMPacket+0x4>
                     enuErrorStatus = E_OK;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	06 c0       	rjmp	.+12     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
                  }
                  else
                  {
                     gstrBCMPacket.enuBCMStateMachine= BCM_STATE_ERROR;
 498:	86 e0       	ldi	r24, 0x06	; 6
 49a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <gstrBCMPacket+0x4>
                     enuErrorStatus = E_ERROR;
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				case BCM_STATE_FINISHED:
					enuErrorStatus = E_OK;
					break;
               
				default:
					enuErrorStatus = E_ERROR;
 4a2:	80 e0       	ldi	r24, 0x00	; 0
			}
			gu8RxFlag=LOW;
 4a4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gu8RxFlag>
 4a8:	03 c0       	rjmp	.+6      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
{
	enuErrorStatus_t enuErrorStatus= E_ERROR;

	if((gu8BCMInitState == LOW) && (gstrBCMPacket.strBCMTaskCfg->enuBCMMode == BCM_TX))
	{
		enuErrorStatus = E_ERROR;
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
			}
			gu8RxFlag=LOW;
		}
		else
		{
			enuErrorStatus = E_ERROR;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return enuErrorStatus;
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	df 90       	pop	r13
 4be:	cf 90       	pop	r12
 4c0:	bf 90       	pop	r11
 4c2:	af 90       	pop	r10
 4c4:	9f 90       	pop	r9
 4c6:	8f 90       	pop	r8
 4c8:	08 95       	ret

000004ca <Notify>:
#include "BCM.h"
#include "UART.h"

void Notify(void)
{
	DIO_toggle(0);
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_toggle>
 4d0:	08 95       	ret

000004d2 <main>:
}

int main(void)
{
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	cd b7       	in	r28, 0x3d	; 61
 4d8:	de b7       	in	r29, 0x3e	; 62
 4da:	6d 97       	sbiw	r28, 0x1d	; 29
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
 4e6:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_Init>

	uint8_t au8Buffer[10] = {0};
 4ea:	fe 01       	movw	r30, r28
 4ec:	31 96       	adiw	r30, 0x01	; 1
 4ee:	8a e0       	ldi	r24, 0x0A	; 10
 4f0:	df 01       	movw	r26, r30
 4f2:	1d 92       	st	X+, r1
 4f4:	8a 95       	dec	r24
 4f6:	e9 f7       	brne	.-6      	; 0x4f2 <main+0x20>
	strBCMCfg_t strBCMCfg = {BCM_UART_CHANNEL, BCM_RX};
 4f8:	1b 86       	std	Y+11, r1	; 0x0b
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	8c 87       	std	Y+12, r24	; 0x0c
	strBCMTaskCfg_t strBCMTaskCfg = {BCM_ID, 10, au8Buffer, 0, Notify, BCM_UART_CHANNEL, BCM_RX};
 4fe:	1d 86       	std	Y+13, r1	; 0x0d
 500:	2a e0       	ldi	r18, 0x0A	; 10
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	3f 87       	std	Y+15, r19	; 0x0f
 506:	2e 87       	std	Y+14, r18	; 0x0e
 508:	f9 8b       	std	Y+17, r31	; 0x11
 50a:	e8 8b       	std	Y+16, r30	; 0x10
 50c:	1a 8a       	std	Y+18, r1	; 0x12
 50e:	1b 8a       	std	Y+19, r1	; 0x13
 510:	1c 8a       	std	Y+20, r1	; 0x14
 512:	1d 8a       	std	Y+21, r1	; 0x15
 514:	1e 8a       	std	Y+22, r1	; 0x16
 516:	1f 8a       	std	Y+23, r1	; 0x17
 518:	18 8e       	std	Y+24, r1	; 0x18
 51a:	19 8e       	std	Y+25, r1	; 0x19
 51c:	25 e6       	ldi	r18, 0x65	; 101
 51e:	32 e0       	ldi	r19, 0x02	; 2
 520:	3b 8f       	std	Y+27, r19	; 0x1b
 522:	2a 8f       	std	Y+26, r18	; 0x1a
 524:	1c 8e       	std	Y+28, r1	; 0x1c
 526:	8d 8f       	std	Y+29, r24	; 0x1d
         
	BCM_Init(&strBCMCfg);
 528:	ce 01       	movw	r24, r28
 52a:	0b 96       	adiw	r24, 0x0b	; 11
 52c:	0e 94 58 00 	call	0xb0	; 0xb0 <BCM_Init>
	BCM_Setup(&strBCMTaskCfg);
 530:	ce 01       	movw	r24, r28
 532:	0d 96       	adiw	r24, 0x0d	; 13
 534:	0e 94 8a 00 	call	0x114	; 0x114 <BCM_Setup>
	while(1)
	{
		BCM_RxDispatcher();
 538:	0e 94 9d 00 	call	0x13a	; 0x13a <BCM_RxDispatcher>
 53c:	fd cf       	rjmp	.-6      	; 0x538 <main+0x66>

0000053e <DIO_Init>:
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
		}//end else if

		return E_OK;
	}//end else
}//end DIO_Read
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	81 c1       	rjmp	.+770    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 542:	82 2f       	mov	r24, r18
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	e8 0f       	add	r30, r24
 54e:	f9 1f       	adc	r31, r25
 550:	e0 5a       	subi	r30, 0xA0	; 160
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	31 81       	ldd	r19, Z+1	; 0x01
 556:	31 11       	cpse	r19, r1
 558:	58 c0       	rjmp	.+176    	; 0x60a <DIO_Init+0xcc>
 55a:	fc 01       	movw	r30, r24
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	e8 0f       	add	r30, r24
 562:	f9 1f       	adc	r31, r25
 564:	e0 5a       	subi	r30, 0xA0	; 160
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	40 81       	ld	r20, Z
 56a:	48 30       	cpi	r20, 0x08	; 8
 56c:	70 f4       	brcc	.+28     	; 0x58a <DIO_Init+0x4c>
 56e:	3a b3       	in	r19, 0x1a	; 26
 570:	61 e0       	ldi	r22, 0x01	; 1
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	fb 01       	movw	r30, r22
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_Init+0x3e>
 578:	ee 0f       	add	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	4a 95       	dec	r20
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_Init+0x3a>
 580:	af 01       	movw	r20, r30
 582:	40 95       	com	r20
 584:	43 23       	and	r20, r19
 586:	4a bb       	out	0x1a, r20	; 26
 588:	95 c0       	rjmp	.+298    	; 0x6b4 <DIO_Init+0x176>
 58a:	38 ef       	ldi	r19, 0xF8	; 248
 58c:	34 0f       	add	r19, r20
 58e:	38 30       	cpi	r19, 0x08	; 8
 590:	88 f4       	brcc	.+34     	; 0x5b4 <DIO_Init+0x76>
 592:	37 b3       	in	r19, 0x17	; 23
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	48 50       	subi	r20, 0x08	; 8
 598:	51 09       	sbc	r21, r1
 59a:	61 e0       	ldi	r22, 0x01	; 1
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	fb 01       	movw	r30, r22
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_Init+0x68>
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	4a 95       	dec	r20
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_Init+0x64>
 5aa:	af 01       	movw	r20, r30
 5ac:	40 95       	com	r20
 5ae:	43 23       	and	r20, r19
 5b0:	47 bb       	out	0x17, r20	; 23
 5b2:	80 c0       	rjmp	.+256    	; 0x6b4 <DIO_Init+0x176>
 5b4:	30 ef       	ldi	r19, 0xF0	; 240
 5b6:	34 0f       	add	r19, r20
 5b8:	38 30       	cpi	r19, 0x08	; 8
 5ba:	88 f4       	brcc	.+34     	; 0x5de <DIO_Init+0xa0>
 5bc:	34 b3       	in	r19, 0x14	; 20
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	40 51       	subi	r20, 0x10	; 16
 5c2:	51 09       	sbc	r21, r1
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	fb 01       	movw	r30, r22
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_Init+0x92>
 5cc:	ee 0f       	add	r30, r30
 5ce:	ff 1f       	adc	r31, r31
 5d0:	4a 95       	dec	r20
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_Init+0x8e>
 5d4:	af 01       	movw	r20, r30
 5d6:	40 95       	com	r20
 5d8:	43 23       	and	r20, r19
 5da:	44 bb       	out	0x14, r20	; 20
 5dc:	6b c0       	rjmp	.+214    	; 0x6b4 <DIO_Init+0x176>
 5de:	38 ee       	ldi	r19, 0xE8	; 232
 5e0:	34 0f       	add	r19, r20
 5e2:	38 30       	cpi	r19, 0x08	; 8
 5e4:	08 f0       	brcs	.+2      	; 0x5e8 <DIO_Init+0xaa>
 5e6:	66 c0       	rjmp	.+204    	; 0x6b4 <DIO_Init+0x176>
 5e8:	31 b3       	in	r19, 0x11	; 17
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	48 51       	subi	r20, 0x18	; 24
 5ee:	51 09       	sbc	r21, r1
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	fb 01       	movw	r30, r22
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_Init+0xbe>
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	4a 95       	dec	r20
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_Init+0xba>
 600:	af 01       	movw	r20, r30
 602:	40 95       	com	r20
 604:	43 23       	and	r20, r19
 606:	41 bb       	out	0x11, r20	; 17
 608:	55 c0       	rjmp	.+170    	; 0x6b4 <DIO_Init+0x176>
 60a:	31 30       	cpi	r19, 0x01	; 1
 60c:	09 f0       	breq	.+2      	; 0x610 <DIO_Init+0xd2>
 60e:	52 c0       	rjmp	.+164    	; 0x6b4 <DIO_Init+0x176>
 610:	fc 01       	movw	r30, r24
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	e8 0f       	add	r30, r24
 618:	f9 1f       	adc	r31, r25
 61a:	e0 5a       	subi	r30, 0xA0	; 160
 61c:	ff 4f       	sbci	r31, 0xFF	; 255
 61e:	40 81       	ld	r20, Z
 620:	48 30       	cpi	r20, 0x08	; 8
 622:	68 f4       	brcc	.+26     	; 0x63e <DIO_Init+0x100>
 624:	3a b3       	in	r19, 0x1a	; 26
 626:	61 e0       	ldi	r22, 0x01	; 1
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	fb 01       	movw	r30, r22
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_Init+0xf4>
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	4a 95       	dec	r20
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_Init+0xf0>
 636:	af 01       	movw	r20, r30
 638:	43 2b       	or	r20, r19
 63a:	4a bb       	out	0x1a, r20	; 26
 63c:	3b c0       	rjmp	.+118    	; 0x6b4 <DIO_Init+0x176>
 63e:	38 ef       	ldi	r19, 0xF8	; 248
 640:	34 0f       	add	r19, r20
 642:	38 30       	cpi	r19, 0x08	; 8
 644:	80 f4       	brcc	.+32     	; 0x666 <DIO_Init+0x128>
 646:	37 b3       	in	r19, 0x17	; 23
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	48 50       	subi	r20, 0x08	; 8
 64c:	51 09       	sbc	r21, r1
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	70 e0       	ldi	r23, 0x00	; 0
 652:	fb 01       	movw	r30, r22
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_Init+0x11c>
 656:	ee 0f       	add	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	4a 95       	dec	r20
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_Init+0x118>
 65e:	af 01       	movw	r20, r30
 660:	43 2b       	or	r20, r19
 662:	47 bb       	out	0x17, r20	; 23
 664:	27 c0       	rjmp	.+78     	; 0x6b4 <DIO_Init+0x176>
 666:	30 ef       	ldi	r19, 0xF0	; 240
 668:	34 0f       	add	r19, r20
 66a:	38 30       	cpi	r19, 0x08	; 8
 66c:	80 f4       	brcc	.+32     	; 0x68e <DIO_Init+0x150>
 66e:	34 b3       	in	r19, 0x14	; 20
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	40 51       	subi	r20, 0x10	; 16
 674:	51 09       	sbc	r21, r1
 676:	61 e0       	ldi	r22, 0x01	; 1
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	fb 01       	movw	r30, r22
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_Init+0x144>
 67e:	ee 0f       	add	r30, r30
 680:	ff 1f       	adc	r31, r31
 682:	4a 95       	dec	r20
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_Init+0x140>
 686:	af 01       	movw	r20, r30
 688:	43 2b       	or	r20, r19
 68a:	44 bb       	out	0x14, r20	; 20
 68c:	13 c0       	rjmp	.+38     	; 0x6b4 <DIO_Init+0x176>
 68e:	38 ee       	ldi	r19, 0xE8	; 232
 690:	34 0f       	add	r19, r20
 692:	38 30       	cpi	r19, 0x08	; 8
 694:	78 f4       	brcc	.+30     	; 0x6b4 <DIO_Init+0x176>
 696:	31 b3       	in	r19, 0x11	; 17
 698:	50 e0       	ldi	r21, 0x00	; 0
 69a:	48 51       	subi	r20, 0x18	; 24
 69c:	51 09       	sbc	r21, r1
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	fb 01       	movw	r30, r22
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_Init+0x16c>
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	4a 95       	dec	r20
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_Init+0x168>
 6ae:	af 01       	movw	r20, r30
 6b0:	43 2b       	or	r20, r19
 6b2:	41 bb       	out	0x11, r20	; 17
 6b4:	fc 01       	movw	r30, r24
 6b6:	ee 0f       	add	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	e8 0f       	add	r30, r24
 6bc:	f9 1f       	adc	r31, r25
 6be:	e0 5a       	subi	r30, 0xA0	; 160
 6c0:	ff 4f       	sbci	r31, 0xFF	; 255
 6c2:	31 81       	ldd	r19, Z+1	; 0x01
 6c4:	31 11       	cpse	r19, r1
 6c6:	60 c0       	rjmp	.+192    	; 0x788 <DIO_Init+0x24a>
 6c8:	fc 01       	movw	r30, r24
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	e8 0f       	add	r30, r24
 6d0:	f9 1f       	adc	r31, r25
 6d2:	e0 5a       	subi	r30, 0xA0	; 160
 6d4:	ff 4f       	sbci	r31, 0xFF	; 255
 6d6:	42 81       	ldd	r20, Z+2	; 0x02
 6d8:	41 11       	cpse	r20, r1
 6da:	56 c0       	rjmp	.+172    	; 0x788 <DIO_Init+0x24a>
 6dc:	fc 01       	movw	r30, r24
 6de:	ee 0f       	add	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	8e 0f       	add	r24, r30
 6e4:	9f 1f       	adc	r25, r31
 6e6:	fc 01       	movw	r30, r24
 6e8:	e0 5a       	subi	r30, 0xA0	; 160
 6ea:	ff 4f       	sbci	r31, 0xFF	; 255
 6ec:	80 81       	ld	r24, Z
 6ee:	88 30       	cpi	r24, 0x08	; 8
 6f0:	70 f4       	brcc	.+28     	; 0x70e <DIO_Init+0x1d0>
 6f2:	3b b3       	in	r19, 0x1b	; 27
 6f4:	41 e0       	ldi	r20, 0x01	; 1
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	ba 01       	movw	r22, r20
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_Init+0x1c2>
 6fc:	66 0f       	add	r22, r22
 6fe:	77 1f       	adc	r23, r23
 700:	8a 95       	dec	r24
 702:	e2 f7       	brpl	.-8      	; 0x6fc <DIO_Init+0x1be>
 704:	cb 01       	movw	r24, r22
 706:	80 95       	com	r24
 708:	83 23       	and	r24, r19
 70a:	8b bb       	out	0x1b, r24	; 27
 70c:	9a c0       	rjmp	.+308    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 70e:	98 ef       	ldi	r25, 0xF8	; 248
 710:	98 0f       	add	r25, r24
 712:	98 30       	cpi	r25, 0x08	; 8
 714:	80 f4       	brcc	.+32     	; 0x736 <DIO_Init+0x1f8>
 716:	38 b3       	in	r19, 0x18	; 24
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	08 97       	sbiw	r24, 0x08	; 8
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	fa 01       	movw	r30, r20
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_Init+0x1ea>
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	8a 95       	dec	r24
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_Init+0x1e6>
 72c:	cf 01       	movw	r24, r30
 72e:	80 95       	com	r24
 730:	83 23       	and	r24, r19
 732:	88 bb       	out	0x18, r24	; 24
 734:	86 c0       	rjmp	.+268    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 736:	90 ef       	ldi	r25, 0xF0	; 240
 738:	98 0f       	add	r25, r24
 73a:	98 30       	cpi	r25, 0x08	; 8
 73c:	80 f4       	brcc	.+32     	; 0x75e <DIO_Init+0x220>
 73e:	35 b3       	in	r19, 0x15	; 21
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	40 97       	sbiw	r24, 0x10	; 16
 744:	41 e0       	ldi	r20, 0x01	; 1
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	ba 01       	movw	r22, r20
 74a:	02 c0       	rjmp	.+4      	; 0x750 <DIO_Init+0x212>
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	8a 95       	dec	r24
 752:	e2 f7       	brpl	.-8      	; 0x74c <DIO_Init+0x20e>
 754:	cb 01       	movw	r24, r22
 756:	80 95       	com	r24
 758:	83 23       	and	r24, r19
 75a:	85 bb       	out	0x15, r24	; 21
 75c:	72 c0       	rjmp	.+228    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 75e:	98 ee       	ldi	r25, 0xE8	; 232
 760:	98 0f       	add	r25, r24
 762:	98 30       	cpi	r25, 0x08	; 8
 764:	08 f0       	brcs	.+2      	; 0x768 <DIO_Init+0x22a>
 766:	6d c0       	rjmp	.+218    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 768:	32 b3       	in	r19, 0x12	; 18
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	48 97       	sbiw	r24, 0x18	; 24
 76e:	41 e0       	ldi	r20, 0x01	; 1
 770:	50 e0       	ldi	r21, 0x00	; 0
 772:	fa 01       	movw	r30, r20
 774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_Init+0x23c>
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	8a 95       	dec	r24
 77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_Init+0x238>
 77e:	cf 01       	movw	r24, r30
 780:	80 95       	com	r24
 782:	83 23       	and	r24, r19
 784:	82 bb       	out	0x12, r24	; 18
 786:	5d c0       	rjmp	.+186    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 788:	31 11       	cpse	r19, r1
 78a:	5b c0       	rjmp	.+182    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 78c:	fc 01       	movw	r30, r24
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	e8 0f       	add	r30, r24
 794:	f9 1f       	adc	r31, r25
 796:	e0 5a       	subi	r30, 0xA0	; 160
 798:	ff 4f       	sbci	r31, 0xFF	; 255
 79a:	32 81       	ldd	r19, Z+2	; 0x02
 79c:	31 30       	cpi	r19, 0x01	; 1
 79e:	09 f0       	breq	.+2      	; 0x7a2 <DIO_Init+0x264>
 7a0:	50 c0       	rjmp	.+160    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7a2:	fc 01       	movw	r30, r24
 7a4:	ee 0f       	add	r30, r30
 7a6:	ff 1f       	adc	r31, r31
 7a8:	8e 0f       	add	r24, r30
 7aa:	9f 1f       	adc	r25, r31
 7ac:	fc 01       	movw	r30, r24
 7ae:	e0 5a       	subi	r30, 0xA0	; 160
 7b0:	ff 4f       	sbci	r31, 0xFF	; 255
 7b2:	80 81       	ld	r24, Z
 7b4:	88 30       	cpi	r24, 0x08	; 8
 7b6:	68 f4       	brcc	.+26     	; 0x7d2 <DIO_Init+0x294>
 7b8:	3b b3       	in	r19, 0x1b	; 27
 7ba:	41 e0       	ldi	r20, 0x01	; 1
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	ba 01       	movw	r22, r20
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_Init+0x288>
 7c2:	66 0f       	add	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	8a 95       	dec	r24
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_Init+0x284>
 7ca:	cb 01       	movw	r24, r22
 7cc:	83 2b       	or	r24, r19
 7ce:	8b bb       	out	0x1b, r24	; 27
 7d0:	38 c0       	rjmp	.+112    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7d2:	98 ef       	ldi	r25, 0xF8	; 248
 7d4:	98 0f       	add	r25, r24
 7d6:	98 30       	cpi	r25, 0x08	; 8
 7d8:	78 f4       	brcc	.+30     	; 0x7f8 <DIO_Init+0x2ba>
 7da:	38 b3       	in	r19, 0x18	; 24
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	08 97       	sbiw	r24, 0x08	; 8
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	fa 01       	movw	r30, r20
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_Init+0x2ae>
 7e8:	ee 0f       	add	r30, r30
 7ea:	ff 1f       	adc	r31, r31
 7ec:	8a 95       	dec	r24
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_Init+0x2aa>
 7f0:	cf 01       	movw	r24, r30
 7f2:	83 2b       	or	r24, r19
 7f4:	88 bb       	out	0x18, r24	; 24
 7f6:	25 c0       	rjmp	.+74     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 7f8:	90 ef       	ldi	r25, 0xF0	; 240
 7fa:	98 0f       	add	r25, r24
 7fc:	98 30       	cpi	r25, 0x08	; 8
 7fe:	78 f4       	brcc	.+30     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 800:	35 b3       	in	r19, 0x15	; 21
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	40 97       	sbiw	r24, 0x10	; 16
 806:	41 e0       	ldi	r20, 0x01	; 1
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	ba 01       	movw	r22, r20
 80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	8a 95       	dec	r24
 814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	cb 01       	movw	r24, r22
 818:	83 2b       	or	r24, r19
 81a:	85 bb       	out	0x15, r24	; 21
 81c:	12 c0       	rjmp	.+36     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 81e:	98 ee       	ldi	r25, 0xE8	; 232
 820:	98 0f       	add	r25, r24
 822:	98 30       	cpi	r25, 0x08	; 8
 824:	70 f4       	brcc	.+28     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 826:	32 b3       	in	r19, 0x12	; 18
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	48 97       	sbiw	r24, 0x18	; 24
 82c:	41 e0       	ldi	r20, 0x01	; 1
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	fa 01       	movw	r30, r20
 832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 834:	ee 0f       	add	r30, r30
 836:	ff 1f       	adc	r31, r31
 838:	8a 95       	dec	r24
 83a:	e2 f7       	brpl	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83c:	cf 01       	movw	r24, r30
 83e:	83 2b       	or	r24, r19
 840:	82 bb       	out	0x12, r24	; 18
 842:	2f 5f       	subi	r18, 0xFF	; 255
 844:	22 23       	and	r18, r18
 846:	09 f4       	brne	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 848:	7c ce       	rjmp	.-776    	; 0x542 <DIO_Init+0x4>
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	08 95       	ret

0000084e <DIO_Write>:
 84e:	61 11       	cpse	r22, r1
 850:	57 c0       	rjmp	.+174    	; 0x900 <__stack+0xa1>
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	fc 01       	movw	r30, r24
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	8e 0f       	add	r24, r30
 85c:	9f 1f       	adc	r25, r31
 85e:	fc 01       	movw	r30, r24
 860:	e0 5a       	subi	r30, 0xA0	; 160
 862:	ff 4f       	sbci	r31, 0xFF	; 255
 864:	80 81       	ld	r24, Z
 866:	88 30       	cpi	r24, 0x08	; 8
 868:	70 f4       	brcc	.+28     	; 0x886 <__stack+0x27>
 86a:	4b b3       	in	r20, 0x1b	; 27
 86c:	21 e0       	ldi	r18, 0x01	; 1
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	b9 01       	movw	r22, r18
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	8a 95       	dec	r24
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	cb 01       	movw	r24, r22
 87e:	80 95       	com	r24
 880:	84 23       	and	r24, r20
 882:	8b bb       	out	0x1b, r24	; 27
 884:	91 c0       	rjmp	.+290    	; 0x9a8 <__stack+0x149>
 886:	98 ef       	ldi	r25, 0xF8	; 248
 888:	98 0f       	add	r25, r24
 88a:	98 30       	cpi	r25, 0x08	; 8
 88c:	80 f4       	brcc	.+32     	; 0x8ae <__stack+0x4f>
 88e:	48 b3       	in	r20, 0x18	; 24
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	08 97       	sbiw	r24, 0x08	; 8
 894:	21 e0       	ldi	r18, 0x01	; 1
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	b9 01       	movw	r22, r18
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	8a 95       	dec	r24
 8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
 8a4:	cb 01       	movw	r24, r22
 8a6:	80 95       	com	r24
 8a8:	84 23       	and	r24, r20
 8aa:	88 bb       	out	0x18, r24	; 24
 8ac:	7d c0       	rjmp	.+250    	; 0x9a8 <__stack+0x149>
 8ae:	90 ef       	ldi	r25, 0xF0	; 240
 8b0:	98 0f       	add	r25, r24
 8b2:	98 30       	cpi	r25, 0x08	; 8
 8b4:	80 f4       	brcc	.+32     	; 0x8d6 <__stack+0x77>
 8b6:	45 b3       	in	r20, 0x15	; 21
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	40 97       	sbiw	r24, 0x10	; 16
 8bc:	21 e0       	ldi	r18, 0x01	; 1
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	b9 01       	movw	r22, r18
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	8a 95       	dec	r24
 8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <__stack+0x65>
 8cc:	cb 01       	movw	r24, r22
 8ce:	80 95       	com	r24
 8d0:	84 23       	and	r24, r20
 8d2:	85 bb       	out	0x15, r24	; 21
 8d4:	69 c0       	rjmp	.+210    	; 0x9a8 <__stack+0x149>
 8d6:	98 ee       	ldi	r25, 0xE8	; 232
 8d8:	98 0f       	add	r25, r24
 8da:	98 30       	cpi	r25, 0x08	; 8
 8dc:	08 f0       	brcs	.+2      	; 0x8e0 <__stack+0x81>
 8de:	64 c0       	rjmp	.+200    	; 0x9a8 <__stack+0x149>
 8e0:	42 b3       	in	r20, 0x12	; 18
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	48 97       	sbiw	r24, 0x18	; 24
 8e6:	21 e0       	ldi	r18, 0x01	; 1
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	b9 01       	movw	r22, r18
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
 8ee:	66 0f       	add	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	8a 95       	dec	r24
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
 8f6:	cb 01       	movw	r24, r22
 8f8:	80 95       	com	r24
 8fa:	84 23       	and	r24, r20
 8fc:	82 bb       	out	0x12, r24	; 18
 8fe:	54 c0       	rjmp	.+168    	; 0x9a8 <__stack+0x149>
 900:	61 30       	cpi	r22, 0x01	; 1
 902:	09 f0       	breq	.+2      	; 0x906 <__stack+0xa7>
 904:	51 c0       	rjmp	.+162    	; 0x9a8 <__stack+0x149>
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	fc 01       	movw	r30, r24
 90a:	ee 0f       	add	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	8e 0f       	add	r24, r30
 910:	9f 1f       	adc	r25, r31
 912:	fc 01       	movw	r30, r24
 914:	e0 5a       	subi	r30, 0xA0	; 160
 916:	ff 4f       	sbci	r31, 0xFF	; 255
 918:	80 81       	ld	r24, Z
 91a:	88 30       	cpi	r24, 0x08	; 8
 91c:	68 f4       	brcc	.+26     	; 0x938 <__stack+0xd9>
 91e:	4b b3       	in	r20, 0x1b	; 27
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	b9 01       	movw	r22, r18
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0xcd>
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	8a 95       	dec	r24
 92e:	e2 f7       	brpl	.-8      	; 0x928 <__stack+0xc9>
 930:	cb 01       	movw	r24, r22
 932:	84 2b       	or	r24, r20
 934:	8b bb       	out	0x1b, r24	; 27
 936:	38 c0       	rjmp	.+112    	; 0x9a8 <__stack+0x149>
 938:	98 ef       	ldi	r25, 0xF8	; 248
 93a:	98 0f       	add	r25, r24
 93c:	98 30       	cpi	r25, 0x08	; 8
 93e:	78 f4       	brcc	.+30     	; 0x95e <__stack+0xff>
 940:	48 b3       	in	r20, 0x18	; 24
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	08 97       	sbiw	r24, 0x08	; 8
 946:	21 e0       	ldi	r18, 0x01	; 1
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	b9 01       	movw	r22, r18
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0xf3>
 94e:	66 0f       	add	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	8a 95       	dec	r24
 954:	e2 f7       	brpl	.-8      	; 0x94e <__stack+0xef>
 956:	cb 01       	movw	r24, r22
 958:	84 2b       	or	r24, r20
 95a:	88 bb       	out	0x18, r24	; 24
 95c:	25 c0       	rjmp	.+74     	; 0x9a8 <__stack+0x149>
 95e:	90 ef       	ldi	r25, 0xF0	; 240
 960:	98 0f       	add	r25, r24
 962:	98 30       	cpi	r25, 0x08	; 8
 964:	78 f4       	brcc	.+30     	; 0x984 <__stack+0x125>
 966:	45 b3       	in	r20, 0x15	; 21
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	40 97       	sbiw	r24, 0x10	; 16
 96c:	21 e0       	ldi	r18, 0x01	; 1
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	b9 01       	movw	r22, r18
 972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x119>
 974:	66 0f       	add	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	8a 95       	dec	r24
 97a:	e2 f7       	brpl	.-8      	; 0x974 <__stack+0x115>
 97c:	cb 01       	movw	r24, r22
 97e:	84 2b       	or	r24, r20
 980:	85 bb       	out	0x15, r24	; 21
 982:	12 c0       	rjmp	.+36     	; 0x9a8 <__stack+0x149>
 984:	98 ee       	ldi	r25, 0xE8	; 232
 986:	98 0f       	add	r25, r24
 988:	98 30       	cpi	r25, 0x08	; 8
 98a:	70 f4       	brcc	.+28     	; 0x9a8 <__stack+0x149>
 98c:	42 b3       	in	r20, 0x12	; 18
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	48 97       	sbiw	r24, 0x18	; 24
 992:	21 e0       	ldi	r18, 0x01	; 1
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	b9 01       	movw	r22, r18
 998:	02 c0       	rjmp	.+4      	; 0x99e <__stack+0x13f>
 99a:	66 0f       	add	r22, r22
 99c:	77 1f       	adc	r23, r23
 99e:	8a 95       	dec	r24
 9a0:	e2 f7       	brpl	.-8      	; 0x99a <__stack+0x13b>
 9a2:	cb 01       	movw	r24, r22
 9a4:	84 2b       	or	r24, r20
 9a6:	82 bb       	out	0x12, r24	; 18
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	08 95       	ret

000009ac <DIO_toggle>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	fc 01       	movw	r30, r24
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	8e 0f       	add	r24, r30
 9b6:	9f 1f       	adc	r25, r31
 9b8:	fc 01       	movw	r30, r24
 9ba:	e0 5a       	subi	r30, 0xA0	; 160
 9bc:	ff 4f       	sbci	r31, 0xFF	; 255
 9be:	80 81       	ld	r24, Z
 9c0:	88 30       	cpi	r24, 0x08	; 8
 9c2:	68 f4       	brcc	.+26     	; 0x9de <DIO_toggle+0x32>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
 9c4:	4b b3       	in	r20, 0x1b	; 27
 9c6:	21 e0       	ldi	r18, 0x01	; 1
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	b9 01       	movw	r22, r18
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_toggle+0x26>
 9ce:	66 0f       	add	r22, r22
 9d0:	77 1f       	adc	r23, r23
 9d2:	8a 95       	dec	r24
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_toggle+0x22>
 9d6:	cb 01       	movw	r24, r22
 9d8:	84 27       	eor	r24, r20
 9da:	8b bb       	out	0x1b, r24	; 27
 9dc:	38 c0       	rjmp	.+112    	; 0xa4e <DIO_toggle+0xa2>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
 9de:	98 ef       	ldi	r25, 0xF8	; 248
 9e0:	98 0f       	add	r25, r24
 9e2:	98 30       	cpi	r25, 0x08	; 8
 9e4:	78 f4       	brcc	.+30     	; 0xa04 <DIO_toggle+0x58>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
 9e6:	48 b3       	in	r20, 0x18	; 24
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	08 97       	sbiw	r24, 0x08	; 8
 9ec:	21 e0       	ldi	r18, 0x01	; 1
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	b9 01       	movw	r22, r18
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_toggle+0x4c>
 9f4:	66 0f       	add	r22, r22
 9f6:	77 1f       	adc	r23, r23
 9f8:	8a 95       	dec	r24
 9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_toggle+0x48>
 9fc:	cb 01       	movw	r24, r22
 9fe:	84 27       	eor	r24, r20
 a00:	88 bb       	out	0x18, r24	; 24
 a02:	25 c0       	rjmp	.+74     	; 0xa4e <DIO_toggle+0xa2>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
 a04:	90 ef       	ldi	r25, 0xF0	; 240
 a06:	98 0f       	add	r25, r24
 a08:	98 30       	cpi	r25, 0x08	; 8
 a0a:	78 f4       	brcc	.+30     	; 0xa2a <DIO_toggle+0x7e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
 a0c:	45 b3       	in	r20, 0x15	; 21
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	40 97       	sbiw	r24, 0x10	; 16
 a12:	21 e0       	ldi	r18, 0x01	; 1
 a14:	30 e0       	ldi	r19, 0x00	; 0
 a16:	b9 01       	movw	r22, r18
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <DIO_toggle+0x72>
 a1a:	66 0f       	add	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	8a 95       	dec	r24
 a20:	e2 f7       	brpl	.-8      	; 0xa1a <DIO_toggle+0x6e>
 a22:	cb 01       	movw	r24, r22
 a24:	84 27       	eor	r24, r20
 a26:	85 bb       	out	0x15, r24	; 21
 a28:	12 c0       	rjmp	.+36     	; 0xa4e <DIO_toggle+0xa2>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
 a2a:	98 ee       	ldi	r25, 0xE8	; 232
 a2c:	98 0f       	add	r25, r24
 a2e:	98 30       	cpi	r25, 0x08	; 8
 a30:	70 f4       	brcc	.+28     	; 0xa4e <DIO_toggle+0xa2>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
 a32:	42 b3       	in	r20, 0x12	; 18
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	48 97       	sbiw	r24, 0x18	; 24
 a38:	21 e0       	ldi	r18, 0x01	; 1
 a3a:	30 e0       	ldi	r19, 0x00	; 0
 a3c:	b9 01       	movw	r22, r18
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <DIO_toggle+0x98>
 a40:	66 0f       	add	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	8a 95       	dec	r24
 a46:	e2 f7       	brpl	.-8      	; 0xa40 <DIO_toggle+0x94>
 a48:	cb 01       	movw	r24, r22
 a4a:	84 27       	eor	r24, r20
 a4c:	82 bb       	out	0x12, r24	; 18
	}//end else if

	return E_OK;
}//end DIO_toggle
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	08 95       	ret

00000a52 <TWI_init>:
#include "I2C.h"

void TWI_init(void)
{
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR_R = 0x02;
 a52:	82 e0       	ldi	r24, 0x02	; 2
 a54:	80 b9       	out	0x00, r24	; 0
	TWSR_R = 0x00;
 a56:	11 b8       	out	0x01, r1	; 1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR_R = 0b00000010; // my address = 0x01 :)
 a58:	82 b9       	out	0x02, r24	; 2
	
    TWCR_R = (1<<TWEN_B); /* enable TWI */
 a5a:	84 e0       	ldi	r24, 0x04	; 4
 a5c:	86 bf       	out	0x36, r24	; 54
 a5e:	08 95       	ret

00000a60 <SPI_initMaster>:
	 * **************************************************************************/

//	DDRB_R |= (1<<PB4) | (1<<PB5) | (1<<PB7);
//	DDRB_R &= ~(1<<PB6);

	DIO_Init();
 a60:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_Init>
	 * MSTR = 1 Enable Mater Mode
	 * CPOL = 0 The Leading Edge of SCK is the Rising Edge, SCK is LOW when idle
	 * CPHA = 0 Sample Data at the Rising Edge of SCK
	 * SPR1 = 0, SPR0 = 0 To Choose Clock = Fosc/4
	 ***********************************************************************/
	SPCR_R = (1<<SPE_B) | (1<<MSTR_B);
 a64:	80 e5       	ldi	r24, 0x50	; 80
 a66:	8d b9       	out	0x0d, r24	; 13
 a68:	08 95       	ret

00000a6a <SPI_initSlave>:
	 * MISO(PB6) = output
	 * SCK(PB7) = input
	 * **************************************************************************/
//	DDRB_R &= (~(1<<PB4)) & (~(1<<PB5)) & (~(1<<PB7));
//	DDRB_R |= (1<<PB6);
	DIO_Init();
 a6a:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_Init>

	/************************** SPCR Description **************************
	 * SPE = 1 ENABLE SPI
	 * SPR1 = 0, SPR0 = 0 To Choose Clock = Fosc/4
	 ***********************************************************************/
	SPCR_R = (1<<SPE_B);
 a6e:	80 e4       	ldi	r24, 0x40	; 64
 a70:	8d b9       	out	0x0d, r24	; 13
 a72:	08 95       	ret

00000a74 <UART_Init>:
enuErrorStatus_t UART_RX_Disable_Interrupt(void)
{
	//clear appropriate bit to disable interrupt
	CLEAR_BIT(UCSRB_R,RXCIE_B);
	return E_OK;
}
 a74:	10 bc       	out	0x20, r1	; 32
 a76:	83 e3       	ldi	r24, 0x33	; 51
 a78:	89 b9       	out	0x09, r24	; 9
 a7a:	88 e1       	ldi	r24, 0x18	; 24
 a7c:	8a b9       	out	0x0a, r24	; 10
 a7e:	80 b5       	in	r24, 0x20	; 32
 a80:	84 60       	ori	r24, 0x04	; 4
 a82:	80 bd       	out	0x20, r24	; 32
 a84:	80 b5       	in	r24, 0x20	; 32
 a86:	82 60       	ori	r24, 0x02	; 2
 a88:	80 bd       	out	0x20, r24	; 32
 a8a:	80 b5       	in	r24, 0x20	; 32
 a8c:	8f 7d       	andi	r24, 0xDF	; 223
 a8e:	80 bd       	out	0x20, r24	; 32
 a90:	80 b5       	in	r24, 0x20	; 32
 a92:	8f 7e       	andi	r24, 0xEF	; 239
 a94:	80 bd       	out	0x20, r24	; 32
 a96:	80 b5       	in	r24, 0x20	; 32
 a98:	87 7f       	andi	r24, 0xF7	; 247
 a9a:	80 bd       	out	0x20, r24	; 32
 a9c:	81 e0       	ldi	r24, 0x01	; 1
 a9e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gError>
 aa2:	08 95       	ret

00000aa4 <UART_SendData>:
 aa4:	98 2f       	mov	r25, r24
 aa6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gError>
 aaa:	88 23       	and	r24, r24
 aac:	41 f0       	breq	.+16     	; 0xabe <UART_SendData+0x1a>
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <gError>
 ab4:	5d 9b       	sbis	0x0b, 5	; 11
 ab6:	fe cf       	rjmp	.-4      	; 0xab4 <UART_SendData+0x10>
 ab8:	9c b9       	out	0x0c, r25	; 12
 aba:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gError>
 abe:	08 95       	ret

00000ac0 <UART_RecieveDataNoBLOCK>:
 ac0:	fc 01       	movw	r30, r24
 ac2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gError>
 ac6:	88 23       	and	r24, r24
 ac8:	59 f0       	breq	.+22     	; 0xae0 <UART_RecieveDataNoBLOCK+0x20>
 aca:	91 e0       	ldi	r25, 0x01	; 1
 acc:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <gError>
 ad0:	5f 9b       	sbis	0x0b, 7	; 11
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <UART_RecieveDataNoBLOCK+0x1c>
 ad4:	8c b1       	in	r24, 0x0c	; 12
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	91 83       	std	Z+1, r25	; 0x01
 ada:	80 83       	st	Z, r24
 adc:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gError>
 ae0:	08 95       	ret

00000ae2 <UART_RX_Enable_Interrupt>:
 ae2:	8a b1       	in	r24, 0x0a	; 10
 ae4:	80 68       	ori	r24, 0x80	; 128
 ae6:	8a b9       	out	0x0a, r24	; 10
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	08 95       	ret

00000aec <UART_RX_SetCallBack>:
* Description: A function to enable setup callback funtion for RX complete interrupt
************************************************************************************/
enuErrorStatus_t UART_RX_SetCallBack(void(*local_fptr)(void))
{
	//check if the sent pointer points to a valid position
	if (local_fptr== NULLPTR)     return E_ERROR;
 aec:	00 97       	sbiw	r24, 0x00	; 0
 aee:	31 f0       	breq	.+12     	; 0xafc <UART_RX_SetCallBack+0x10>
	//if so, store the pointer address in the global pointer to function
	RXC_Callback=local_fptr;
 af0:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <RXC_Callback+0x1>
 af4:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <RXC_Callback>
	return E_OK;
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	08 95       	ret
* Description: A function to enable setup callback funtion for RX complete interrupt
************************************************************************************/
enuErrorStatus_t UART_RX_SetCallBack(void(*local_fptr)(void))
{
	//check if the sent pointer points to a valid position
	if (local_fptr== NULLPTR)     return E_ERROR;
 afc:	80 e0       	ldi	r24, 0x00	; 0
	//if so, store the pointer address in the global pointer to function
	RXC_Callback=local_fptr;
	return E_OK;
}
 afe:	08 95       	ret

00000b00 <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
 b00:	1f 92       	push	r1
 b02:	0f 92       	push	r0
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	0f 92       	push	r0
 b08:	11 24       	eor	r1, r1
 b0a:	2f 93       	push	r18
 b0c:	3f 93       	push	r19
 b0e:	4f 93       	push	r20
 b10:	5f 93       	push	r21
 b12:	6f 93       	push	r22
 b14:	7f 93       	push	r23
 b16:	8f 93       	push	r24
 b18:	9f 93       	push	r25
 b1a:	af 93       	push	r26
 b1c:	bf 93       	push	r27
 b1e:	ef 93       	push	r30
 b20:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (RXC_Callback!=NULLPTR)
 b22:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <RXC_Callback>
 b26:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <RXC_Callback+0x1>
 b2a:	30 97       	sbiw	r30, 0x00	; 0
 b2c:	09 f0       	breq	.+2      	; 0xb30 <__vector_13+0x30>
	{
		//call the function
		RXC_Callback();
 b2e:	09 95       	icall
	}
}
 b30:	ff 91       	pop	r31
 b32:	ef 91       	pop	r30
 b34:	bf 91       	pop	r27
 b36:	af 91       	pop	r26
 b38:	9f 91       	pop	r25
 b3a:	8f 91       	pop	r24
 b3c:	7f 91       	pop	r23
 b3e:	6f 91       	pop	r22
 b40:	5f 91       	pop	r21
 b42:	4f 91       	pop	r20
 b44:	3f 91       	pop	r19
 b46:	2f 91       	pop	r18
 b48:	0f 90       	pop	r0
 b4a:	0f be       	out	0x3f, r0	; 63
 b4c:	0f 90       	pop	r0
 b4e:	1f 90       	pop	r1
 b50:	18 95       	reti

00000b52 <__vector_15>:
ISR(UART_TX_vect)
{
 b52:	1f 92       	push	r1
 b54:	0f 92       	push	r0
 b56:	0f b6       	in	r0, 0x3f	; 63
 b58:	0f 92       	push	r0
 b5a:	11 24       	eor	r1, r1
 b5c:	2f 93       	push	r18
 b5e:	3f 93       	push	r19
 b60:	4f 93       	push	r20
 b62:	5f 93       	push	r21
 b64:	6f 93       	push	r22
 b66:	7f 93       	push	r23
 b68:	8f 93       	push	r24
 b6a:	9f 93       	push	r25
 b6c:	af 93       	push	r26
 b6e:	bf 93       	push	r27
 b70:	ef 93       	push	r30
 b72:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (TXC_Callback!=NULLPTR)
 b74:	e0 91 77 00 	lds	r30, 0x0077	; 0x800077 <TXC_Callback>
 b78:	f0 91 78 00 	lds	r31, 0x0078	; 0x800078 <TXC_Callback+0x1>
 b7c:	30 97       	sbiw	r30, 0x00	; 0
 b7e:	09 f0       	breq	.+2      	; 0xb82 <__vector_15+0x30>
	{
		//call the function
		TXC_Callback();
 b80:	09 95       	icall
	}
}
 b82:	ff 91       	pop	r31
 b84:	ef 91       	pop	r30
 b86:	bf 91       	pop	r27
 b88:	af 91       	pop	r26
 b8a:	9f 91       	pop	r25
 b8c:	8f 91       	pop	r24
 b8e:	7f 91       	pop	r23
 b90:	6f 91       	pop	r22
 b92:	5f 91       	pop	r21
 b94:	4f 91       	pop	r20
 b96:	3f 91       	pop	r19
 b98:	2f 91       	pop	r18
 b9a:	0f 90       	pop	r0
 b9c:	0f be       	out	0x3f, r0	; 63
 b9e:	0f 90       	pop	r0
 ba0:	1f 90       	pop	r1
 ba2:	18 95       	reti

00000ba4 <__ashldi3>:
 ba4:	0f 93       	push	r16
 ba6:	08 30       	cpi	r16, 0x08	; 8
 ba8:	90 f0       	brcs	.+36     	; 0xbce <__ashldi3+0x2a>
 baa:	98 2f       	mov	r25, r24
 bac:	87 2f       	mov	r24, r23
 bae:	76 2f       	mov	r23, r22
 bb0:	65 2f       	mov	r22, r21
 bb2:	54 2f       	mov	r21, r20
 bb4:	43 2f       	mov	r20, r19
 bb6:	32 2f       	mov	r19, r18
 bb8:	22 27       	eor	r18, r18
 bba:	08 50       	subi	r16, 0x08	; 8
 bbc:	f4 cf       	rjmp	.-24     	; 0xba6 <__ashldi3+0x2>
 bbe:	22 0f       	add	r18, r18
 bc0:	33 1f       	adc	r19, r19
 bc2:	44 1f       	adc	r20, r20
 bc4:	55 1f       	adc	r21, r21
 bc6:	66 1f       	adc	r22, r22
 bc8:	77 1f       	adc	r23, r23
 bca:	88 1f       	adc	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	0a 95       	dec	r16
 bd0:	b2 f7       	brpl	.-20     	; 0xbbe <__ashldi3+0x1a>
 bd2:	0f 91       	pop	r16
 bd4:	08 95       	ret

00000bd6 <__adddi3>:
 bd6:	2a 0d       	add	r18, r10
 bd8:	3b 1d       	adc	r19, r11
 bda:	4c 1d       	adc	r20, r12
 bdc:	5d 1d       	adc	r21, r13
 bde:	6e 1d       	adc	r22, r14
 be0:	7f 1d       	adc	r23, r15
 be2:	80 1f       	adc	r24, r16
 be4:	91 1f       	adc	r25, r17
 be6:	08 95       	ret

00000be8 <__cmpdi2>:
 be8:	2a 15       	cp	r18, r10
 bea:	3b 05       	cpc	r19, r11
 bec:	4c 05       	cpc	r20, r12
 bee:	5d 05       	cpc	r21, r13
 bf0:	6e 05       	cpc	r22, r14
 bf2:	7f 05       	cpc	r23, r15
 bf4:	80 07       	cpc	r24, r16
 bf6:	91 07       	cpc	r25, r17
 bf8:	08 95       	ret

00000bfa <_exit>:
 bfa:	f8 94       	cli

00000bfc <__stop_program>:
 bfc:	ff cf       	rjmp	.-2      	; 0xbfc <__stop_program>
