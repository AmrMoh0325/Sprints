
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b6  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070d  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e4  00000000  00000000  0000143b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050f  00000000  00000000  00001fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000024c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  8a:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <test>:

uint8_t i=0;

void test (void)
{
   UART_SendData(i++);
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	98 0f       	add	r25, r24
  9a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_end>
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 87 00 	call	0x10e	; 0x10e <UART_SendData>
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void)
{
   uint16_t Data=0;
   UART_Init();
  a6:	0e 94 5d 00 	call	0xba	; 0xba <UART_Init>
   UART_RX_Enable_Interrupt();
  aa:	0e 94 8c 00 	call	0x118	; 0x118 <UART_RX_Enable_Interrupt>
   UART_RX_SetCallBack(test);
  ae:	89 e4       	ldi	r24, 0x49	; 73
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 91 00 	call	0x122	; 0x122 <UART_RX_SetCallBack>
   sei();
  b6:	78 94       	sei
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x12>

000000ba <UART_Init>:
enuErrorStatus_t UART_RX_Disable_Interrupt(void)
{
   //clear appropriate bit to disable interrupt
   CLR_BIT(UCSRB_R,RXCIE_B);
   return SUCCESS;
}
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	19 82       	std	Y+1, r1	; 0x01
  c6:	10 bc       	out	0x20, r1	; 32
  c8:	83 e3       	ldi	r24, 0x33	; 51
  ca:	89 b9       	out	0x09, r24	; 9
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	80 b5       	in	r24, 0x20	; 32
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 bd       	out	0x20, r24	; 32
  f6:	99 81       	ldd	r25, Y+1	; 0x01
  f8:	80 b5       	in	r24, 0x20	; 32
  fa:	89 2b       	or	r24, r25
  fc:	80 bd       	out	0x20, r24	; 32
  fe:	80 b5       	in	r24, 0x20	; 32
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	80 bd       	out	0x20, r24	; 32
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0f 90       	pop	r0
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <UART_SendData>:
 10e:	5d 9b       	sbis	0x0b, 5	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <UART_SendData>
 112:	8c b9       	out	0x0c, r24	; 12
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret

00000118 <UART_RX_Enable_Interrupt>:
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8a b9       	out	0x0a, r24	; 10
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	08 95       	ret

00000122 <UART_RX_SetCallBack>:
* Description: A function to enable setup callback funtion for RX complete interrupt
************************************************************************************/
enuErrorStatus_t UART_RX_SetCallBack(void(*local_fptr)(void))
{
   //check if the sent pointer points to a valid position
   if (local_fptr== NULLPTR)     return ERROR;
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	31 f0       	breq	.+12     	; 0x132 <UART_RX_SetCallBack+0x10>
   //if so, store the pointer address in the global pointer to function
   RXC_Callback=local_fptr;
 126:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <RXC_Callback+0x1>
 12a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <RXC_Callback>
   return SUCCESS;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
* Description: A function to enable setup callback funtion for RX complete interrupt
************************************************************************************/
enuErrorStatus_t UART_RX_SetCallBack(void(*local_fptr)(void))
{
   //check if the sent pointer points to a valid position
   if (local_fptr== NULLPTR)     return ERROR;
 132:	80 e0       	ldi	r24, 0x00	; 0
   //if so, store the pointer address in the global pointer to function
   RXC_Callback=local_fptr;
   return SUCCESS;
}
 134:	08 95       	ret

00000136 <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	2f 93       	push	r18
 142:	3f 93       	push	r19
 144:	4f 93       	push	r20
 146:	5f 93       	push	r21
 148:	6f 93       	push	r22
 14a:	7f 93       	push	r23
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
   //if the global pointer to function points to a valid position
   if (RXC_Callback!=NULLPTR)
 158:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <RXC_Callback>
 15c:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <RXC_Callback+0x1>
 160:	30 97       	sbiw	r30, 0x00	; 0
 162:	09 f0       	breq	.+2      	; 0x166 <__vector_13+0x30>
   {
      //call the function
      RXC_Callback();
 164:	09 95       	icall
   }
}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_15>:

ISR(UART_TX_vect)
{
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
   //if the global pointer to function points to a valid position
   if (TXC_Callback!=NULLPTR)
 1aa:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <TXC_Callback>
 1ae:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <TXC_Callback+0x1>
 1b2:	30 97       	sbiw	r30, 0x00	; 0
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <__vector_15+0x30>
   {
      //call the function
      TXC_Callback();
 1b6:	09 95       	icall
   }
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
