
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000969  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d6  00000000  00000000  000013bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  00001f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000247d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "Utils.h"
#include "UART/UART.h"


int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
   uint16_t Data='A';
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
   UART_Init();
  a4:	0e 94 5d 00 	call	0xba	; 0xba <UART_Init>
    /* Replace with your application code */
    while (1) 
    {
       UART_SendData(Data); 
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	0e 94 97 00 	call	0x12e	; 0x12e <UART_SendData>
       UART_ReceiveData(&Data);
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 87 00 	call	0x10e	; 0x10e <UART_ReceiveData>
  b8:	f7 cf       	rjmp	.-18     	; 0xa8 <main+0x16>

000000ba <UART_Init>:
   //check if the sent pointer points to a valid position
   if (local_fptr== NULLPTR)     return ERROR;
   //if so, store the pointer address in the global pointer to function
   RXC_Callback=local_fptr;
   return SUCCESS;
}
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	19 82       	std	Y+1, r1	; 0x01
  c6:	10 bc       	out	0x20, r1	; 32
  c8:	83 e3       	ldi	r24, 0x33	; 51
  ca:	89 b9       	out	0x09, r24	; 9
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	8b 7f       	andi	r24, 0xFB	; 251
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	80 b5       	in	r24, 0x20	; 32
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 bd       	out	0x20, r24	; 32
  f6:	99 81       	ldd	r25, Y+1	; 0x01
  f8:	80 b5       	in	r24, 0x20	; 32
  fa:	89 2b       	or	r24, r25
  fc:	80 bd       	out	0x20, r24	; 32
  fe:	80 b5       	in	r24, 0x20	; 32
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	80 bd       	out	0x20, r24	; 32
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0f 90       	pop	r0
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <UART_ReceiveData>:
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	61 f0       	breq	.+24     	; 0x12a <UART_ReceiveData+0x1c>
 112:	fc 01       	movw	r30, r24
 114:	11 82       	std	Z+1, r1	; 0x01
 116:	10 82       	st	Z, r1
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <UART_ReceiveData+0xa>
 11c:	2c b1       	in	r18, 0x0c	; 12
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	31 83       	std	Z+1, r19	; 0x01
 124:	20 83       	st	Z, r18
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	08 95       	ret
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret

0000012e <UART_SendData>:
 12e:	5d 9b       	sbis	0x0b, 5	; 11
 130:	fe cf       	rjmp	.-4      	; 0x12e <UART_SendData>
 132:	8c b9       	out	0x0c, r24	; 12
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	08 95       	ret

00000138 <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
   //if the global pointer to function points to a valid position
   if (RXC_Callback!=NULLPTR)
 15a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <RXC_Callback>
 15e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <RXC_Callback+0x1>
 162:	30 97       	sbiw	r30, 0x00	; 0
 164:	09 f0       	breq	.+2      	; 0x168 <__vector_13+0x30>
   {
      //call the function
      RXC_Callback();
 166:	09 95       	icall
   }
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_15>:

ISR(UART_TX_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
   //if the global pointer to function points to a valid position
   if (TXC_Callback!=NULLPTR)
 1ac:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	30 97       	sbiw	r30, 0x00	; 0
 1b6:	09 f0       	breq	.+2      	; 0x1ba <__vector_15+0x30>
   {
      //call the function
      TXC_Callback();
 1b8:	09 95       	icall
   }
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
