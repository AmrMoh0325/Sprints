
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000546  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000b2  008000b2  0000062c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e2  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a39  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000957  00000000  00000000  000024db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a6  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006be  00000000  00000000  000035b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003c74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8a:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <String_compare>:
* Parameters (out): sint8_t
* Return value: -1= First>Second    ||    0=Strings are identical   ||   1= First<Second
* Description: A function to check if two strings are identical or not
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
  92:	dc 01       	movw	r26, r24
   uint16_t u16i;
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	0a c0       	rjmp	.+20     	; 0xae <String_compare+0x1c>
   {
      if      (str1[u16i] < str2[u16i])     return -1;
  9a:	fb 01       	movw	r30, r22
  9c:	e2 0f       	add	r30, r18
  9e:	f3 1f       	adc	r31, r19
  a0:	40 81       	ld	r20, Z
  a2:	94 17       	cp	r25, r20
  a4:	88 f0       	brcs	.+34     	; 0xc8 <String_compare+0x36>
      else if (str1[u16i] > str2[u16i])     return 1;
  a6:	49 17       	cp	r20, r25
  a8:	88 f0       	brcs	.+34     	; 0xcc <String_compare+0x3a>
* Description: A function to check if two strings are identical or not
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
   uint16_t u16i;
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
  ae:	fd 01       	movw	r30, r26
  b0:	e2 0f       	add	r30, r18
  b2:	f3 1f       	adc	r31, r19
  b4:	90 81       	ld	r25, Z
  b6:	91 11       	cpse	r25, r1
  b8:	f0 cf       	rjmp	.-32     	; 0x9a <String_compare+0x8>
  ba:	fb 01       	movw	r30, r22
  bc:	e2 0f       	add	r30, r18
  be:	f3 1f       	adc	r31, r19
  c0:	80 81       	ld	r24, Z
  c2:	81 11       	cpse	r24, r1
  c4:	ea cf       	rjmp	.-44     	; 0x9a <String_compare+0x8>
  c6:	08 95       	ret
   {
      if      (str1[u16i] < str2[u16i])     return -1;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	08 95       	ret
      else if (str1[u16i] > str2[u16i])     return 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
}
  ce:	08 95       	ret

000000d0 <Traffic_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to make necessary initializations for the application
************************************************************************************/
enuErrorStatus_t Traffic_Init(void)
{
  d0:	cf 93       	push	r28
   //initialize LEDS
   uint8_t Flag1=LED_Init();
  d2:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_Init>
  d6:	c8 2f       	mov	r28, r24
   //Initialize UART
   uint8_t Flag2=UART_Init();
  d8:	0e 94 1a 02 	call	0x434	; 0x434 <UART_Init>
   if (Flag1 && Flag2)  return SUCCESS;
  dc:	cc 23       	and	r28, r28
  de:	19 f0       	breq	.+6      	; 0xe6 <Traffic_Init+0x16>
  e0:	81 11       	cpse	r24, r1
  e2:	03 c0       	rjmp	.+6      	; 0xea <Traffic_Init+0x1a>
  e4:	03 c0       	rjmp	.+6      	; 0xec <Traffic_Init+0x1c>
   return(ERROR);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	01 c0       	rjmp	.+2      	; 0xec <Traffic_Init+0x1c>
{
   //initialize LEDS
   uint8_t Flag1=LED_Init();
   //Initialize UART
   uint8_t Flag2=UART_Init();
   if (Flag1 && Flag2)  return SUCCESS;
  ea:	81 e0       	ldi	r24, 0x01	; 1
   return(ERROR);
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <Traffic_Update>:
* Description: A function to update the state of the application
************************************************************************************/
enuErrorStatus_t Traffic_Update(void)
{
   //recieve uart input
   UART_ReceiveString(UART_buffer,10);
  f0:	6a e0       	ldi	r22, 0x0A	; 10
  f2:	82 eb       	ldi	r24, 0xB2	; 178
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <UART_ReceiveString>
   //if received data = START
   if (String_compare(UART_buffer,(uint8_t *)"START")==0)
  fa:	60 e6       	ldi	r22, 0x60	; 96
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	82 eb       	ldi	r24, 0xB2	; 178
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 106:	81 11       	cpse	r24, r1
 108:	0e c0       	rjmp	.+28     	; 0x126 <Traffic_Update+0x36>
   {
      //turn on green led and turn off the rest
      LED_ON(Green);
 10a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_ON>
      LED_OFF(Yellow);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_OFF(Red);
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      //show up feedback to the user
      UART_SendString((uint8_t *)"Green LED is on\n");
 11a:	86 e6       	ldi	r24, 0x66	; 102
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 84 02 	call	0x508	; 0x508 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
      LED_OFF(Red);
      //show up feedback to the user
      UART_SendString((uint8_t *)"Green LED is on\n");
   }
   //if received data = WAIT
   else if (String_compare(UART_buffer,(uint8_t *)"WAIT")==0)
 126:	67 e7       	ldi	r22, 0x77	; 119
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	82 eb       	ldi	r24, 0xB2	; 178
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 132:	81 11       	cpse	r24, r1
 134:	0e c0       	rjmp	.+28     	; 0x152 <Traffic_Update+0x62>
   {
      //turn on yellow led and turn off the rest
      LED_OFF(Green);
 136:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_ON(Yellow);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_ON>
      LED_OFF(Red);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      //show up feedback to the user
      UART_SendString((uint8_t *)"YELLOW LED is on\n");
 146:	8c e7       	ldi	r24, 0x7C	; 124
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 84 02 	call	0x508	; 0x508 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
      LED_OFF(Red);
      //show up feedback to the user
      UART_SendString((uint8_t *)"YELLOW LED is on\n");
   }
   //if received data = STOP
   else if (String_compare(UART_buffer,(uint8_t *)"STOP")==0)
 152:	6e e8       	ldi	r22, 0x8E	; 142
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	82 eb       	ldi	r24, 0xB2	; 178
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 15e:	81 11       	cpse	r24, r1
 160:	0e c0       	rjmp	.+28     	; 0x17e <Traffic_Update+0x8e>
   {
      //turn on red led and turn off the rest
      LED_OFF(Green);
 162:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_OFF(Yellow);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_ON(Red);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_ON>
      //show up feedback to the user
      UART_SendString((uint8_t *)"RED LED is on\n");
 172:	83 e9       	ldi	r24, 0x93	; 147
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 84 02 	call	0x508	; 0x508 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret
      LED_ON(Red);
      //show up feedback to the user
      UART_SendString((uint8_t *)"RED LED is on\n");
   }
   //if received data = AT
   else if (String_compare(UART_buffer,(uint8_t *)"AT")==0)
 17e:	62 ea       	ldi	r22, 0xA2	; 162
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	82 eb       	ldi	r24, 0xB2	; 178
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 18a:	81 11       	cpse	r24, r1
 18c:	06 c0       	rjmp	.+12     	; 0x19a <Traffic_Update+0xaa>
   {
      //show up acknowledgment message
      UART_SendString((uint8_t *)"OK\n");
 18e:	85 ea       	ldi	r24, 0xA5	; 165
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 84 02 	call	0x508	; 0x508 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
      //show up acknowledgment message
      UART_SendString((uint8_t *)"OK\n");
   }
   else
   {
      return ERROR;
 19a:	80 e0       	ldi	r24, 0x00	; 0
   }
   return SUCCESS;
 19c:	08 95       	ret

0000019e <LED_Init>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the led
*************************************************************************************************/
enuErrorStatus_t	LED_Init(void)
{
   return DIO_Init();
 19e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_Init>
}//end LED_Init
 1a2:	08 95       	ret

000001a4 <LED_ON>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led on
*************************************************************************************************/
enuErrorStatus_t	LED_ON(enuPinConfig_t LED)
{
   DIO_Write(LED, HIGH);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write>
   return SUCCESS;
}//end LED_ON
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	08 95       	ret

000001ae <LED_OFF>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led off
*************************************************************************************************/
enuErrorStatus_t	LED_OFF(enuPinConfig_t LED)
{
   DIO_Write(LED, LOW);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write>
   return SUCCESS;

}//end LED_OFF
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	08 95       	ret

000001b8 <main>:



int main(void)
{
   Traffic_Init();
 1b8:	0e 94 68 00 	call	0xd0	; 0xd0 <Traffic_Init>
   while (1) 
   {
      Traffic_Update();
 1bc:	0e 94 78 00 	call	0xf0	; 0xf0 <Traffic_Update>
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <main+0x4>

000001c2 <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	b0 c0       	rjmp	.+352    	; 0x326 <DIO_Init+0x164>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
 1c6:	84 2f       	mov	r24, r20
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	e8 0f       	add	r30, r24
 1d2:	f9 1f       	adc	r31, r25
 1d4:	e7 55       	subi	r30, 0x57	; 87
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	20 81       	ld	r18, Z
 1da:	32 2f       	mov	r19, r18
 1dc:	36 95       	lsr	r19
 1de:	36 95       	lsr	r19
 1e0:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
 1e2:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
 1e4:	34 30       	cpi	r19, 0x04	; 4
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <DIO_Init+0x28>
 1e8:	a3 c0       	rjmp	.+326    	; 0x330 <DIO_Init+0x16e>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
 1ea:	31 30       	cpi	r19, 0x01	; 1
 1ec:	69 f1       	breq	.+90     	; 0x248 <DIO_Init+0x86>
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <DIO_Init+0x3c>
 1f0:	32 30       	cpi	r19, 0x02	; 2
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <DIO_Init+0x34>
 1f4:	4e c0       	rjmp	.+156    	; 0x292 <DIO_Init+0xd0>
 1f6:	33 30       	cpi	r19, 0x03	; 3
 1f8:	09 f4       	brne	.+2      	; 0x1fc <DIO_Init+0x3a>
 1fa:	70 c0       	rjmp	.+224    	; 0x2dc <DIO_Init+0x11a>
 1fc:	93 c0       	rjmp	.+294    	; 0x324 <DIO_Init+0x162>
      {
         case M_PORTA:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRA_R,u8pin);
 1fe:	ea b3       	in	r30, 0x1a	; 26
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	db 01       	movw	r26, r22
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_Init+0x4a>
 208:	aa 0f       	add	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	2a 95       	dec	r18
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_Init+0x46>
 210:	9d 01       	movw	r18, r26
 212:	5a 2f       	mov	r21, r26
 214:	50 95       	com	r21
 216:	6e 2f       	mov	r22, r30
 218:	65 23       	and	r22, r21
 21a:	6a bb       	out	0x1a, r22	; 26
            CLR_BIT(PORTA_R,u8pin);
 21c:	6b b3       	in	r22, 0x1b	; 27
 21e:	56 23       	and	r21, r22
 220:	5b bb       	out	0x1b, r21	; 27
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 222:	fc 01       	movw	r30, r24
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	8e 0f       	add	r24, r30
 22a:	9f 1f       	adc	r25, r31
 22c:	fc 01       	movw	r30, r24
 22e:	e7 55       	subi	r30, 0x57	; 87
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	81 81       	ldd	r24, Z+1	; 0x01
 234:	88 23       	and	r24, r24
 236:	21 f0       	breq	.+8      	; 0x240 <DIO_Init+0x7e>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRA_R,u8pin);
 238:	8a b3       	in	r24, 0x1a	; 26
 23a:	28 2b       	or	r18, r24
 23c:	2a bb       	out	0x1a, r18	; 26
 23e:	72 c0       	rjmp	.+228    	; 0x324 <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTA_R,u8pin);
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	28 2b       	or	r18, r24
 244:	2b bb       	out	0x1b, r18	; 27
 246:	6e c0       	rjmp	.+220    	; 0x324 <DIO_Init+0x162>
            }
         break;

         case M_PORTB:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRB_R,u8pin);
 248:	e7 b3       	in	r30, 0x17	; 23
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	db 01       	movw	r26, r22
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_Init+0x94>
 252:	aa 0f       	add	r26, r26
 254:	bb 1f       	adc	r27, r27
 256:	2a 95       	dec	r18
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_Init+0x90>
 25a:	9d 01       	movw	r18, r26
 25c:	5a 2f       	mov	r21, r26
 25e:	50 95       	com	r21
 260:	6e 2f       	mov	r22, r30
 262:	65 23       	and	r22, r21
 264:	67 bb       	out	0x17, r22	; 23
            CLR_BIT(PORTB_R,u8pin);
 266:	68 b3       	in	r22, 0x18	; 24
 268:	56 23       	and	r21, r22
 26a:	58 bb       	out	0x18, r21	; 24
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 26c:	fc 01       	movw	r30, r24
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	8e 0f       	add	r24, r30
 274:	9f 1f       	adc	r25, r31
 276:	fc 01       	movw	r30, r24
 278:	e7 55       	subi	r30, 0x57	; 87
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	81 81       	ldd	r24, Z+1	; 0x01
 27e:	88 23       	and	r24, r24
 280:	21 f0       	breq	.+8      	; 0x28a <DIO_Init+0xc8>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRB_R,u8pin);
 282:	87 b3       	in	r24, 0x17	; 23
 284:	28 2b       	or	r18, r24
 286:	27 bb       	out	0x17, r18	; 23
 288:	4d c0       	rjmp	.+154    	; 0x324 <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTB_R,u8pin);
 28a:	88 b3       	in	r24, 0x18	; 24
 28c:	28 2b       	or	r18, r24
 28e:	28 bb       	out	0x18, r18	; 24
 290:	49 c0       	rjmp	.+146    	; 0x324 <DIO_Init+0x162>
            }
         break;

         case M_PORTC:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRC_R,u8pin);
 292:	e4 b3       	in	r30, 0x14	; 20
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	db 01       	movw	r26, r22
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_Init+0xde>
 29c:	aa 0f       	add	r26, r26
 29e:	bb 1f       	adc	r27, r27
 2a0:	2a 95       	dec	r18
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_Init+0xda>
 2a4:	9d 01       	movw	r18, r26
 2a6:	5a 2f       	mov	r21, r26
 2a8:	50 95       	com	r21
 2aa:	6e 2f       	mov	r22, r30
 2ac:	65 23       	and	r22, r21
 2ae:	64 bb       	out	0x14, r22	; 20
            CLR_BIT(PORTC_R,u8pin);
 2b0:	65 b3       	in	r22, 0x15	; 21
 2b2:	56 23       	and	r21, r22
 2b4:	55 bb       	out	0x15, r21	; 21
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 2b6:	fc 01       	movw	r30, r24
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	8e 0f       	add	r24, r30
 2be:	9f 1f       	adc	r25, r31
 2c0:	fc 01       	movw	r30, r24
 2c2:	e7 55       	subi	r30, 0x57	; 87
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	81 81       	ldd	r24, Z+1	; 0x01
 2c8:	88 23       	and	r24, r24
 2ca:	21 f0       	breq	.+8      	; 0x2d4 <DIO_Init+0x112>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRC_R,u8pin);
 2cc:	84 b3       	in	r24, 0x14	; 20
 2ce:	28 2b       	or	r18, r24
 2d0:	24 bb       	out	0x14, r18	; 20
 2d2:	28 c0       	rjmp	.+80     	; 0x324 <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTC_R,u8pin);
 2d4:	85 b3       	in	r24, 0x15	; 21
 2d6:	28 2b       	or	r18, r24
 2d8:	25 bb       	out	0x15, r18	; 21
 2da:	24 c0       	rjmp	.+72     	; 0x324 <DIO_Init+0x162>
            }
         break;

         case M_PORTD:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRD_R,u8pin);
 2dc:	e1 b3       	in	r30, 0x11	; 17
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	db 01       	movw	r26, r22
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_Init+0x128>
 2e6:	aa 0f       	add	r26, r26
 2e8:	bb 1f       	adc	r27, r27
 2ea:	2a 95       	dec	r18
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_Init+0x124>
 2ee:	9d 01       	movw	r18, r26
 2f0:	5a 2f       	mov	r21, r26
 2f2:	50 95       	com	r21
 2f4:	6e 2f       	mov	r22, r30
 2f6:	65 23       	and	r22, r21
 2f8:	61 bb       	out	0x11, r22	; 17
            CLR_BIT(PORTD_R,u8pin);
 2fa:	62 b3       	in	r22, 0x12	; 18
 2fc:	56 23       	and	r21, r22
 2fe:	52 bb       	out	0x12, r21	; 18
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 300:	fc 01       	movw	r30, r24
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	8e 0f       	add	r24, r30
 308:	9f 1f       	adc	r25, r31
 30a:	fc 01       	movw	r30, r24
 30c:	e7 55       	subi	r30, 0x57	; 87
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	81 81       	ldd	r24, Z+1	; 0x01
 312:	88 23       	and	r24, r24
 314:	21 f0       	breq	.+8      	; 0x31e <DIO_Init+0x15c>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRD_R,u8pin);
 316:	81 b3       	in	r24, 0x11	; 17
 318:	28 2b       	or	r18, r24
 31a:	21 bb       	out	0x11, r18	; 17
 31c:	03 c0       	rjmp	.+6      	; 0x324 <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTD_R,u8pin);
 31e:	82 b3       	in	r24, 0x12	; 18
 320:	28 2b       	or	r18, r24
 322:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 324:	4f 5f       	subi	r20, 0xFF	; 255
 326:	43 30       	cpi	r20, 0x03	; 3
 328:	08 f4       	brcc	.+2      	; 0x32c <DIO_Init+0x16a>
 32a:	4d cf       	rjmp	.-358    	; 0x1c6 <DIO_Init+0x4>
            }
         break;         
      }    
   }
   //return success status
   return SUCCESS;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 330:	80 e0       	ldi	r24, 0x00	; 0
         break;         
      }    
   }
   //return success status
   return SUCCESS;
}
 332:	08 95       	ret

00000334 <DIO_Write>:
************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8Data)
{
   uint8_t u8port,u8pin;
   //calculate the port and pin number of the selected object
   u8port=astrDIOConfigParameters[u8GroupId].enuPinNo / DIO_PINS_NO;
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	fc 01       	movw	r30, r24
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e8 0f       	add	r30, r24
 33e:	f9 1f       	adc	r31, r25
 340:	e7 55       	subi	r30, 0x57	; 87
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	20 81       	ld	r18, Z
 346:	32 2f       	mov	r19, r18
 348:	36 95       	lsr	r19
 34a:	36 95       	lsr	r19
 34c:	36 95       	lsr	r19
   u8pin =astrDIOConfigParameters[u8GroupId].enuPinNo % DIO_PINS_NO;
 34e:	27 70       	andi	r18, 0x07	; 7
   
   //if port number is invalid or the pin is set as input 
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
 350:	34 30       	cpi	r19, 0x04	; 4
 352:	08 f0       	brcs	.+2      	; 0x356 <DIO_Write+0x22>
 354:	61 c0       	rjmp	.+194    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 356:	fc 01       	movw	r30, r24
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	8e 0f       	add	r24, r30
 35e:	9f 1f       	adc	r25, r31
 360:	fc 01       	movw	r30, r24
 362:	e7 55       	subi	r30, 0x57	; 87
 364:	ff 4f       	sbci	r31, 0xFF	; 255
 366:	81 81       	ldd	r24, Z+1	; 0x01
 368:	88 23       	and	r24, r24
 36a:	09 f4       	brne	.+2      	; 0x36e <DIO_Write+0x3a>
 36c:	57 c0       	rjmp	.+174    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
   }
   
   else
   {
      //select the calculated port 
      switch(u8port)
 36e:	31 30       	cpi	r19, 0x01	; 1
 370:	d1 f0       	breq	.+52     	; 0x3a6 <DIO_Write+0x72>
 372:	28 f0       	brcs	.+10     	; 0x37e <DIO_Write+0x4a>
 374:	32 30       	cpi	r19, 0x02	; 2
 376:	51 f1       	breq	.+84     	; 0x3cc <DIO_Write+0x98>
 378:	33 30       	cpi	r19, 0x03	; 3
 37a:	d9 f1       	breq	.+118    	; 0x3f2 <DIO_Write+0xbe>
 37c:	51 c0       	rjmp	.+162    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
      {
         case M_PORTA:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTA_R,u8pin);
 37e:	3b b3       	in	r19, 0x1b	; 27
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_Write+0x56>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	2a 95       	dec	r18
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_Write+0x52>
 38e:	28 2f       	mov	r18, r24
 390:	20 95       	com	r18
 392:	23 23       	and	r18, r19
 394:	2b bb       	out	0x1b, r18	; 27
            //if we want to apply 5V to the pin
            if (u8Data)
 396:	66 23       	and	r22, r22
 398:	09 f4       	brne	.+2      	; 0x39c <DIO_Write+0x68>
 39a:	44 c0       	rjmp	.+136    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTA_R,u8pin);
 39c:	9b b3       	in	r25, 0x1b	; 27
 39e:	89 2b       	or	r24, r25
 3a0:	8b bb       	out	0x1b, r24	; 27
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
            }
         break;

         case M_PORTB:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTB_R,u8pin);
 3a6:	38 b3       	in	r19, 0x18	; 24
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_Write+0x7e>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	2a 95       	dec	r18
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_Write+0x7a>
 3b6:	28 2f       	mov	r18, r24
 3b8:	20 95       	com	r18
 3ba:	23 23       	and	r18, r19
 3bc:	28 bb       	out	0x18, r18	; 24
            //if we want to apply 5V to the pin
            if (u8Data)
 3be:	66 23       	and	r22, r22
 3c0:	99 f1       	breq	.+102    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTB_R,u8pin);
 3c2:	98 b3       	in	r25, 0x18	; 24
 3c4:	89 2b       	or	r24, r25
 3c6:	88 bb       	out	0x18, r24	; 24
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
            }
         break;

         case M_PORTC:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTC_R,u8pin);
 3cc:	35 b3       	in	r19, 0x15	; 21
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_Write+0xa4>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_Write+0xa0>
 3dc:	28 2f       	mov	r18, r24
 3de:	20 95       	com	r18
 3e0:	23 23       	and	r18, r19
 3e2:	25 bb       	out	0x15, r18	; 21
            //if we want to apply 5V to the pin
            if (u8Data)
 3e4:	66 23       	and	r22, r22
 3e6:	11 f1       	breq	.+68     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTC_R,u8pin);
 3e8:	95 b3       	in	r25, 0x15	; 21
 3ea:	89 2b       	or	r24, r25
 3ec:	85 bb       	out	0x15, r24	; 21
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret
            }
         break;

         case M_PORTD:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTD_R,u8pin);
 3f2:	32 b3       	in	r19, 0x12	; 18
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_Write+0xca>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	2a 95       	dec	r18
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_Write+0xc6>
 402:	28 2f       	mov	r18, r24
 404:	20 95       	com	r18
 406:	23 23       	and	r18, r19
 408:	22 bb       	out	0x12, r18	; 18
            //if we want to apply 5V to the pin
            if (u8Data)
 40a:	66 23       	and	r22, r22
 40c:	89 f0       	breq	.+34     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTD_R,u8pin);
 40e:	92 b3       	in	r25, 0x12	; 18
 410:	89 2b       	or	r24, r25
 412:	82 bb       	out	0x12, r24	; 18
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret
   
   //if port number is invalid or the pin is set as input 
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
   {
      //return error status
      return ERROR;
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	08 95       	ret
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	08 95       	ret
 430:	81 e0       	ldi	r24, 0x01	; 1
}
 432:	08 95       	ret

00000434 <UART_Init>:
      UDR_R=(uint8_t)u16Data;
      return SUCCESS;
   }
   //else return error
   return ERROR;
}
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	1f 92       	push	r1
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	19 82       	std	Y+1, r1	; 0x01
 440:	10 bc       	out	0x20, r1	; 32
 442:	83 e3       	ldi	r24, 0x33	; 51
 444:	89 b9       	out	0x09, r24	; 9
 446:	8a b1       	in	r24, 0x0a	; 10
 448:	88 60       	ori	r24, 0x08	; 8
 44a:	8a b9       	out	0x0a, r24	; 10
 44c:	8a b1       	in	r24, 0x0a	; 10
 44e:	80 61       	ori	r24, 0x10	; 16
 450:	8a b9       	out	0x0a, r24	; 10
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	82 60       	ori	r24, 0x02	; 2
 456:	89 83       	std	Y+1, r24	; 0x01
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	84 60       	ori	r24, 0x04	; 4
 45c:	89 83       	std	Y+1, r24	; 0x01
 45e:	8a b1       	in	r24, 0x0a	; 10
 460:	8b 7f       	andi	r24, 0xFB	; 251
 462:	8a b9       	out	0x0a, r24	; 10
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	80 62       	ori	r24, 0x20	; 32
 468:	89 83       	std	Y+1, r24	; 0x01
 46a:	80 b5       	in	r24, 0x20	; 32
 46c:	80 68       	ori	r24, 0x80	; 128
 46e:	80 bd       	out	0x20, r24	; 32
 470:	99 81       	ldd	r25, Y+1	; 0x01
 472:	80 b5       	in	r24, 0x20	; 32
 474:	89 2b       	or	r24, r25
 476:	80 bd       	out	0x20, r24	; 32
 478:	80 b5       	in	r24, 0x20	; 32
 47a:	8f 77       	andi	r24, 0x7F	; 127
 47c:	80 bd       	out	0x20, r24	; 32
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	0f 90       	pop	r0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <UART_ReceiveData>:
 488:	00 97       	sbiw	r24, 0x00	; 0
 48a:	61 f0       	breq	.+24     	; 0x4a4 <UART_ReceiveData+0x1c>
 48c:	fc 01       	movw	r30, r24
 48e:	11 82       	std	Z+1, r1	; 0x01
 490:	10 82       	st	Z, r1
 492:	5f 9b       	sbis	0x0b, 7	; 11
 494:	fe cf       	rjmp	.-4      	; 0x492 <UART_ReceiveData+0xa>
 496:	2c b1       	in	r18, 0x0c	; 12
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	31 83       	std	Z+1, r19	; 0x01
 49e:	20 83       	st	Z, r18
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret

000004a8 <UART_SendData>:
 4a8:	5d 9b       	sbis	0x0b, 5	; 11
 4aa:	fe cf       	rjmp	.-4      	; 0x4a8 <UART_SendData>
 4ac:	8c b9       	out	0x0c, r24	; 12
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret

000004b2 <UART_ReceiveString>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to Receive a string using uart
************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String, uint8_t u8bufferMaxSize)
{
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	8c 01       	movw	r16, r24
 4c0:	d6 2f       	mov	r29, r22
   uint8_t u8i;
   //traverse the string
   for (u8i=0; u8i<u8bufferMaxSize-1;u8i++)
 4c2:	c0 e0       	ldi	r28, 0x00	; 0
 4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <UART_ReceiveString+0x2e>
   {
      //receive each character stored in the UDR and store it in the appropriate place in the string
      UART_ReceiveData((uint16_t*)(pu8String+u8i));
 4c6:	78 01       	movw	r14, r16
 4c8:	ec 0e       	add	r14, r28
 4ca:	f1 1c       	adc	r15, r1
 4cc:	c7 01       	movw	r24, r14
 4ce:	0e 94 44 02 	call	0x488	; 0x488 <UART_ReceiveData>
      //if termination characters are detected end the communication
      if (*(pu8String+u8i)=='\r'  ||  *(pu8String+u8i)=='\n')
 4d2:	f7 01       	movw	r30, r14
 4d4:	80 81       	ld	r24, Z
 4d6:	8d 30       	cpi	r24, 0x0D	; 13
 4d8:	59 f0       	breq	.+22     	; 0x4f0 <UART_ReceiveString+0x3e>
 4da:	8a 30       	cpi	r24, 0x0A	; 10
 4dc:	49 f0       	breq	.+18     	; 0x4f0 <UART_ReceiveString+0x3e>
************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String, uint8_t u8bufferMaxSize)
{
   uint8_t u8i;
   //traverse the string
   for (u8i=0; u8i<u8bufferMaxSize-1;u8i++)
 4de:	cf 5f       	subi	r28, 0xFF	; 255
 4e0:	2c 2f       	mov	r18, r28
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	8d 2f       	mov	r24, r29
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	28 17       	cp	r18, r24
 4ec:	39 07       	cpc	r19, r25
 4ee:	5c f3       	brlt	.-42     	; 0x4c6 <UART_ReceiveString+0x14>
      {
         break;
      }
   }
   //end the string with null
   *(pu8String+u8i)=0;
 4f0:	f8 01       	movw	r30, r16
 4f2:	ec 0f       	add	r30, r28
 4f4:	f1 1d       	adc	r31, r1
 4f6:	10 82       	st	Z, r1
   return SUCCESS;
   
}
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	08 95       	ret

00000508 <UART_SendString>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to send a string using uart
************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
 508:	0f 93       	push	r16
 50a:	1f 93       	push	r17
 50c:	cf 93       	push	r28
 50e:	8c 01       	movw	r16, r24
   uint8_t u8i;
   //loop on the string
   for (u8i=0;pu8String[u8i];u8i++)
 510:	c0 e0       	ldi	r28, 0x00	; 0
 512:	04 c0       	rjmp	.+8      	; 0x51c <UART_SendString+0x14>
   {
      //send each character independently
      UART_SendData(*(pu8String+u8i));
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 54 02 	call	0x4a8	; 0x4a8 <UART_SendData>
************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
   uint8_t u8i;
   //loop on the string
   for (u8i=0;pu8String[u8i];u8i++)
 51a:	cf 5f       	subi	r28, 0xFF	; 255
 51c:	f8 01       	movw	r30, r16
 51e:	ec 0f       	add	r30, r28
 520:	f1 1d       	adc	r31, r1
 522:	80 81       	ld	r24, Z
 524:	81 11       	cpse	r24, r1
 526:	f6 cf       	rjmp	.-20     	; 0x514 <UART_SendString+0xc>
   {
      //send each character independently
      UART_SendData(*(pu8String+u8i));
   }
   //send termination characters when done
   UART_SendData('\r');
 528:	8d e0       	ldi	r24, 0x0D	; 13
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <UART_SendData>
   UART_SendData('\n');
 530:	8a e0       	ldi	r24, 0x0A	; 10
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 54 02 	call	0x4a8	; 0x4a8 <UART_SendData>
   
   return SUCCESS;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	08 95       	ret

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
