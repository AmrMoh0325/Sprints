
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000640  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000640  000006d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000b2  008000b2  00000726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001410  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a92  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aab  00000000  00000000  0000279e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000671  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000946  00000000  00000000  00003ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000044ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3c       	cpi	r26, 0xC0	; 192
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  8a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <String_compare>:
* Parameters (out): sint8_t
* Return value: -1= First>Second    ||    0=Strings are identical   ||   1= First<Second
* Description: A function to check if two strings are identical or not
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
  92:	dc 01       	movw	r26, r24
   uint16_t u16i;
   //Traverse both strings
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
  94:	20 e0       	ldi	r18, 0x00	; 0
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	0a c0       	rjmp	.+20     	; 0xae <String_compare+0x1c>
   {
	  // look for any difference 
      if      (str1[u16i] < str2[u16i])     return -1;
  9a:	fb 01       	movw	r30, r22
  9c:	e2 0f       	add	r30, r18
  9e:	f3 1f       	adc	r31, r19
  a0:	40 81       	ld	r20, Z
  a2:	94 17       	cp	r25, r20
  a4:	88 f0       	brcs	.+34     	; 0xc8 <String_compare+0x36>
      else if (str1[u16i] > str2[u16i])     return 1;
  a6:	49 17       	cp	r20, r25
  a8:	88 f0       	brcs	.+34     	; 0xcc <String_compare+0x3a>
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
   uint16_t u16i;
   //Traverse both strings
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
  ae:	fd 01       	movw	r30, r26
  b0:	e2 0f       	add	r30, r18
  b2:	f3 1f       	adc	r31, r19
  b4:	90 81       	ld	r25, Z
  b6:	91 11       	cpse	r25, r1
  b8:	f0 cf       	rjmp	.-32     	; 0x9a <String_compare+0x8>
  ba:	fb 01       	movw	r30, r22
  bc:	e2 0f       	add	r30, r18
  be:	f3 1f       	adc	r31, r19
  c0:	80 81       	ld	r24, Z
  c2:	81 11       	cpse	r24, r1
  c4:	ea cf       	rjmp	.-44     	; 0x9a <String_compare+0x8>
  c6:	08 95       	ret
   {
	  // look for any difference 
      if      (str1[u16i] < str2[u16i])     return -1;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	08 95       	ret
      else if (str1[u16i] > str2[u16i])     return 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
}
  ce:	08 95       	ret

000000d0 <Traffic_Init>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to make necessary initializations for the application
************************************************************************************/
enuErrorStatus_t Traffic_Init(void)
{
  d0:	cf 93       	push	r28
   //initialize LEDS
   uint8_t Flag1=LED_Init();
  d2:	0e 94 cf 00 	call	0x19e	; 0x19e <LED_Init>
  d6:	c8 2f       	mov	r28, r24
   //Initialize UART
   uint8_t Flag2=UART_Init();
  d8:	0e 94 3c 02 	call	0x478	; 0x478 <UART_Init>
   if (Flag1 && Flag2)  return SUCCESS;
  dc:	cc 23       	and	r28, r28
  de:	19 f0       	breq	.+6      	; 0xe6 <Traffic_Init+0x16>
  e0:	81 11       	cpse	r24, r1
  e2:	03 c0       	rjmp	.+6      	; 0xea <Traffic_Init+0x1a>
  e4:	03 c0       	rjmp	.+6      	; 0xec <Traffic_Init+0x1c>
   return(ERROR);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	01 c0       	rjmp	.+2      	; 0xec <Traffic_Init+0x1c>
{
   //initialize LEDS
   uint8_t Flag1=LED_Init();
   //Initialize UART
   uint8_t Flag2=UART_Init();
   if (Flag1 && Flag2)  return SUCCESS;
  ea:	81 e0       	ldi	r24, 0x01	; 1
   return(ERROR);
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <Traffic_Update>:
* Description: A function to update the state of the application
************************************************************************************/
enuErrorStatus_t Traffic_Update(void)
{
   //recieve uart input
   UART_ReceiveString(UART_buffer,10);
  f0:	6a e0       	ldi	r22, 0x0A	; 10
  f2:	82 eb       	ldi	r24, 0xB2	; 178
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <UART_ReceiveString>
   //if received data = START
   if (String_compare(UART_buffer,(uint8_t *)"START")==0)
  fa:	60 e6       	ldi	r22, 0x60	; 96
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	82 eb       	ldi	r24, 0xB2	; 178
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 106:	81 11       	cpse	r24, r1
 108:	0e c0       	rjmp	.+28     	; 0x126 <Traffic_Update+0x36>
   {
      //turn on green led and turn off the rest
      LED_ON(Green);
 10a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_ON>
      LED_OFF(Yellow);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_OFF(Red);
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      //show up feedback to the user
      UART_SendString((uint8_t *)"Green LED is on\n");
 11a:	86 e6       	ldi	r24, 0x66	; 102
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 ab 02 	call	0x556	; 0x556 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
      LED_OFF(Red);
      //show up feedback to the user
      UART_SendString((uint8_t *)"Green LED is on\n");
   }
   //if received data = WAIT
   else if (String_compare(UART_buffer,(uint8_t *)"WAIT")==0)
 126:	67 e7       	ldi	r22, 0x77	; 119
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	82 eb       	ldi	r24, 0xB2	; 178
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 132:	81 11       	cpse	r24, r1
 134:	0e c0       	rjmp	.+28     	; 0x152 <Traffic_Update+0x62>
   {
      //turn on yellow led and turn off the rest
      LED_OFF(Green);
 136:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_ON(Yellow);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_ON>
      LED_OFF(Red);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      //show up feedback to the user
      UART_SendString((uint8_t *)"YELLOW LED is on\n");
 146:	8c e7       	ldi	r24, 0x7C	; 124
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 ab 02 	call	0x556	; 0x556 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	08 95       	ret
      LED_OFF(Red);
      //show up feedback to the user
      UART_SendString((uint8_t *)"YELLOW LED is on\n");
   }
   //if received data = STOP
   else if (String_compare(UART_buffer,(uint8_t *)"STOP")==0)
 152:	6e e8       	ldi	r22, 0x8E	; 142
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	82 eb       	ldi	r24, 0xB2	; 178
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 15e:	81 11       	cpse	r24, r1
 160:	0e c0       	rjmp	.+28     	; 0x17e <Traffic_Update+0x8e>
   {
      //turn on red led and turn off the rest
      LED_OFF(Green);
 162:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_OFF(Yellow);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LED_OFF>
      LED_ON(Red);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LED_ON>
      //show up feedback to the user
      UART_SendString((uint8_t *)"RED LED is on\n");
 172:	83 e9       	ldi	r24, 0x93	; 147
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 ab 02 	call	0x556	; 0x556 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	08 95       	ret
      LED_ON(Red);
      //show up feedback to the user
      UART_SendString((uint8_t *)"RED LED is on\n");
   }
   //if received data = AT
   else if (String_compare(UART_buffer,(uint8_t *)"AT")==0)
 17e:	62 ea       	ldi	r22, 0xA2	; 162
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	82 eb       	ldi	r24, 0xB2	; 178
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 49 00 	call	0x92	; 0x92 <String_compare>
 18a:	81 11       	cpse	r24, r1
 18c:	06 c0       	rjmp	.+12     	; 0x19a <Traffic_Update+0xaa>
   {
      //show up acknowledgment message
      UART_SendString((uint8_t *)"OK\n");
 18e:	85 ea       	ldi	r24, 0xA5	; 165
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 ab 02 	call	0x556	; 0x556 <UART_SendString>
   }
   else
   {
      return ERROR;
   }
   return SUCCESS;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
      //show up acknowledgment message
      UART_SendString((uint8_t *)"OK\n");
   }
   else
   {
      return ERROR;
 19a:	80 e0       	ldi	r24, 0x00	; 0
   }
   return SUCCESS;
 19c:	08 95       	ret

0000019e <LED_Init>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the led
*************************************************************************************************/
enuErrorStatus_t	LED_Init(void)
{
   return DIO_Init();
 19e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <DIO_Init>
}//end LED_Init
 1a2:	08 95       	ret

000001a4 <LED_ON>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led on
*************************************************************************************************/
enuErrorStatus_t	LED_ON(enuPinConfig_t LED)
{
   DIO_Write(LED, HIGH);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_Write>
   return SUCCESS;
}//end LED_ON
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	08 95       	ret

000001ae <LED_OFF>:
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led off
*************************************************************************************************/
enuErrorStatus_t	LED_OFF(enuPinConfig_t LED)
{
   DIO_Write(LED, LOW);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_Write>
   return SUCCESS;

}//end LED_OFF
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	08 95       	ret

000001b8 <main>:

/* API IMPLEMENTATION -------------------------------------------------- */
int main(void)
{
   //call initialization function
   Traffic_Init();
 1b8:	0e 94 68 00 	call	0xd0	; 0xd0 <Traffic_Init>
   while (1) 
   {
      //update the state of the system depending on user input
      Traffic_Update();
 1bc:	0e 94 78 00 	call	0xf0	; 0xf0 <Traffic_Update>
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <main+0x4>

000001c2 <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	d2 c0       	rjmp	.+420    	; 0x36a <DIO_Init+0x1a8>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
 1c6:	84 2f       	mov	r24, r20
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	e8 0f       	add	r30, r24
 1d2:	f9 1f       	adc	r31, r25
 1d4:	e7 55       	subi	r30, 0x57	; 87
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	20 81       	ld	r18, Z
 1da:	32 2f       	mov	r19, r18
 1dc:	36 95       	lsr	r19
 1de:	36 95       	lsr	r19
 1e0:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
 1e2:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
 1e4:	34 30       	cpi	r19, 0x04	; 4
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <DIO_Init+0x28>
 1e8:	c5 c0       	rjmp	.+394    	; 0x374 <DIO_Init+0x1b2>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
 1ea:	31 30       	cpi	r19, 0x01	; 1
 1ec:	b1 f1       	breq	.+108    	; 0x25a <DIO_Init+0x98>
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <DIO_Init+0x3c>
 1f0:	32 30       	cpi	r19, 0x02	; 2
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <DIO_Init+0x34>
 1f4:	60 c0       	rjmp	.+192    	; 0x2b6 <DIO_Init+0xf4>
 1f6:	33 30       	cpi	r19, 0x03	; 3
 1f8:	09 f4       	brne	.+2      	; 0x1fc <DIO_Init+0x3a>
 1fa:	8a c0       	rjmp	.+276    	; 0x310 <DIO_Init+0x14e>
 1fc:	b5 c0       	rjmp	.+362    	; 0x368 <DIO_Init+0x1a6>
      {
         case M_PORTA:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRA_R,u8pin);
 1fe:	6a b3       	in	r22, 0x1a	; 26
 200:	e1 e0       	ldi	r30, 0x01	; 1
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	df 01       	movw	r26, r30
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_Init+0x4a>
 208:	aa 0f       	add	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	2a 95       	dec	r18
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_Init+0x46>
 210:	9d 01       	movw	r18, r26
 212:	5a 2f       	mov	r21, r26
 214:	50 95       	com	r21
 216:	65 23       	and	r22, r21
 218:	6a bb       	out	0x1a, r22	; 26
         CLR_BIT(PORTA_R,u8pin);
 21a:	6b b3       	in	r22, 0x1b	; 27
 21c:	56 23       	and	r21, r22
 21e:	5b bb       	out	0x1b, r21	; 27
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 220:	fc 01       	movw	r30, r24
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e8 0f       	add	r30, r24
 228:	f9 1f       	adc	r31, r25
 22a:	e7 55       	subi	r30, 0x57	; 87
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	51 81       	ldd	r21, Z+1	; 0x01
 230:	55 23       	and	r21, r21
 232:	19 f0       	breq	.+6      	; 0x23a <DIO_Init+0x78>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRA_R,u8pin);
 234:	5a b3       	in	r21, 0x1a	; 26
 236:	5a 2b       	or	r21, r26
 238:	5a bb       	out	0x1a, r21	; 26
         }

         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 23a:	fc 01       	movw	r30, r24
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	8e 0f       	add	r24, r30
 242:	9f 1f       	adc	r25, r31
 244:	fc 01       	movw	r30, r24
 246:	e7 55       	subi	r30, 0x57	; 87
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	82 81       	ldd	r24, Z+2	; 0x02
 24c:	88 23       	and	r24, r24
 24e:	09 f4       	brne	.+2      	; 0x252 <DIO_Init+0x90>
 250:	8b c0       	rjmp	.+278    	; 0x368 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTA_R,u8pin);
 252:	8b b3       	in	r24, 0x1b	; 27
 254:	28 2b       	or	r18, r24
 256:	2b bb       	out	0x1b, r18	; 27
 258:	87 c0       	rjmp	.+270    	; 0x368 <DIO_Init+0x1a6>
         }
         break;

         case M_PORTB:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRB_R,u8pin);
 25a:	67 b3       	in	r22, 0x17	; 23
 25c:	e1 e0       	ldi	r30, 0x01	; 1
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	df 01       	movw	r26, r30
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_Init+0xa6>
 264:	aa 0f       	add	r26, r26
 266:	bb 1f       	adc	r27, r27
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_Init+0xa2>
 26c:	9d 01       	movw	r18, r26
 26e:	5a 2f       	mov	r21, r26
 270:	50 95       	com	r21
 272:	65 23       	and	r22, r21
 274:	67 bb       	out	0x17, r22	; 23
         CLR_BIT(PORTB_R,u8pin);
 276:	68 b3       	in	r22, 0x18	; 24
 278:	56 23       	and	r21, r22
 27a:	58 bb       	out	0x18, r21	; 24
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 27c:	fc 01       	movw	r30, r24
 27e:	ee 0f       	add	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	e8 0f       	add	r30, r24
 284:	f9 1f       	adc	r31, r25
 286:	e7 55       	subi	r30, 0x57	; 87
 288:	ff 4f       	sbci	r31, 0xFF	; 255
 28a:	51 81       	ldd	r21, Z+1	; 0x01
 28c:	55 23       	and	r21, r21
 28e:	19 f0       	breq	.+6      	; 0x296 <DIO_Init+0xd4>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRB_R,u8pin);
 290:	57 b3       	in	r21, 0x17	; 23
 292:	5a 2b       	or	r21, r26
 294:	57 bb       	out	0x17, r21	; 23
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 296:	fc 01       	movw	r30, r24
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	8e 0f       	add	r24, r30
 29e:	9f 1f       	adc	r25, r31
 2a0:	fc 01       	movw	r30, r24
 2a2:	e7 55       	subi	r30, 0x57	; 87
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
 2a6:	82 81       	ldd	r24, Z+2	; 0x02
 2a8:	88 23       	and	r24, r24
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_Init+0xec>
 2ac:	5d c0       	rjmp	.+186    	; 0x368 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTB_R,u8pin);
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	28 2b       	or	r18, r24
 2b2:	28 bb       	out	0x18, r18	; 24
 2b4:	59 c0       	rjmp	.+178    	; 0x368 <DIO_Init+0x1a6>
         }
         break;

         case M_PORTC:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRC_R,u8pin);
 2b6:	64 b3       	in	r22, 0x14	; 20
 2b8:	e1 e0       	ldi	r30, 0x01	; 1
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	df 01       	movw	r26, r30
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_Init+0x102>
 2c0:	aa 0f       	add	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	2a 95       	dec	r18
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_Init+0xfe>
 2c8:	9d 01       	movw	r18, r26
 2ca:	5a 2f       	mov	r21, r26
 2cc:	50 95       	com	r21
 2ce:	65 23       	and	r22, r21
 2d0:	64 bb       	out	0x14, r22	; 20
         CLR_BIT(PORTC_R,u8pin);
 2d2:	65 b3       	in	r22, 0x15	; 21
 2d4:	56 23       	and	r21, r22
 2d6:	55 bb       	out	0x15, r21	; 21
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 2d8:	fc 01       	movw	r30, r24
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	e8 0f       	add	r30, r24
 2e0:	f9 1f       	adc	r31, r25
 2e2:	e7 55       	subi	r30, 0x57	; 87
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	51 81       	ldd	r21, Z+1	; 0x01
 2e8:	55 23       	and	r21, r21
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <DIO_Init+0x130>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRC_R,u8pin);
 2ec:	54 b3       	in	r21, 0x14	; 20
 2ee:	5a 2b       	or	r21, r26
 2f0:	54 bb       	out	0x14, r21	; 20
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 2f2:	fc 01       	movw	r30, r24
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	8e 0f       	add	r24, r30
 2fa:	9f 1f       	adc	r25, r31
 2fc:	fc 01       	movw	r30, r24
 2fe:	e7 55       	subi	r30, 0x57	; 87
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	82 81       	ldd	r24, Z+2	; 0x02
 304:	88 23       	and	r24, r24
 306:	81 f1       	breq	.+96     	; 0x368 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTC_R,u8pin);
 308:	85 b3       	in	r24, 0x15	; 21
 30a:	28 2b       	or	r18, r24
 30c:	25 bb       	out	0x15, r18	; 21
 30e:	2c c0       	rjmp	.+88     	; 0x368 <DIO_Init+0x1a6>
         }
         break;

         case M_PORTD:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRD_R,u8pin);
 310:	61 b3       	in	r22, 0x11	; 17
 312:	e1 e0       	ldi	r30, 0x01	; 1
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	df 01       	movw	r26, r30
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_Init+0x15c>
 31a:	aa 0f       	add	r26, r26
 31c:	bb 1f       	adc	r27, r27
 31e:	2a 95       	dec	r18
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_Init+0x158>
 322:	9d 01       	movw	r18, r26
 324:	5a 2f       	mov	r21, r26
 326:	50 95       	com	r21
 328:	65 23       	and	r22, r21
 32a:	61 bb       	out	0x11, r22	; 17
         CLR_BIT(PORTD_R,u8pin);
 32c:	62 b3       	in	r22, 0x12	; 18
 32e:	56 23       	and	r21, r22
 330:	52 bb       	out	0x12, r21	; 18
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 332:	fc 01       	movw	r30, r24
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	e8 0f       	add	r30, r24
 33a:	f9 1f       	adc	r31, r25
 33c:	e7 55       	subi	r30, 0x57	; 87
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	51 81       	ldd	r21, Z+1	; 0x01
 342:	55 23       	and	r21, r21
 344:	19 f0       	breq	.+6      	; 0x34c <DIO_Init+0x18a>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRD_R,u8pin);
 346:	51 b3       	in	r21, 0x11	; 17
 348:	5a 2b       	or	r21, r26
 34a:	51 bb       	out	0x11, r21	; 17
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 34c:	fc 01       	movw	r30, r24
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	8e 0f       	add	r24, r30
 354:	9f 1f       	adc	r25, r31
 356:	fc 01       	movw	r30, r24
 358:	e7 55       	subi	r30, 0x57	; 87
 35a:	ff 4f       	sbci	r31, 0xFF	; 255
 35c:	82 81       	ldd	r24, Z+2	; 0x02
 35e:	88 23       	and	r24, r24
 360:	19 f0       	breq	.+6      	; 0x368 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTD_R,u8pin);
 362:	82 b3       	in	r24, 0x12	; 18
 364:	28 2b       	or	r18, r24
 366:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 368:	4f 5f       	subi	r20, 0xFF	; 255
 36a:	43 30       	cpi	r20, 0x03	; 3
 36c:	08 f4       	brcc	.+2      	; 0x370 <DIO_Init+0x1ae>
 36e:	2b cf       	rjmp	.-426    	; 0x1c6 <DIO_Init+0x4>
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 374:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
   }
   //return success status
   return SUCCESS;
}
 376:	08 95       	ret

00000378 <DIO_Write>:
************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8Data)
{
   uint8_t u8port,u8pin;
   //calculate the port and pin number of the selected object
   u8port=astrDIOConfigParameters[u8GroupId].enuPinNo / DIO_PINS_NO;
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	fc 01       	movw	r30, r24
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e8 0f       	add	r30, r24
 382:	f9 1f       	adc	r31, r25
 384:	e7 55       	subi	r30, 0x57	; 87
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	20 81       	ld	r18, Z
 38a:	32 2f       	mov	r19, r18
 38c:	36 95       	lsr	r19
 38e:	36 95       	lsr	r19
 390:	36 95       	lsr	r19
   u8pin =astrDIOConfigParameters[u8GroupId].enuPinNo % DIO_PINS_NO;
 392:	27 70       	andi	r18, 0x07	; 7
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
 394:	34 30       	cpi	r19, 0x04	; 4
 396:	08 f0       	brcs	.+2      	; 0x39a <DIO_Write+0x22>
 398:	61 c0       	rjmp	.+194    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 39a:	fc 01       	movw	r30, r24
 39c:	ee 0f       	add	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	8e 0f       	add	r24, r30
 3a2:	9f 1f       	adc	r25, r31
 3a4:	fc 01       	movw	r30, r24
 3a6:	e7 55       	subi	r30, 0x57	; 87
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	81 81       	ldd	r24, Z+1	; 0x01
 3ac:	88 23       	and	r24, r24
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <DIO_Write+0x3a>
 3b0:	57 c0       	rjmp	.+174    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
   }
   
   else
   {
      //select the calculated port
      switch(u8port)
 3b2:	31 30       	cpi	r19, 0x01	; 1
 3b4:	d1 f0       	breq	.+52     	; 0x3ea <DIO_Write+0x72>
 3b6:	28 f0       	brcs	.+10     	; 0x3c2 <DIO_Write+0x4a>
 3b8:	32 30       	cpi	r19, 0x02	; 2
 3ba:	51 f1       	breq	.+84     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3bc:	33 30       	cpi	r19, 0x03	; 3
 3be:	d9 f1       	breq	.+118    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3c0:	51 c0       	rjmp	.+162    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
      {
         case M_PORTA:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTA_R,u8pin);
 3c2:	3b b3       	in	r19, 0x1b	; 27
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_Write+0x56>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	2a 95       	dec	r18
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_Write+0x52>
 3d2:	28 2f       	mov	r18, r24
 3d4:	20 95       	com	r18
 3d6:	23 23       	and	r18, r19
 3d8:	2b bb       	out	0x1b, r18	; 27
         //if we want to apply 5V to the pin
         if (u8Data)
 3da:	66 23       	and	r22, r22
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <DIO_Write+0x68>
 3de:	44 c0       	rjmp	.+136    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTA_R,u8pin);
 3e0:	9b b3       	in	r25, 0x1b	; 27
 3e2:	89 2b       	or	r24, r25
 3e4:	8b bb       	out	0x1b, r24	; 27
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	08 95       	ret
         }
         break;

         case M_PORTB:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTB_R,u8pin);
 3ea:	38 b3       	in	r19, 0x18	; 24
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_Write+0x7e>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	2a 95       	dec	r18
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_Write+0x7a>
 3fa:	28 2f       	mov	r18, r24
 3fc:	20 95       	com	r18
 3fe:	23 23       	and	r18, r19
 400:	28 bb       	out	0x18, r18	; 24
         //if we want to apply 5V to the pin
         if (u8Data)
 402:	66 23       	and	r22, r22
 404:	99 f1       	breq	.+102    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTB_R,u8pin);
 406:	98 b3       	in	r25, 0x18	; 24
 408:	89 2b       	or	r24, r25
 40a:	88 bb       	out	0x18, r24	; 24
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
         }
         break;

         case M_PORTC:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTC_R,u8pin);
 410:	35 b3       	in	r19, 0x15	; 21
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	2a 95       	dec	r18
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	28 2f       	mov	r18, r24
 422:	20 95       	com	r18
 424:	23 23       	and	r18, r19
 426:	25 bb       	out	0x15, r18	; 21
         //if we want to apply 5V to the pin
         if (u8Data)
 428:	66 23       	and	r22, r22
 42a:	11 f1       	breq	.+68     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTC_R,u8pin);
 42c:	95 b3       	in	r25, 0x15	; 21
 42e:	89 2b       	or	r24, r25
 430:	85 bb       	out	0x15, r24	; 21
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret
         }
         break;

         case M_PORTD:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTD_R,u8pin);
 436:	32 b3       	in	r19, 0x12	; 18
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	2a 95       	dec	r18
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	28 2f       	mov	r18, r24
 448:	20 95       	com	r18
 44a:	23 23       	and	r18, r19
 44c:	22 bb       	out	0x12, r18	; 18
         //if we want to apply 5V to the pin
         if (u8Data)
 44e:	66 23       	and	r22, r22
 450:	89 f0       	breq	.+34     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTD_R,u8pin);
 452:	92 b3       	in	r25, 0x12	; 18
 454:	89 2b       	or	r24, r25
 456:	82 bb       	out	0x12, r24	; 18
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
   {
      //return error status
      return ERROR;
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	08 95       	ret
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	08 95       	ret
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	08 95       	ret
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	08 95       	ret
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	08 95       	ret
 474:	81 e0       	ldi	r24, 0x01	; 1
}
 476:	08 95       	ret

00000478 <UART_Init>:
   //check if the sent pointer points to a valid position
   if (local_fptr== NULLPTR)     return ERROR;
   //if so, store the pointer address in the global pointer to function
   RXC_Callback=local_fptr;
   return SUCCESS;
}
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	1f 92       	push	r1
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	19 82       	std	Y+1, r1	; 0x01
 484:	10 bc       	out	0x20, r1	; 32
 486:	83 e3       	ldi	r24, 0x33	; 51
 488:	89 b9       	out	0x09, r24	; 9
 48a:	8a b1       	in	r24, 0x0a	; 10
 48c:	88 60       	ori	r24, 0x08	; 8
 48e:	8a b9       	out	0x0a, r24	; 10
 490:	8a b1       	in	r24, 0x0a	; 10
 492:	80 61       	ori	r24, 0x10	; 16
 494:	8a b9       	out	0x0a, r24	; 10
 496:	89 81       	ldd	r24, Y+1	; 0x01
 498:	82 60       	ori	r24, 0x02	; 2
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	84 60       	ori	r24, 0x04	; 4
 4a0:	89 83       	std	Y+1, r24	; 0x01
 4a2:	8a b1       	in	r24, 0x0a	; 10
 4a4:	8b 7f       	andi	r24, 0xFB	; 251
 4a6:	8a b9       	out	0x0a, r24	; 10
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	80 62       	ori	r24, 0x20	; 32
 4ac:	89 83       	std	Y+1, r24	; 0x01
 4ae:	80 b5       	in	r24, 0x20	; 32
 4b0:	80 68       	ori	r24, 0x80	; 128
 4b2:	80 bd       	out	0x20, r24	; 32
 4b4:	99 81       	ldd	r25, Y+1	; 0x01
 4b6:	80 b5       	in	r24, 0x20	; 32
 4b8:	89 2b       	or	r24, r25
 4ba:	80 bd       	out	0x20, r24	; 32
 4bc:	80 b5       	in	r24, 0x20	; 32
 4be:	8f 77       	andi	r24, 0x7F	; 127
 4c0:	80 bd       	out	0x20, r24	; 32
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0f 90       	pop	r0
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <UART_ReceiveData>:
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <UART_ReceiveData+0x1c>
 4d0:	fc 01       	movw	r30, r24
 4d2:	11 82       	std	Z+1, r1	; 0x01
 4d4:	10 82       	st	Z, r1
 4d6:	5f 9b       	sbis	0x0b, 7	; 11
 4d8:	fe cf       	rjmp	.-4      	; 0x4d6 <UART_ReceiveData+0xa>
 4da:	2c b1       	in	r18, 0x0c	; 12
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	fc 01       	movw	r30, r24
 4e0:	31 83       	std	Z+1, r19	; 0x01
 4e2:	20 83       	st	Z, r18
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	08 95       	ret
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret

000004ec <UART_SendData>:
 4ec:	5d 9b       	sbis	0x0b, 5	; 11
 4ee:	fe cf       	rjmp	.-4      	; 0x4ec <UART_SendData>
 4f0:	8c b9       	out	0x0c, r24	; 12
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	08 95       	ret

000004f6 <UART_ReceiveString>:
 4f6:	ef 92       	push	r14
 4f8:	ff 92       	push	r15
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	01 f1       	breq	.+64     	; 0x546 <UART_ReceiveString+0x50>
 506:	d6 2f       	mov	r29, r22
 508:	8c 01       	movw	r16, r24
 50a:	c0 e0       	ldi	r28, 0x00	; 0
 50c:	0d c0       	rjmp	.+26     	; 0x528 <UART_ReceiveString+0x32>
 50e:	78 01       	movw	r14, r16
 510:	ec 0e       	add	r14, r28
 512:	f1 1c       	adc	r15, r1
 514:	c7 01       	movw	r24, r14
 516:	0e 94 66 02 	call	0x4cc	; 0x4cc <UART_ReceiveData>
 51a:	f7 01       	movw	r30, r14
 51c:	80 81       	ld	r24, Z
 51e:	8d 30       	cpi	r24, 0x0D	; 13
 520:	61 f0       	breq	.+24     	; 0x53a <UART_ReceiveString+0x44>
 522:	8a 30       	cpi	r24, 0x0A	; 10
 524:	51 f0       	breq	.+20     	; 0x53a <UART_ReceiveString+0x44>
 526:	cf 5f       	subi	r28, 0xFF	; 255
 528:	4c 2f       	mov	r20, r28
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	2d 2f       	mov	r18, r29
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	21 50       	subi	r18, 0x01	; 1
 532:	31 09       	sbc	r19, r1
 534:	42 17       	cp	r20, r18
 536:	53 07       	cpc	r21, r19
 538:	54 f3       	brlt	.-44     	; 0x50e <UART_ReceiveString+0x18>
 53a:	f8 01       	movw	r30, r16
 53c:	ec 0f       	add	r30, r28
 53e:	f1 1d       	adc	r31, r1
 540:	10 82       	st	Z, r1
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	01 c0       	rjmp	.+2      	; 0x548 <UART_ReceiveString+0x52>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	08 95       	ret

00000556 <UART_SendString>:
 556:	0f 93       	push	r16
 558:	1f 93       	push	r17
 55a:	cf 93       	push	r28
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	b9 f0       	breq	.+46     	; 0x58e <UART_SendString+0x38>
 560:	8c 01       	movw	r16, r24
 562:	c0 e0       	ldi	r28, 0x00	; 0
 564:	04 c0       	rjmp	.+8      	; 0x56e <UART_SendString+0x18>
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_SendData>
 56c:	cf 5f       	subi	r28, 0xFF	; 255
 56e:	f8 01       	movw	r30, r16
 570:	ec 0f       	add	r30, r28
 572:	f1 1d       	adc	r31, r1
 574:	80 81       	ld	r24, Z
 576:	81 11       	cpse	r24, r1
 578:	f6 cf       	rjmp	.-20     	; 0x566 <UART_SendString+0x10>
 57a:	8d e0       	ldi	r24, 0x0D	; 13
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_SendData>
 582:	8a e0       	ldi	r24, 0x0A	; 10
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_SendData>
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	01 c0       	rjmp	.+2      	; 0x590 <UART_SendString+0x3a>
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
 596:	08 95       	ret

00000598 <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	11 24       	eor	r1, r1
 5a2:	2f 93       	push	r18
 5a4:	3f 93       	push	r19
 5a6:	4f 93       	push	r20
 5a8:	5f 93       	push	r21
 5aa:	6f 93       	push	r22
 5ac:	7f 93       	push	r23
 5ae:	8f 93       	push	r24
 5b0:	9f 93       	push	r25
 5b2:	af 93       	push	r26
 5b4:	bf 93       	push	r27
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31
   //if the global pointer to function points to a valid position
   if (RXC_Callback!=NULLPTR)
 5ba:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <RXC_Callback>
 5be:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <RXC_Callback+0x1>
 5c2:	30 97       	sbiw	r30, 0x00	; 0
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <__vector_13+0x30>
   {
      //call the function
      RXC_Callback();
 5c6:	09 95       	icall
   }
}
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	7f 91       	pop	r23
 5d6:	6f 91       	pop	r22
 5d8:	5f 91       	pop	r21
 5da:	4f 91       	pop	r20
 5dc:	3f 91       	pop	r19
 5de:	2f 91       	pop	r18
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__vector_15>:

ISR(UART_TX_vect)
{
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	4f 93       	push	r20
 5fa:	5f 93       	push	r21
 5fc:	6f 93       	push	r22
 5fe:	7f 93       	push	r23
 600:	8f 93       	push	r24
 602:	9f 93       	push	r25
 604:	af 93       	push	r26
 606:	bf 93       	push	r27
 608:	ef 93       	push	r30
 60a:	ff 93       	push	r31
   //if the global pointer to function points to a valid position
   if (TXC_Callback!=NULLPTR)
 60c:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <TXC_Callback>
 610:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <TXC_Callback+0x1>
 614:	30 97       	sbiw	r30, 0x00	; 0
 616:	09 f0       	breq	.+2      	; 0x61a <__vector_15+0x30>
   {
      //call the function
      TXC_Callback();
 618:	09 95       	icall
   }
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	7f 91       	pop	r23
 628:	6f 91       	pop	r22
 62a:	5f 91       	pop	r21
 62c:	4f 91       	pop	r20
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <_exit>:
 63c:	f8 94       	cli

0000063e <__stop_program>:
 63e:	ff cf       	rjmp	.-2      	; 0x63e <__stop_program>
