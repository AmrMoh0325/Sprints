
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000528  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000528  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001070  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092c  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000831  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  000028fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000517  00000000  00000000  00002a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000683  00000000  00000000  00002f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 92 02 	jmp	0x524	; 0x524 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <String_compare>:
   for (u16i=0;str[u16i];u16i++);
   return u16i;
}

sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
  82:	dc 01       	movw	r26, r24
   uint16_t u16i;
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	0a c0       	rjmp	.+20     	; 0x9e <String_compare+0x1c>
   {
      if      (str1[u16i] < str2[u16i])     return -1;
  8a:	fb 01       	movw	r30, r22
  8c:	e2 0f       	add	r30, r18
  8e:	f3 1f       	adc	r31, r19
  90:	40 81       	ld	r20, Z
  92:	94 17       	cp	r25, r20
  94:	88 f0       	brcs	.+34     	; 0xb8 <String_compare+0x36>
      else if (str1[u16i] > str2[u16i])     return 1;
  96:	49 17       	cp	r20, r25
  98:	88 f0       	brcs	.+34     	; 0xbc <String_compare+0x3a>
}

sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
   uint16_t u16i;
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	fd 01       	movw	r30, r26
  a0:	e2 0f       	add	r30, r18
  a2:	f3 1f       	adc	r31, r19
  a4:	90 81       	ld	r25, Z
  a6:	91 11       	cpse	r25, r1
  a8:	f0 cf       	rjmp	.-32     	; 0x8a <String_compare+0x8>
  aa:	fb 01       	movw	r30, r22
  ac:	e2 0f       	add	r30, r18
  ae:	f3 1f       	adc	r31, r19
  b0:	80 81       	ld	r24, Z
  b2:	81 11       	cpse	r24, r1
  b4:	ea cf       	rjmp	.-44     	; 0x8a <String_compare+0x8>
  b6:	08 95       	ret
   {
      if      (str1[u16i] < str2[u16i])     return -1;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	08 95       	ret
      else if (str1[u16i] > str2[u16i])     return 1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
}
  be:	08 95       	ret

000000c0 <main>:

int main(void)
{
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	2a 97       	sbiw	r28, 0x0a	; 10
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
   DIO_Init();
  d4:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_Init>
   UART_Init();
  d8:	0e 94 07 02 	call	0x40e	; 0x40e <UART_Init>
   uint8_t UART_buffer[10]={0};
  dc:	fe 01       	movw	r30, r28
  de:	31 96       	adiw	r30, 0x01	; 1
  e0:	8a e0       	ldi	r24, 0x0A	; 10
  e2:	df 01       	movw	r26, r30
  e4:	1d 92       	st	X+, r1
  e6:	8a 95       	dec	r24
  e8:	e9 f7       	brne	.-6      	; 0xe4 <main+0x24>
   while (1) 
   {
      UART_ReceiveString(UART_buffer);
  ea:	ce 01       	movw	r24, r28
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	0e 94 46 02 	call	0x48c	; 0x48c <UART_ReceiveString>
      if (String_compare(UART_buffer,(uint8_t *)"GREEN")==0)
  f2:	60 e6       	ldi	r22, 0x60	; 96
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 41 00 	call	0x82	; 0x82 <String_compare>
  fe:	81 11       	cpse	r24, r1
 100:	10 c0       	rjmp	.+32     	; 0x122 <main+0x62>
      {
         DIO_Write(Green,HIGH);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         DIO_Write(Yellow,LOW);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         DIO_Write(Red,LOW);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         UART_SendString((uint8_t *)"Green LED is on\n");
 118:	86 e6       	ldi	r24, 0x66	; 102
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UART_SendString>
 120:	e4 cf       	rjmp	.-56     	; 0xea <main+0x2a>
      }
      else if (String_compare(UART_buffer,(uint8_t *)"YELLOW")==0)
 122:	67 e7       	ldi	r22, 0x77	; 119
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 41 00 	call	0x82	; 0x82 <String_compare>
 12e:	81 11       	cpse	r24, r1
 130:	10 c0       	rjmp	.+32     	; 0x152 <main+0x92>
      {
         DIO_Write(Green,LOW);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         DIO_Write(Yellow,HIGH);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         DIO_Write(Red,LOW);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         UART_SendString((uint8_t *)"YELLOW LED is on\n");
 148:	8e e7       	ldi	r24, 0x7E	; 126
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UART_SendString>
 150:	cc cf       	rjmp	.-104    	; 0xea <main+0x2a>
      }
      else if (String_compare(UART_buffer,(uint8_t *)"RED")==0)
 152:	60 e9       	ldi	r22, 0x90	; 144
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 41 00 	call	0x82	; 0x82 <String_compare>
 15e:	81 11       	cpse	r24, r1
 160:	10 c0       	rjmp	.+32     	; 0x182 <main+0xc2>
      {
         DIO_Write(Green,LOW);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         DIO_Write(Yellow,LOW);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         DIO_Write(Red,HIGH);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 87 01 	call	0x30e	; 0x30e <DIO_Write>
         UART_SendString((uint8_t *)"RED LED is on\n");
 178:	84 e9       	ldi	r24, 0x94	; 148
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UART_SendString>
 180:	b4 cf       	rjmp	.-152    	; 0xea <main+0x2a>
      }
      else if (String_compare(UART_buffer,(uint8_t *)"AT")==0)
 182:	63 ea       	ldi	r22, 0xA3	; 163
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 41 00 	call	0x82	; 0x82 <String_compare>
 18e:	81 11       	cpse	r24, r1
 190:	ac cf       	rjmp	.-168    	; 0xea <main+0x2a>
      {
         UART_SendString((uint8_t *)"OK\n");
 192:	86 ea       	ldi	r24, 0xA6	; 166
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UART_SendString>
 19a:	a7 cf       	rjmp	.-178    	; 0xea <main+0x2a>

0000019c <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	b0 c0       	rjmp	.+352    	; 0x300 <DIO_Init+0x164>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
 1a0:	84 2f       	mov	r24, r20
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	fc 01       	movw	r30, r24
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e8 0f       	add	r30, r24
 1ac:	f9 1f       	adc	r31, r25
 1ae:	e6 55       	subi	r30, 0x56	; 86
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	20 81       	ld	r18, Z
 1b4:	32 2f       	mov	r19, r18
 1b6:	36 95       	lsr	r19
 1b8:	36 95       	lsr	r19
 1ba:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
 1bc:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
 1be:	34 30       	cpi	r19, 0x04	; 4
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <DIO_Init+0x28>
 1c2:	a3 c0       	rjmp	.+326    	; 0x30a <DIO_Init+0x16e>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
 1c4:	31 30       	cpi	r19, 0x01	; 1
 1c6:	69 f1       	breq	.+90     	; 0x222 <DIO_Init+0x86>
 1c8:	38 f0       	brcs	.+14     	; 0x1d8 <DIO_Init+0x3c>
 1ca:	32 30       	cpi	r19, 0x02	; 2
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <DIO_Init+0x34>
 1ce:	4e c0       	rjmp	.+156    	; 0x26c <DIO_Init+0xd0>
 1d0:	33 30       	cpi	r19, 0x03	; 3
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <DIO_Init+0x3a>
 1d4:	70 c0       	rjmp	.+224    	; 0x2b6 <DIO_Init+0x11a>
 1d6:	93 c0       	rjmp	.+294    	; 0x2fe <DIO_Init+0x162>
      {
         case M_PORTA:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRA_R,u8pin);
 1d8:	ea b3       	in	r30, 0x1a	; 26
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	db 01       	movw	r26, r22
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_Init+0x4a>
 1e2:	aa 0f       	add	r26, r26
 1e4:	bb 1f       	adc	r27, r27
 1e6:	2a 95       	dec	r18
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_Init+0x46>
 1ea:	9d 01       	movw	r18, r26
 1ec:	5a 2f       	mov	r21, r26
 1ee:	50 95       	com	r21
 1f0:	6e 2f       	mov	r22, r30
 1f2:	65 23       	and	r22, r21
 1f4:	6a bb       	out	0x1a, r22	; 26
            CLR_BIT(PORTA_R,u8pin);
 1f6:	6b b3       	in	r22, 0x1b	; 27
 1f8:	56 23       	and	r21, r22
 1fa:	5b bb       	out	0x1b, r21	; 27
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 1fc:	fc 01       	movw	r30, r24
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	8e 0f       	add	r24, r30
 204:	9f 1f       	adc	r25, r31
 206:	fc 01       	movw	r30, r24
 208:	e6 55       	subi	r30, 0x56	; 86
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	81 81       	ldd	r24, Z+1	; 0x01
 20e:	88 23       	and	r24, r24
 210:	21 f0       	breq	.+8      	; 0x21a <DIO_Init+0x7e>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRA_R,u8pin);
 212:	8a b3       	in	r24, 0x1a	; 26
 214:	28 2b       	or	r18, r24
 216:	2a bb       	out	0x1a, r18	; 26
 218:	72 c0       	rjmp	.+228    	; 0x2fe <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTA_R,u8pin);
 21a:	8b b3       	in	r24, 0x1b	; 27
 21c:	28 2b       	or	r18, r24
 21e:	2b bb       	out	0x1b, r18	; 27
 220:	6e c0       	rjmp	.+220    	; 0x2fe <DIO_Init+0x162>
            }
         break;

         case M_PORTB:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRB_R,u8pin);
 222:	e7 b3       	in	r30, 0x17	; 23
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	db 01       	movw	r26, r22
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_Init+0x94>
 22c:	aa 0f       	add	r26, r26
 22e:	bb 1f       	adc	r27, r27
 230:	2a 95       	dec	r18
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_Init+0x90>
 234:	9d 01       	movw	r18, r26
 236:	5a 2f       	mov	r21, r26
 238:	50 95       	com	r21
 23a:	6e 2f       	mov	r22, r30
 23c:	65 23       	and	r22, r21
 23e:	67 bb       	out	0x17, r22	; 23
            CLR_BIT(PORTB_R,u8pin);
 240:	68 b3       	in	r22, 0x18	; 24
 242:	56 23       	and	r21, r22
 244:	58 bb       	out	0x18, r21	; 24
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 246:	fc 01       	movw	r30, r24
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	8e 0f       	add	r24, r30
 24e:	9f 1f       	adc	r25, r31
 250:	fc 01       	movw	r30, r24
 252:	e6 55       	subi	r30, 0x56	; 86
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	81 81       	ldd	r24, Z+1	; 0x01
 258:	88 23       	and	r24, r24
 25a:	21 f0       	breq	.+8      	; 0x264 <DIO_Init+0xc8>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRB_R,u8pin);
 25c:	87 b3       	in	r24, 0x17	; 23
 25e:	28 2b       	or	r18, r24
 260:	27 bb       	out	0x17, r18	; 23
 262:	4d c0       	rjmp	.+154    	; 0x2fe <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTB_R,u8pin);
 264:	88 b3       	in	r24, 0x18	; 24
 266:	28 2b       	or	r18, r24
 268:	28 bb       	out	0x18, r18	; 24
 26a:	49 c0       	rjmp	.+146    	; 0x2fe <DIO_Init+0x162>
            }
         break;

         case M_PORTC:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRC_R,u8pin);
 26c:	e4 b3       	in	r30, 0x14	; 20
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	db 01       	movw	r26, r22
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_Init+0xde>
 276:	aa 0f       	add	r26, r26
 278:	bb 1f       	adc	r27, r27
 27a:	2a 95       	dec	r18
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_Init+0xda>
 27e:	9d 01       	movw	r18, r26
 280:	5a 2f       	mov	r21, r26
 282:	50 95       	com	r21
 284:	6e 2f       	mov	r22, r30
 286:	65 23       	and	r22, r21
 288:	64 bb       	out	0x14, r22	; 20
            CLR_BIT(PORTC_R,u8pin);
 28a:	65 b3       	in	r22, 0x15	; 21
 28c:	56 23       	and	r21, r22
 28e:	55 bb       	out	0x15, r21	; 21
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 290:	fc 01       	movw	r30, r24
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	8e 0f       	add	r24, r30
 298:	9f 1f       	adc	r25, r31
 29a:	fc 01       	movw	r30, r24
 29c:	e6 55       	subi	r30, 0x56	; 86
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	81 81       	ldd	r24, Z+1	; 0x01
 2a2:	88 23       	and	r24, r24
 2a4:	21 f0       	breq	.+8      	; 0x2ae <DIO_Init+0x112>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRC_R,u8pin);
 2a6:	84 b3       	in	r24, 0x14	; 20
 2a8:	28 2b       	or	r18, r24
 2aa:	24 bb       	out	0x14, r18	; 20
 2ac:	28 c0       	rjmp	.+80     	; 0x2fe <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTC_R,u8pin);
 2ae:	85 b3       	in	r24, 0x15	; 21
 2b0:	28 2b       	or	r18, r24
 2b2:	25 bb       	out	0x15, r18	; 21
 2b4:	24 c0       	rjmp	.+72     	; 0x2fe <DIO_Init+0x162>
            }
         break;

         case M_PORTD:
            //clear the pin bit in the DDRx and PORTx registers of each port  
            CLR_BIT(DDRD_R,u8pin);
 2b6:	e1 b3       	in	r30, 0x11	; 17
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	db 01       	movw	r26, r22
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_Init+0x128>
 2c0:	aa 0f       	add	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	2a 95       	dec	r18
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_Init+0x124>
 2c8:	9d 01       	movw	r18, r26
 2ca:	5a 2f       	mov	r21, r26
 2cc:	50 95       	com	r21
 2ce:	6e 2f       	mov	r22, r30
 2d0:	65 23       	and	r22, r21
 2d2:	61 bb       	out	0x11, r22	; 17
            CLR_BIT(PORTD_R,u8pin);
 2d4:	62 b3       	in	r22, 0x12	; 18
 2d6:	56 23       	and	r21, r22
 2d8:	52 bb       	out	0x12, r21	; 18
            //if the pin is set as output
            if(astrDIOConfigParameters[u8i].enuPinDir)
 2da:	fc 01       	movw	r30, r24
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	8e 0f       	add	r24, r30
 2e2:	9f 1f       	adc	r25, r31
 2e4:	fc 01       	movw	r30, r24
 2e6:	e6 55       	subi	r30, 0x56	; 86
 2e8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ea:	81 81       	ldd	r24, Z+1	; 0x01
 2ec:	88 23       	and	r24, r24
 2ee:	21 f0       	breq	.+8      	; 0x2f8 <DIO_Init+0x15c>
            {
               //set its equivalent bit in the DDRx register
               SET_BIT(DDRD_R,u8pin);
 2f0:	81 b3       	in	r24, 0x11	; 17
 2f2:	28 2b       	or	r18, r24
 2f4:	21 bb       	out	0x11, r18	; 17
 2f6:	03 c0       	rjmp	.+6      	; 0x2fe <DIO_Init+0x162>
            {
               //if the pin is set as input, check if its pullup resistor will be used
               if (astrDIOConfigParameters[u8i].enuPullupResEn);
               {
                  //if so, set it's equivalent bit in the PORTx register
                  SET_BIT(PORTD_R,u8pin);
 2f8:	82 b3       	in	r24, 0x12	; 18
 2fa:	28 2b       	or	r18, r24
 2fc:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	43 30       	cpi	r20, 0x03	; 3
 302:	08 f4       	brcc	.+2      	; 0x306 <DIO_Init+0x16a>
 304:	4d cf       	rjmp	.-358    	; 0x1a0 <DIO_Init+0x4>
            }
         break;         
      }    
   }
   //return success status
   return SUCCESS;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 30a:	80 e0       	ldi	r24, 0x00	; 0
         break;         
      }    
   }
   //return success status
   return SUCCESS;
}
 30c:	08 95       	ret

0000030e <DIO_Write>:
************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8Data)
{
   uint8_t u8port,u8pin;
   //calculate the port and pin number of the selected object
   u8port=astrDIOConfigParameters[u8GroupId].enuPinNo / DIO_PINS_NO;
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	fc 01       	movw	r30, r24
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	e8 0f       	add	r30, r24
 318:	f9 1f       	adc	r31, r25
 31a:	e6 55       	subi	r30, 0x56	; 86
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	20 81       	ld	r18, Z
 320:	32 2f       	mov	r19, r18
 322:	36 95       	lsr	r19
 324:	36 95       	lsr	r19
 326:	36 95       	lsr	r19
   u8pin =astrDIOConfigParameters[u8GroupId].enuPinNo % DIO_PINS_NO;
 328:	27 70       	andi	r18, 0x07	; 7
   
   //if port number is invalid or the pin is set as input 
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
 32a:	34 30       	cpi	r19, 0x04	; 4
 32c:	08 f0       	brcs	.+2      	; 0x330 <DIO_Write+0x22>
 32e:	61 c0       	rjmp	.+194    	; 0x3f2 <DIO_Write+0xe4>
 330:	fc 01       	movw	r30, r24
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	8e 0f       	add	r24, r30
 338:	9f 1f       	adc	r25, r31
 33a:	fc 01       	movw	r30, r24
 33c:	e6 55       	subi	r30, 0x56	; 86
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	81 81       	ldd	r24, Z+1	; 0x01
 342:	88 23       	and	r24, r24
 344:	09 f4       	brne	.+2      	; 0x348 <DIO_Write+0x3a>
 346:	57 c0       	rjmp	.+174    	; 0x3f6 <DIO_Write+0xe8>
   }
   
   else
   {
      //select the calculated port 
      switch(u8port)
 348:	31 30       	cpi	r19, 0x01	; 1
 34a:	d1 f0       	breq	.+52     	; 0x380 <DIO_Write+0x72>
 34c:	28 f0       	brcs	.+10     	; 0x358 <DIO_Write+0x4a>
 34e:	32 30       	cpi	r19, 0x02	; 2
 350:	51 f1       	breq	.+84     	; 0x3a6 <DIO_Write+0x98>
 352:	33 30       	cpi	r19, 0x03	; 3
 354:	d9 f1       	breq	.+118    	; 0x3cc <DIO_Write+0xbe>
 356:	51 c0       	rjmp	.+162    	; 0x3fa <DIO_Write+0xec>
      {
         case M_PORTA:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTA_R,u8pin);
 358:	3b b3       	in	r19, 0x1b	; 27
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_Write+0x56>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	2a 95       	dec	r18
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_Write+0x52>
 368:	28 2f       	mov	r18, r24
 36a:	20 95       	com	r18
 36c:	23 23       	and	r18, r19
 36e:	2b bb       	out	0x1b, r18	; 27
            //if we want to apply 5V to the pin
            if (u8Data)
 370:	66 23       	and	r22, r22
 372:	09 f4       	brne	.+2      	; 0x376 <DIO_Write+0x68>
 374:	44 c0       	rjmp	.+136    	; 0x3fe <DIO_Write+0xf0>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTA_R,u8pin);
 376:	9b b3       	in	r25, 0x1b	; 27
 378:	89 2b       	or	r24, r25
 37a:	8b bb       	out	0x1b, r24	; 27
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret
            }
         break;

         case M_PORTB:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTB_R,u8pin);
 380:	38 b3       	in	r19, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_Write+0x7e>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	2a 95       	dec	r18
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_Write+0x7a>
 390:	28 2f       	mov	r18, r24
 392:	20 95       	com	r18
 394:	23 23       	and	r18, r19
 396:	28 bb       	out	0x18, r18	; 24
            //if we want to apply 5V to the pin
            if (u8Data)
 398:	66 23       	and	r22, r22
 39a:	99 f1       	breq	.+102    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTB_R,u8pin);
 39c:	98 b3       	in	r25, 0x18	; 24
 39e:	89 2b       	or	r24, r25
 3a0:	88 bb       	out	0x18, r24	; 24
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
            }
         break;

         case M_PORTC:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTC_R,u8pin);
 3a6:	35 b3       	in	r19, 0x15	; 21
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_Write+0xa4>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	2a 95       	dec	r18
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_Write+0xa0>
 3b6:	28 2f       	mov	r18, r24
 3b8:	20 95       	com	r18
 3ba:	23 23       	and	r18, r19
 3bc:	25 bb       	out	0x15, r18	; 21
            //if we want to apply 5V to the pin
            if (u8Data)
 3be:	66 23       	and	r22, r22
 3c0:	11 f1       	breq	.+68     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTC_R,u8pin);
 3c2:	95 b3       	in	r25, 0x15	; 21
 3c4:	89 2b       	or	r24, r25
 3c6:	85 bb       	out	0x15, r24	; 21
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
            }
         break;

         case M_PORTD:
            //clear the pin's equivalent bit in the PORTx Register
            CLR_BIT(PORTD_R,u8pin);
 3cc:	32 b3       	in	r19, 0x12	; 18
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_Write+0xca>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_Write+0xc6>
 3dc:	28 2f       	mov	r18, r24
 3de:	20 95       	com	r18
 3e0:	23 23       	and	r18, r19
 3e2:	22 bb       	out	0x12, r18	; 18
            //if we want to apply 5V to the pin
            if (u8Data)
 3e4:	66 23       	and	r22, r22
 3e6:	89 f0       	breq	.+34     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
            {
               //set the pin's equivalent bit in the PORTx Register
               SET_BIT(PORTD_R,u8pin);
 3e8:	92 b3       	in	r25, 0x12	; 18
 3ea:	89 2b       	or	r24, r25
 3ec:	82 bb       	out	0x12, r24	; 18
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	08 95       	ret
   
   //if port number is invalid or the pin is set as input 
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
   {
      //return error status
      return ERROR;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
            }
         break;
      }
   }
   //return success status
   return SUCCESS;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	08 95       	ret
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	08 95       	ret
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	08 95       	ret
 40a:	81 e0       	ldi	r24, 0x01	; 1
}
 40c:	08 95       	ret

0000040e <UART_Init>:
      UDR_R=(uint8_t)u16Data;
      return SUCCESS;
   }
   //else return error
   return ERROR;
}
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	1f 92       	push	r1
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	19 82       	std	Y+1, r1	; 0x01
 41a:	10 bc       	out	0x20, r1	; 32
 41c:	83 e3       	ldi	r24, 0x33	; 51
 41e:	89 b9       	out	0x09, r24	; 9
 420:	8a b1       	in	r24, 0x0a	; 10
 422:	88 60       	ori	r24, 0x08	; 8
 424:	8a b9       	out	0x0a, r24	; 10
 426:	8a b1       	in	r24, 0x0a	; 10
 428:	80 61       	ori	r24, 0x10	; 16
 42a:	8a b9       	out	0x0a, r24	; 10
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	82 60       	ori	r24, 0x02	; 2
 430:	89 83       	std	Y+1, r24	; 0x01
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	84 60       	ori	r24, 0x04	; 4
 436:	89 83       	std	Y+1, r24	; 0x01
 438:	8a b1       	in	r24, 0x0a	; 10
 43a:	8b 7f       	andi	r24, 0xFB	; 251
 43c:	8a b9       	out	0x0a, r24	; 10
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	80 62       	ori	r24, 0x20	; 32
 442:	89 83       	std	Y+1, r24	; 0x01
 444:	80 b5       	in	r24, 0x20	; 32
 446:	80 68       	ori	r24, 0x80	; 128
 448:	80 bd       	out	0x20, r24	; 32
 44a:	99 81       	ldd	r25, Y+1	; 0x01
 44c:	80 b5       	in	r24, 0x20	; 32
 44e:	89 2b       	or	r24, r25
 450:	80 bd       	out	0x20, r24	; 32
 452:	80 b5       	in	r24, 0x20	; 32
 454:	8f 77       	andi	r24, 0x7F	; 127
 456:	80 bd       	out	0x20, r24	; 32
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0f 90       	pop	r0
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	08 95       	ret

00000462 <UART_ReceiveData>:
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	61 f0       	breq	.+24     	; 0x47e <UART_ReceiveData+0x1c>
 466:	fc 01       	movw	r30, r24
 468:	11 82       	std	Z+1, r1	; 0x01
 46a:	10 82       	st	Z, r1
 46c:	5f 9b       	sbis	0x0b, 7	; 11
 46e:	fe cf       	rjmp	.-4      	; 0x46c <UART_ReceiveData+0xa>
 470:	2c b1       	in	r18, 0x0c	; 12
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	fc 01       	movw	r30, r24
 476:	31 83       	std	Z+1, r19	; 0x01
 478:	20 83       	st	Z, r18
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	08 95       	ret
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret

00000482 <UART_SendData>:
 482:	5d 9b       	sbis	0x0b, 5	; 11
 484:	fe cf       	rjmp	.-4      	; 0x482 <UART_SendData>
 486:	8c b9       	out	0x0c, r24	; 12
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	08 95       	ret

0000048c <UART_ReceiveString>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to Receive a string using uart
************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	7c 01       	movw	r14, r24
   uint8_t u8size=255,u8i;
   //traverse the string
   for (u8i=0; u8i<255;u8i++)
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <UART_ReceiveString+0x2a>
   {
      //receive each character stored in the UDR and store it in the appropriate place in the string
      UART_ReceiveData(pu8String+u8i);
 49c:	87 01       	movw	r16, r14
 49e:	0c 0f       	add	r16, r28
 4a0:	11 1d       	adc	r17, r1
 4a2:	c8 01       	movw	r24, r16
 4a4:	0e 94 31 02 	call	0x462	; 0x462 <UART_ReceiveData>
      //if termination characters are detected end the communication
      if (*(pu8String+u8i)=='\r'  ||  *(pu8String+u8i)=='\n')
 4a8:	f8 01       	movw	r30, r16
 4aa:	80 81       	ld	r24, Z
 4ac:	8d 30       	cpi	r24, 0x0D	; 13
 4ae:	29 f0       	breq	.+10     	; 0x4ba <UART_ReceiveString+0x2e>
 4b0:	8a 30       	cpi	r24, 0x0A	; 10
 4b2:	19 f0       	breq	.+6      	; 0x4ba <UART_ReceiveString+0x2e>
************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
   uint8_t u8size=255,u8i;
   //traverse the string
   for (u8i=0; u8i<255;u8i++)
 4b4:	cf 5f       	subi	r28, 0xFF	; 255
 4b6:	cf 3f       	cpi	r28, 0xFF	; 255
 4b8:	89 f7       	brne	.-30     	; 0x49c <UART_ReceiveString+0x10>
      {
         break;
      }
   }
   //end the string with null
   *(pu8String+u8i)=0;
 4ba:	f7 01       	movw	r30, r14
 4bc:	ec 0f       	add	r30, r28
 4be:	f1 1d       	adc	r31, r1
 4c0:	10 82       	st	Z, r1
   return SUCCESS;
   
}
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	08 95       	ret

000004d0 <UART_SendString>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to send a string using uart
************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	8c 01       	movw	r16, r24
   uint8_t u8size=0,u8i;
   //loop on string to determine its size
   for (u8i=0;pu8String[u8i];u8i++)
 4da:	80 e0       	ldi	r24, 0x00	; 0
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to send a string using uart
************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
   uint8_t u8size=0,u8i;
 4dc:	d0 e0       	ldi	r29, 0x00	; 0
   //loop on string to determine its size
   for (u8i=0;pu8String[u8i];u8i++)
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <UART_SendString+0x14>
   {
      u8size++;
 4e0:	df 5f       	subi	r29, 0xFF	; 255
************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
   uint8_t u8size=0,u8i;
   //loop on string to determine its size
   for (u8i=0;pu8String[u8i];u8i++)
 4e2:	8f 5f       	subi	r24, 0xFF	; 255
 4e4:	f8 01       	movw	r30, r16
 4e6:	e8 0f       	add	r30, r24
 4e8:	f1 1d       	adc	r31, r1
 4ea:	90 81       	ld	r25, Z
 4ec:	91 11       	cpse	r25, r1
 4ee:	f8 cf       	rjmp	.-16     	; 0x4e0 <UART_SendString+0x10>
 4f0:	c0 e0       	ldi	r28, 0x00	; 0
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <UART_SendString+0x34>
   }
   //loop on the string
   for (u8i=0; u8i<u8size;u8i++)
   {
      //send each character independently
      UART_SendData(*(pu8String+u8i));
 4f4:	f8 01       	movw	r30, r16
 4f6:	ec 0f       	add	r30, r28
 4f8:	f1 1d       	adc	r31, r1
 4fa:	80 81       	ld	r24, Z
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 41 02 	call	0x482	; 0x482 <UART_SendData>
   for (u8i=0;pu8String[u8i];u8i++)
   {
      u8size++;
   }
   //loop on the string
   for (u8i=0; u8i<u8size;u8i++)
 502:	cf 5f       	subi	r28, 0xFF	; 255
 504:	cd 17       	cp	r28, r29
 506:	b0 f3       	brcs	.-20     	; 0x4f4 <UART_SendString+0x24>
   {
      //send each character independently
      UART_SendData(*(pu8String+u8i));
   }
   //send termination characters when done
   UART_SendData('\r');
 508:	8d e0       	ldi	r24, 0x0D	; 13
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 41 02 	call	0x482	; 0x482 <UART_SendData>
   UART_SendData('\n');
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 41 02 	call	0x482	; 0x482 <UART_SendData>
   
   return SUCCESS;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	08 95       	ret

00000524 <_exit>:
 524:	f8 94       	cli

00000526 <__stop_program>:
 526:	ff cf       	rjmp	.-2      	; 0x526 <__stop_program>
