
I2C_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b9  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000673  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fe  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000220  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "MCAL/I2C/I2C.h"
#include "util/delay.h"

int main(void)
{
    I2C_Init();
  82:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	89 e6       	ldi	r24, 0x69	; 105
  8a:	98 e1       	ldi	r25, 0x18	; 24
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <main+0xa>
  94:	00 c0       	rjmp	.+0      	; 0x96 <main+0x14>
  96:	00 00       	nop
    /* Replace with your application code */
    _delay_ms(1000);
     I2C_MASTER_SendData(0x02,'A');
  98:	61 e4       	ldi	r22, 0x41	; 65
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	0e 94 7e 00 	call	0xfc	; 0xfc <I2C_MASTER_SendData>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x1e>

000000a2 <I2C_GetStatus>:
{
   CLR_BIT(TWCR_R,TWSTO_B);
   SET_BIT(TWCR_R,TWSTA_B);
   SET_BIT(TWCR_R,TWEN_B);
   SET_BIT(TWCR_R,TWINT_B);
}
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	88 7f       	andi	r24, 0xF8	; 248
  a6:	08 95       	ret

000000a8 <I2C_Init>:
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	81 b9       	out	0x01, r24	; 1
  ae:	81 b1       	in	r24, 0x01	; 1
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	81 b9       	out	0x01, r24	; 1
  b4:	80 e2       	ldi	r24, 0x20	; 32
  b6:	80 b9       	out	0x00, r24	; 0
  b8:	12 b8       	out	0x02, r1	; 2
  ba:	86 b7       	in	r24, 0x36	; 54
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	86 bf       	out	0x36, r24	; 54
  c0:	86 b7       	in	r24, 0x36	; 54
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	86 bf       	out	0x36, r24	; 54
  c6:	08 95       	ret

000000c8 <I2C_Start>:
  c8:	86 b7       	in	r24, 0x36	; 54
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	86 bf       	out	0x36, r24	; 54
  ce:	86 b7       	in	r24, 0x36	; 54
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	86 bf       	out	0x36, r24	; 54
  d4:	86 b7       	in	r24, 0x36	; 54
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	86 bf       	out	0x36, r24	; 54
  da:	86 b7       	in	r24, 0x36	; 54
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	86 bf       	out	0x36, r24	; 54
  e0:	08 95       	ret

000000e2 <I2C_Stop>:

enuErrorStatus_t I2C_Stop(void)
{
   CLR_BIT(TWCR_R,TWSTA_B);
  e2:	86 b7       	in	r24, 0x36	; 54
  e4:	8f 7d       	andi	r24, 0xDF	; 223
  e6:	86 bf       	out	0x36, r24	; 54
   SET_BIT(TWCR_R,TWSTO_B);
  e8:	86 b7       	in	r24, 0x36	; 54
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	86 bf       	out	0x36, r24	; 54
   SET_BIT(TWCR_R,TWEN_B);
  ee:	86 b7       	in	r24, 0x36	; 54
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	86 bf       	out	0x36, r24	; 54
   SET_BIT(TWCR_R,TWINT_B);
  f4:	86 b7       	in	r24, 0x36	; 54
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	86 bf       	out	0x36, r24	; 54
}
  fa:	08 95       	ret

000000fc <I2C_MASTER_SendData>:

enuErrorStatus_t I2C_MASTER_SendData(uint8_t u8SlaveAddress,uint8_t u8Data)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	c8 2f       	mov	r28, r24
 102:	d6 2f       	mov	r29, r22
   I2C_Start();
 104:	0e 94 64 00 	call	0xc8	; 0xc8 <I2C_Start>
   while(!GET_BIT(TWCR_R,TWINT_B));
 108:	06 b6       	in	r0, 0x36	; 54
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <I2C_MASTER_SendData+0xc>
   if(I2C_GetStatus()!=START_TRANSMITTED)
 10e:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_GetStatus>
 112:	88 30       	cpi	r24, 0x08	; 8
 114:	d1 f4       	brne	.+52     	; 0x14a <I2C_MASTER_SendData+0x4e>
   {
      return ERROR;
   }
   TWDR_R= (u8SlaveAddress<<1) | I2C_WRITE;
 116:	cc 0f       	add	r28, r28
 118:	c3 b9       	out	0x03, r28	; 3
   SET_BIT(TWCR_R,TWINT_B);
 11a:	86 b7       	in	r24, 0x36	; 54
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	86 bf       	out	0x36, r24	; 54
   while(!GET_BIT(TWCR_R,TWINT_B));
 120:	06 b6       	in	r0, 0x36	; 54
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <I2C_MASTER_SendData+0x24>
   if(I2C_GetStatus()!=SLA_W_TRANSMITTED_ACK)
 126:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_GetStatus>
 12a:	88 31       	cpi	r24, 0x18	; 24
 12c:	71 f4       	brne	.+28     	; 0x14a <I2C_MASTER_SendData+0x4e>
   {
      return ERROR;
   }
   TWDR_R=u8Data;
 12e:	d3 b9       	out	0x03, r29	; 3
   SET_BIT(TWCR_R,TWINT_B);
 130:	86 b7       	in	r24, 0x36	; 54
 132:	80 68       	ori	r24, 0x80	; 128
 134:	86 bf       	out	0x36, r24	; 54
   while(!GET_BIT(TWCR_R,TWINT_B));
 136:	06 b6       	in	r0, 0x36	; 54
 138:	07 fe       	sbrs	r0, 7
 13a:	fd cf       	rjmp	.-6      	; 0x136 <I2C_MASTER_SendData+0x3a>
   if(I2C_GetStatus()!=MASTER_DATA_TRANSMITTED_ACK)
 13c:	0e 94 51 00 	call	0xa2	; 0xa2 <I2C_GetStatus>
 140:	88 32       	cpi	r24, 0x28	; 40
 142:	19 f4       	brne	.+6      	; 0x14a <I2C_MASTER_SendData+0x4e>
   {
      return ERROR;
   }
   I2C_Stop();
 144:	0e 94 71 00 	call	0xe2	; 0xe2 <I2C_Stop>
}
 148:	01 c0       	rjmp	.+2      	; 0x14c <I2C_MASTER_SendData+0x50>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
