
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000002d0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800084  00800084  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085d  00000000  00000000  0000125b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d6  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e4  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/SPI/SPI.h"



int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
    SPI_Init();
  9c:	0e 94 2f 01 	call	0x25e	; 0x25e <SPI_Init>
    uint8_t Data=7;
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	89 83       	std	Y+1, r24	; 0x01
    PORTC_R=0;
  a4:	15 ba       	out	0x15, r1	; 21
    while (1) 
    {
       SPI_ReceiveData(&Data);
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_ReceiveData>
       PORTC_R=Data;
  ae:	89 81       	ldd	r24, Y+1	; 0x01
  b0:	85 bb       	out	0x15, r24	; 21
  b2:	f9 cf       	rjmp	.-14     	; 0xa6 <main+0x14>

000000b4 <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	cc c0       	rjmp	.+408    	; 0x250 <DIO_Init+0x19c>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
  b8:	84 2f       	mov	r24, r20
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	fc 01       	movw	r30, r24
  be:	ee 0f       	add	r30, r30
  c0:	ff 1f       	adc	r31, r31
  c2:	e8 0f       	add	r30, r24
  c4:	f9 1f       	adc	r31, r25
  c6:	e0 5a       	subi	r30, 0xA0	; 160
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	20 81       	ld	r18, Z
  cc:	32 2f       	mov	r19, r18
  ce:	36 95       	lsr	r19
  d0:	36 95       	lsr	r19
  d2:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
  d4:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
  d6:	34 30       	cpi	r19, 0x04	; 4
  d8:	08 f0       	brcs	.+2      	; 0xdc <DIO_Init+0x28>
  da:	bf c0       	rjmp	.+382    	; 0x25a <DIO_Init+0x1a6>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
  dc:	31 30       	cpi	r19, 0x01	; 1
  de:	a1 f1       	breq	.+104    	; 0x148 <DIO_Init+0x94>
  e0:	38 f0       	brcs	.+14     	; 0xf0 <DIO_Init+0x3c>
  e2:	32 30       	cpi	r19, 0x02	; 2
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_Init+0x34>
  e6:	5c c0       	rjmp	.+184    	; 0x1a0 <DIO_Init+0xec>
  e8:	33 30       	cpi	r19, 0x03	; 3
  ea:	09 f4       	brne	.+2      	; 0xee <DIO_Init+0x3a>
  ec:	84 c0       	rjmp	.+264    	; 0x1f6 <DIO_Init+0x142>
  ee:	af c0       	rjmp	.+350    	; 0x24e <DIO_Init+0x19a>
      {
         case M_PORTA:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRA_R,u8pin);
  f0:	3a b3       	in	r19, 0x1a	; 26
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_Init+0x48>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	2a 95       	dec	r18
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_Init+0x44>
 100:	26 2f       	mov	r18, r22
 102:	20 95       	com	r18
 104:	32 23       	and	r19, r18
 106:	3a bb       	out	0x1a, r19	; 26
         CLR_BIT(PORTA_R,u8pin);
 108:	3b b3       	in	r19, 0x1b	; 27
 10a:	23 23       	and	r18, r19
 10c:	2b bb       	out	0x1b, r18	; 27
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 10e:	fc 01       	movw	r30, r24
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	e8 0f       	add	r30, r24
 116:	f9 1f       	adc	r31, r25
 118:	e0 5a       	subi	r30, 0xA0	; 160
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	21 81       	ldd	r18, Z+1	; 0x01
 11e:	22 23       	and	r18, r18
 120:	19 f0       	breq	.+6      	; 0x128 <DIO_Init+0x74>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRA_R,u8pin);
 122:	2a b3       	in	r18, 0x1a	; 26
 124:	26 2b       	or	r18, r22
 126:	2a bb       	out	0x1a, r18	; 26
         }

         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 128:	fc 01       	movw	r30, r24
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	8e 0f       	add	r24, r30
 130:	9f 1f       	adc	r25, r31
 132:	fc 01       	movw	r30, r24
 134:	e0 5a       	subi	r30, 0xA0	; 160
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	82 81       	ldd	r24, Z+2	; 0x02
 13a:	88 23       	and	r24, r24
 13c:	09 f4       	brne	.+2      	; 0x140 <DIO_Init+0x8c>
 13e:	87 c0       	rjmp	.+270    	; 0x24e <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTA_R,u8pin);
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	68 2b       	or	r22, r24
 144:	6b bb       	out	0x1b, r22	; 27
 146:	83 c0       	rjmp	.+262    	; 0x24e <DIO_Init+0x19a>
         }
         break;

         case M_PORTB:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRB_R,u8pin);
 148:	37 b3       	in	r19, 0x17	; 23
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_Init+0xa0>
 150:	66 0f       	add	r22, r22
 152:	77 1f       	adc	r23, r23
 154:	2a 95       	dec	r18
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_Init+0x9c>
 158:	26 2f       	mov	r18, r22
 15a:	20 95       	com	r18
 15c:	32 23       	and	r19, r18
 15e:	37 bb       	out	0x17, r19	; 23
         CLR_BIT(PORTB_R,u8pin);
 160:	38 b3       	in	r19, 0x18	; 24
 162:	23 23       	and	r18, r19
 164:	28 bb       	out	0x18, r18	; 24
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 166:	fc 01       	movw	r30, r24
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	e8 0f       	add	r30, r24
 16e:	f9 1f       	adc	r31, r25
 170:	e0 5a       	subi	r30, 0xA0	; 160
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	21 81       	ldd	r18, Z+1	; 0x01
 176:	22 23       	and	r18, r18
 178:	19 f0       	breq	.+6      	; 0x180 <DIO_Init+0xcc>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRB_R,u8pin);
 17a:	27 b3       	in	r18, 0x17	; 23
 17c:	26 2b       	or	r18, r22
 17e:	27 bb       	out	0x17, r18	; 23
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 180:	fc 01       	movw	r30, r24
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	8e 0f       	add	r24, r30
 188:	9f 1f       	adc	r25, r31
 18a:	fc 01       	movw	r30, r24
 18c:	e0 5a       	subi	r30, 0xA0	; 160
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	82 81       	ldd	r24, Z+2	; 0x02
 192:	88 23       	and	r24, r24
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_Init+0xe4>
 196:	5b c0       	rjmp	.+182    	; 0x24e <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTB_R,u8pin);
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	68 2b       	or	r22, r24
 19c:	68 bb       	out	0x18, r22	; 24
 19e:	57 c0       	rjmp	.+174    	; 0x24e <DIO_Init+0x19a>
         }
         break;

         case M_PORTC:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRC_R,u8pin);
 1a0:	34 b3       	in	r19, 0x14	; 20
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_Init+0xf8>
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	2a 95       	dec	r18
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_Init+0xf4>
 1b0:	26 2f       	mov	r18, r22
 1b2:	20 95       	com	r18
 1b4:	32 23       	and	r19, r18
 1b6:	34 bb       	out	0x14, r19	; 20
         CLR_BIT(PORTC_R,u8pin);
 1b8:	35 b3       	in	r19, 0x15	; 21
 1ba:	23 23       	and	r18, r19
 1bc:	25 bb       	out	0x15, r18	; 21
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 1be:	fc 01       	movw	r30, r24
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e8 0f       	add	r30, r24
 1c6:	f9 1f       	adc	r31, r25
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	21 81       	ldd	r18, Z+1	; 0x01
 1ce:	22 23       	and	r18, r18
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <DIO_Init+0x124>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRC_R,u8pin);
 1d2:	24 b3       	in	r18, 0x14	; 20
 1d4:	26 2b       	or	r18, r22
 1d6:	24 bb       	out	0x14, r18	; 20
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 1d8:	fc 01       	movw	r30, r24
 1da:	ee 0f       	add	r30, r30
 1dc:	ff 1f       	adc	r31, r31
 1de:	8e 0f       	add	r24, r30
 1e0:	9f 1f       	adc	r25, r31
 1e2:	fc 01       	movw	r30, r24
 1e4:	e0 5a       	subi	r30, 0xA0	; 160
 1e6:	ff 4f       	sbci	r31, 0xFF	; 255
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	88 23       	and	r24, r24
 1ec:	81 f1       	breq	.+96     	; 0x24e <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTC_R,u8pin);
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	68 2b       	or	r22, r24
 1f2:	65 bb       	out	0x15, r22	; 21
 1f4:	2c c0       	rjmp	.+88     	; 0x24e <DIO_Init+0x19a>
         }
         break;

         case M_PORTD:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRD_R,u8pin);
 1f6:	61 b3       	in	r22, 0x11	; 17
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	df 01       	movw	r26, r30
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_Init+0x150>
 200:	aa 0f       	add	r26, r26
 202:	bb 1f       	adc	r27, r27
 204:	2a 95       	dec	r18
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_Init+0x14c>
 208:	9d 01       	movw	r18, r26
 20a:	5a 2f       	mov	r21, r26
 20c:	50 95       	com	r21
 20e:	65 23       	and	r22, r21
 210:	61 bb       	out	0x11, r22	; 17
         CLR_BIT(PORTD_R,u8pin);
 212:	62 b3       	in	r22, 0x12	; 18
 214:	56 23       	and	r21, r22
 216:	52 bb       	out	0x12, r21	; 18
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 218:	fc 01       	movw	r30, r24
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e8 0f       	add	r30, r24
 220:	f9 1f       	adc	r31, r25
 222:	e0 5a       	subi	r30, 0xA0	; 160
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	51 81       	ldd	r21, Z+1	; 0x01
 228:	55 23       	and	r21, r21
 22a:	19 f0       	breq	.+6      	; 0x232 <DIO_Init+0x17e>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRD_R,u8pin);
 22c:	51 b3       	in	r21, 0x11	; 17
 22e:	5a 2b       	or	r21, r26
 230:	51 bb       	out	0x11, r21	; 17
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 232:	fc 01       	movw	r30, r24
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	8e 0f       	add	r24, r30
 23a:	9f 1f       	adc	r25, r31
 23c:	fc 01       	movw	r30, r24
 23e:	e0 5a       	subi	r30, 0xA0	; 160
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	82 81       	ldd	r24, Z+2	; 0x02
 244:	88 23       	and	r24, r24
 246:	19 f0       	breq	.+6      	; 0x24e <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTD_R,u8pin);
 248:	82 b3       	in	r24, 0x12	; 18
 24a:	28 2b       	or	r18, r24
 24c:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 24e:	4f 5f       	subi	r20, 0xFF	; 255
 250:	4c 30       	cpi	r20, 0x0C	; 12
 252:	08 f4       	brcc	.+2      	; 0x256 <DIO_Init+0x1a2>
 254:	31 cf       	rjmp	.-414    	; 0xb8 <DIO_Init+0x4>
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
   }
   //return success status
   return SUCCESS;
}
 25c:	08 95       	ret

0000025e <SPI_Init>:
      return ERROR;
   }
   //setup callback
   SPI_Callback=local_fptr;
   return SUCCESS;
}
 25e:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_Init>
 262:	8d b1       	in	r24, 0x0d	; 13
 264:	80 64       	ori	r24, 0x40	; 64
 266:	8d b9       	out	0x0d, r24	; 13
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	08 95       	ret

0000026c <SPI_ReceiveData>:
 26c:	77 9b       	sbis	0x0e, 7	; 14
 26e:	fe cf       	rjmp	.-4      	; 0x26c <SPI_ReceiveData>
 270:	2f b1       	in	r18, 0x0f	; 15
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	08 95       	ret

0000027a <__vector_12>:
* Parameters (out): void
* Return value: void
* Description: SPI serial transfer complete interrupt service routine 
************************************************************************************/
ISR(SPI_STC_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	5f 93       	push	r21
 28c:	6f 93       	push	r22
 28e:	7f 93       	push	r23
 290:	8f 93       	push	r24
 292:	9f 93       	push	r25
 294:	af 93       	push	r26
 296:	bf 93       	push	r27
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
   if (SPI_Callback != NULLPTR)
 29c:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__data_end>
 2a0:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__data_end+0x1>
 2a4:	30 97       	sbiw	r30, 0x00	; 0
 2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_12+0x30>
   {
      SPI_Callback();
 2a8:	09 95       	icall
   }
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
