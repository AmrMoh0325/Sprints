
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c38  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d3  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059b  00000000  00000000  00001813  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000446  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000375  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */ 

#include "MCAL/SPI/SPI.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	1f 92       	push	r1
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    SPI_Init();
  8c:	0e 94 22 01 	call	0x244	; 0x244 <SPI_Init>
    uint8_t Data=7;
  90:	87 e0       	ldi	r24, 0x07	; 7
  92:	89 83       	std	Y+1, r24	; 0x01
    PORTC_R=0;
  94:	15 ba       	out	0x15, r1	; 21
    while (1) 
    {
       SPI_RecieveData(&Data);
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	0e 94 29 01 	call	0x252	; 0x252 <SPI_RecieveData>
       PORTC_R=Data;
  9e:	89 81       	ldd	r24, Y+1	; 0x01
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	f9 cf       	rjmp	.-14     	; 0x96 <main+0x14>

000000a4 <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	c7 c0       	rjmp	.+398    	; 0x236 <DIO_Init+0x192>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
  a8:	84 2f       	mov	r24, r20
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e8 0f       	add	r30, r24
  b4:	f9 1f       	adc	r31, r25
  b6:	e0 5a       	subi	r30, 0xA0	; 160
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	20 81       	ld	r18, Z
  bc:	32 2f       	mov	r19, r18
  be:	36 95       	lsr	r19
  c0:	36 95       	lsr	r19
  c2:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
  c4:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
  c6:	34 30       	cpi	r19, 0x04	; 4
  c8:	08 f0       	brcs	.+2      	; 0xcc <DIO_Init+0x28>
  ca:	ba c0       	rjmp	.+372    	; 0x240 <DIO_Init+0x19c>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
  cc:	31 30       	cpi	r19, 0x01	; 1
  ce:	d1 f1       	breq	.+116    	; 0x144 <DIO_Init+0xa0>
  d0:	38 f0       	brcs	.+14     	; 0xe0 <DIO_Init+0x3c>
  d2:	32 30       	cpi	r19, 0x02	; 2
  d4:	09 f4       	brne	.+2      	; 0xd8 <DIO_Init+0x34>
  d6:	65 c0       	rjmp	.+202    	; 0x1a2 <DIO_Init+0xfe>
  d8:	33 30       	cpi	r19, 0x03	; 3
  da:	09 f4       	brne	.+2      	; 0xde <DIO_Init+0x3a>
  dc:	87 c0       	rjmp	.+270    	; 0x1ec <DIO_Init+0x148>
  de:	aa c0       	rjmp	.+340    	; 0x234 <DIO_Init+0x190>
      {
         case M_PORTA:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRA_R,u8pin);
  e0:	5a b3       	in	r21, 0x1a	; 26
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	db 01       	movw	r26, r22
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_Init+0x4a>
  ea:	aa 0f       	add	r26, r26
  ec:	bb 1f       	adc	r27, r27
  ee:	2a 95       	dec	r18
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_Init+0x46>
  f2:	9d 01       	movw	r18, r26
  f4:	6a 2f       	mov	r22, r26
  f6:	60 95       	com	r22
  f8:	56 23       	and	r21, r22
  fa:	5a bb       	out	0x1a, r21	; 26
         CLR_BIT(PORTA_R,u8pin);
  fc:	5b b3       	in	r21, 0x1b	; 27
  fe:	56 23       	and	r21, r22
 100:	5b bb       	out	0x1b, r21	; 27
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 102:	fc 01       	movw	r30, r24
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	e0 5a       	subi	r30, 0xA0	; 160
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	51 81       	ldd	r21, Z+1	; 0x01
 112:	55 23       	and	r21, r21
 114:	21 f0       	breq	.+8      	; 0x11e <DIO_Init+0x7a>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRA_R,u8pin);
 116:	8a b3       	in	r24, 0x1a	; 26
 118:	28 2b       	or	r18, r24
 11a:	2a bb       	out	0x1a, r18	; 26
 11c:	8b c0       	rjmp	.+278    	; 0x234 <DIO_Init+0x190>
         }
         else
         {
            //if the pin is set as input, check if its pullup resistor will be used
            if (astrDIOConfigParameters[u8i].enuPullupResEn==NO_CONNECTION)
 11e:	fc 01       	movw	r30, r24
 120:	ee 0f       	add	r30, r30
 122:	ff 1f       	adc	r31, r31
 124:	8e 0f       	add	r24, r30
 126:	9f 1f       	adc	r25, r31
 128:	fc 01       	movw	r30, r24
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	81 11       	cpse	r24, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <DIO_Init+0x98>
            {
               CLR_BIT(PORTA_R,u8pin);
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	68 23       	and	r22, r24
 138:	6b bb       	out	0x1b, r22	; 27
 13a:	7c c0       	rjmp	.+248    	; 0x234 <DIO_Init+0x190>
            }
            else
            {
               //if so, set it's equivalent bit in the PORTx register
               SET_BIT(PORTA_R,u8pin);
 13c:	8b b3       	in	r24, 0x1b	; 27
 13e:	28 2b       	or	r18, r24
 140:	2b bb       	out	0x1b, r18	; 27
 142:	78 c0       	rjmp	.+240    	; 0x234 <DIO_Init+0x190>
         }
         break;

         case M_PORTB:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRB_R,u8pin);
 144:	67 b3       	in	r22, 0x17	; 23
 146:	e1 e0       	ldi	r30, 0x01	; 1
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	df 01       	movw	r26, r30
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_Init+0xae>
 14e:	aa 0f       	add	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	2a 95       	dec	r18
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_Init+0xaa>
 156:	9d 01       	movw	r18, r26
 158:	5a 2f       	mov	r21, r26
 15a:	50 95       	com	r21
 15c:	65 23       	and	r22, r21
 15e:	67 bb       	out	0x17, r22	; 23
         CLR_BIT(PORTB_R,u8pin);
 160:	68 b3       	in	r22, 0x18	; 24
 162:	56 23       	and	r21, r22
 164:	58 bb       	out	0x18, r21	; 24
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 166:	fc 01       	movw	r30, r24
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	e8 0f       	add	r30, r24
 16e:	f9 1f       	adc	r31, r25
 170:	e0 5a       	subi	r30, 0xA0	; 160
 172:	ff 4f       	sbci	r31, 0xFF	; 255
 174:	51 81       	ldd	r21, Z+1	; 0x01
 176:	55 23       	and	r21, r21
 178:	21 f0       	breq	.+8      	; 0x182 <DIO_Init+0xde>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRB_R,u8pin);
 17a:	87 b3       	in	r24, 0x17	; 23
 17c:	28 2b       	or	r18, r24
 17e:	27 bb       	out	0x17, r18	; 23
 180:	59 c0       	rjmp	.+178    	; 0x234 <DIO_Init+0x190>
         }
         else
         {
            //if the pin is set as input, check if its pullup resistor will be used
            if (astrDIOConfigParameters[u8i].enuPullupResEn)
 182:	fc 01       	movw	r30, r24
 184:	ee 0f       	add	r30, r30
 186:	ff 1f       	adc	r31, r31
 188:	8e 0f       	add	r24, r30
 18a:	9f 1f       	adc	r25, r31
 18c:	fc 01       	movw	r30, r24
 18e:	e0 5a       	subi	r30, 0xA0	; 160
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	82 81       	ldd	r24, Z+2	; 0x02
 194:	88 23       	and	r24, r24
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_Init+0xf6>
 198:	4d c0       	rjmp	.+154    	; 0x234 <DIO_Init+0x190>
            {
               //if so, set it's equivalent bit in the PORTx register
               SET_BIT(PORTB_R,u8pin);
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	28 2b       	or	r18, r24
 19e:	28 bb       	out	0x18, r18	; 24
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <DIO_Init+0x190>
         }
         break;

         case M_PORTC:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRC_R,u8pin);
 1a2:	e4 b3       	in	r30, 0x14	; 20
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	db 01       	movw	r26, r22
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_Init+0x10c>
 1ac:	aa 0f       	add	r26, r26
 1ae:	bb 1f       	adc	r27, r27
 1b0:	2a 95       	dec	r18
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_Init+0x108>
 1b4:	9d 01       	movw	r18, r26
 1b6:	5a 2f       	mov	r21, r26
 1b8:	50 95       	com	r21
 1ba:	6e 2f       	mov	r22, r30
 1bc:	65 23       	and	r22, r21
 1be:	64 bb       	out	0x14, r22	; 20
         CLR_BIT(PORTC_R,u8pin);
 1c0:	65 b3       	in	r22, 0x15	; 21
 1c2:	56 23       	and	r21, r22
 1c4:	55 bb       	out	0x15, r21	; 21
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 1c6:	fc 01       	movw	r30, r24
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	8e 0f       	add	r24, r30
 1ce:	9f 1f       	adc	r25, r31
 1d0:	fc 01       	movw	r30, r24
 1d2:	e0 5a       	subi	r30, 0xA0	; 160
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	81 81       	ldd	r24, Z+1	; 0x01
 1d8:	88 23       	and	r24, r24
 1da:	21 f0       	breq	.+8      	; 0x1e4 <DIO_Init+0x140>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRC_R,u8pin);
 1dc:	84 b3       	in	r24, 0x14	; 20
 1de:	28 2b       	or	r18, r24
 1e0:	24 bb       	out	0x14, r18	; 20
 1e2:	28 c0       	rjmp	.+80     	; 0x234 <DIO_Init+0x190>
         {
            //if the pin is set as input, check if its pullup resistor will be used
            if (astrDIOConfigParameters[u8i].enuPullupResEn);
            {
               //if so, set it's equivalent bit in the PORTx register
               SET_BIT(PORTC_R,u8pin);
 1e4:	85 b3       	in	r24, 0x15	; 21
 1e6:	28 2b       	or	r18, r24
 1e8:	25 bb       	out	0x15, r18	; 21
 1ea:	24 c0       	rjmp	.+72     	; 0x234 <DIO_Init+0x190>
         }
         break;

         case M_PORTD:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRD_R,u8pin);
 1ec:	e1 b3       	in	r30, 0x11	; 17
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	db 01       	movw	r26, r22
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_Init+0x156>
 1f6:	aa 0f       	add	r26, r26
 1f8:	bb 1f       	adc	r27, r27
 1fa:	2a 95       	dec	r18
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_Init+0x152>
 1fe:	9d 01       	movw	r18, r26
 200:	5a 2f       	mov	r21, r26
 202:	50 95       	com	r21
 204:	6e 2f       	mov	r22, r30
 206:	65 23       	and	r22, r21
 208:	61 bb       	out	0x11, r22	; 17
         CLR_BIT(PORTD_R,u8pin);
 20a:	62 b3       	in	r22, 0x12	; 18
 20c:	56 23       	and	r21, r22
 20e:	52 bb       	out	0x12, r21	; 18
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 210:	fc 01       	movw	r30, r24
 212:	ee 0f       	add	r30, r30
 214:	ff 1f       	adc	r31, r31
 216:	8e 0f       	add	r24, r30
 218:	9f 1f       	adc	r25, r31
 21a:	fc 01       	movw	r30, r24
 21c:	e0 5a       	subi	r30, 0xA0	; 160
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	81 81       	ldd	r24, Z+1	; 0x01
 222:	88 23       	and	r24, r24
 224:	21 f0       	breq	.+8      	; 0x22e <DIO_Init+0x18a>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRD_R,u8pin);
 226:	81 b3       	in	r24, 0x11	; 17
 228:	28 2b       	or	r18, r24
 22a:	21 bb       	out	0x11, r18	; 17
 22c:	03 c0       	rjmp	.+6      	; 0x234 <DIO_Init+0x190>
         {
            //if the pin is set as input, check if its pullup resistor will be used
            if (astrDIOConfigParameters[u8i].enuPullupResEn);
            {
               //if so, set it's equivalent bit in the PORTx register
               SET_BIT(PORTD_R,u8pin);
 22e:	82 b3       	in	r24, 0x12	; 18
 230:	28 2b       	or	r18, r24
 232:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 234:	4f 5f       	subi	r20, 0xFF	; 255
 236:	4c 30       	cpi	r20, 0x0C	; 12
 238:	08 f4       	brcc	.+2      	; 0x23c <DIO_Init+0x198>
 23a:	36 cf       	rjmp	.-404    	; 0xa8 <DIO_Init+0x4>
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 240:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
   }
   //return success status
   return SUCCESS;
}
 242:	08 95       	ret

00000244 <SPI_Init>:
{
   /*send a signal to the slave interrupt pin */
   SPDR_R=u8Data;
   while (!GET_BIT(SPSR_R,SPIF_B));
   return SUCCESS;
}
 244:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_Init>
 248:	8d b1       	in	r24, 0x0d	; 13
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	8d b9       	out	0x0d, r24	; 13
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	08 95       	ret

00000252 <SPI_RecieveData>:

enuErrorStatus_t SPI_RecieveData(uint8_t *pu8Data)
{
   while (!GET_BIT(SPSR_R,SPIF_B));
 252:	77 9b       	sbis	0x0e, 7	; 14
 254:	fe cf       	rjmp	.-4      	; 0x252 <SPI_RecieveData>
   *pu8Data=SPDR_R;
 256:	2f b1       	in	r18, 0x0f	; 15
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
   return SUCCESS;
}
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	08 95       	ret

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
