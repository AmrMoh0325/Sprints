
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000b7c  00000c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800070  00800070  00000c20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001474  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ed  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1b  00000000  00000000  00002c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00003970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a1e  00000000  00000000  00003d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d0b  00000000  00000000  0000476a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005475  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8a:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Simple_App>:


void Simple_App(void)
{
   static uint8_t Data=0;
   DIO_Toggle(test);
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	0e 94 ca 01 	call	0x394	; 0x394 <DIO_Toggle>
   SPI_SendData(Data++);
  98:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	98 0f       	add	r25, r24
  a0:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__data_end>
  a4:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_SendData>
  a8:	08 95       	ret

000000aa <main>:

int main(void)
{
    
    
    SPI_Init();
  aa:	0e 94 24 02 	call	0x448	; 0x448 <SPI_Init>
    DIO_Write(test,HIGH);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_Write>
    T0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_8);
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 3e 02 	call	0x47c	; 0x47c <T0_Init>
    T0_OV_InterruptEnable();
  be:	0e 94 a6 02 	call	0x54c	; 0x54c <T0_OV_InterruptEnable>
    sei();
  c2:	78 94       	sei
    T0_Start(100000,Simple_App);
  c4:	09 e4       	ldi	r16, 0x49	; 73
  c6:	10 e0       	ldi	r17, 0x00	; 0
  c8:	20 ea       	ldi	r18, 0xA0	; 160
  ca:	36 e8       	ldi	r19, 0x86	; 134
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 ab 02 	call	0x556	; 0x556 <T0_Start>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x32>

000000de <DIO_Init>:
         break;
      }
   }
   //return success state
   return SUCCESS;
}
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	d2 c0       	rjmp	.+420    	; 0x286 <DIO_Init+0x1a8>
  e2:	84 2f       	mov	r24, r20
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e8 0f       	add	r30, r24
  ee:	f9 1f       	adc	r31, r25
  f0:	e0 5a       	subi	r30, 0xA0	; 160
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	20 81       	ld	r18, Z
  f6:	32 2f       	mov	r19, r18
  f8:	36 95       	lsr	r19
  fa:	36 95       	lsr	r19
  fc:	36 95       	lsr	r19
  fe:	27 70       	andi	r18, 0x07	; 7
 100:	34 30       	cpi	r19, 0x04	; 4
 102:	08 f0       	brcs	.+2      	; 0x106 <DIO_Init+0x28>
 104:	c5 c0       	rjmp	.+394    	; 0x290 <DIO_Init+0x1b2>
 106:	31 30       	cpi	r19, 0x01	; 1
 108:	b1 f1       	breq	.+108    	; 0x176 <DIO_Init+0x98>
 10a:	38 f0       	brcs	.+14     	; 0x11a <DIO_Init+0x3c>
 10c:	32 30       	cpi	r19, 0x02	; 2
 10e:	09 f4       	brne	.+2      	; 0x112 <DIO_Init+0x34>
 110:	60 c0       	rjmp	.+192    	; 0x1d2 <DIO_Init+0xf4>
 112:	33 30       	cpi	r19, 0x03	; 3
 114:	09 f4       	brne	.+2      	; 0x118 <DIO_Init+0x3a>
 116:	8a c0       	rjmp	.+276    	; 0x22c <DIO_Init+0x14e>
 118:	b5 c0       	rjmp	.+362    	; 0x284 <DIO_Init+0x1a6>
 11a:	6a b3       	in	r22, 0x1a	; 26
 11c:	e1 e0       	ldi	r30, 0x01	; 1
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	df 01       	movw	r26, r30
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_Init+0x4a>
 124:	aa 0f       	add	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_Init+0x46>
 12c:	9d 01       	movw	r18, r26
 12e:	5a 2f       	mov	r21, r26
 130:	50 95       	com	r21
 132:	65 23       	and	r22, r21
 134:	6a bb       	out	0x1a, r22	; 26
 136:	6b b3       	in	r22, 0x1b	; 27
 138:	56 23       	and	r21, r22
 13a:	5b bb       	out	0x1b, r21	; 27
 13c:	fc 01       	movw	r30, r24
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	e8 0f       	add	r30, r24
 144:	f9 1f       	adc	r31, r25
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	51 81       	ldd	r21, Z+1	; 0x01
 14c:	55 23       	and	r21, r21
 14e:	19 f0       	breq	.+6      	; 0x156 <DIO_Init+0x78>
 150:	5a b3       	in	r21, 0x1a	; 26
 152:	5a 2b       	or	r21, r26
 154:	5a bb       	out	0x1a, r21	; 26
 156:	fc 01       	movw	r30, r24
 158:	ee 0f       	add	r30, r30
 15a:	ff 1f       	adc	r31, r31
 15c:	8e 0f       	add	r24, r30
 15e:	9f 1f       	adc	r25, r31
 160:	fc 01       	movw	r30, r24
 162:	e0 5a       	subi	r30, 0xA0	; 160
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	82 81       	ldd	r24, Z+2	; 0x02
 168:	88 23       	and	r24, r24
 16a:	09 f4       	brne	.+2      	; 0x16e <DIO_Init+0x90>
 16c:	8b c0       	rjmp	.+278    	; 0x284 <DIO_Init+0x1a6>
 16e:	8b b3       	in	r24, 0x1b	; 27
 170:	28 2b       	or	r18, r24
 172:	2b bb       	out	0x1b, r18	; 27
 174:	87 c0       	rjmp	.+270    	; 0x284 <DIO_Init+0x1a6>
 176:	67 b3       	in	r22, 0x17	; 23
 178:	e1 e0       	ldi	r30, 0x01	; 1
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	df 01       	movw	r26, r30
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_Init+0xa6>
 180:	aa 0f       	add	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	2a 95       	dec	r18
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_Init+0xa2>
 188:	9d 01       	movw	r18, r26
 18a:	5a 2f       	mov	r21, r26
 18c:	50 95       	com	r21
 18e:	65 23       	and	r22, r21
 190:	67 bb       	out	0x17, r22	; 23
 192:	68 b3       	in	r22, 0x18	; 24
 194:	56 23       	and	r21, r22
 196:	58 bb       	out	0x18, r21	; 24
 198:	fc 01       	movw	r30, r24
 19a:	ee 0f       	add	r30, r30
 19c:	ff 1f       	adc	r31, r31
 19e:	e8 0f       	add	r30, r24
 1a0:	f9 1f       	adc	r31, r25
 1a2:	e0 5a       	subi	r30, 0xA0	; 160
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	51 81       	ldd	r21, Z+1	; 0x01
 1a8:	55 23       	and	r21, r21
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <DIO_Init+0xd4>
 1ac:	57 b3       	in	r21, 0x17	; 23
 1ae:	5a 2b       	or	r21, r26
 1b0:	57 bb       	out	0x17, r21	; 23
 1b2:	fc 01       	movw	r30, r24
 1b4:	ee 0f       	add	r30, r30
 1b6:	ff 1f       	adc	r31, r31
 1b8:	8e 0f       	add	r24, r30
 1ba:	9f 1f       	adc	r25, r31
 1bc:	fc 01       	movw	r30, r24
 1be:	e0 5a       	subi	r30, 0xA0	; 160
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	88 23       	and	r24, r24
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_Init+0xec>
 1c8:	5d c0       	rjmp	.+186    	; 0x284 <DIO_Init+0x1a6>
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	28 2b       	or	r18, r24
 1ce:	28 bb       	out	0x18, r18	; 24
 1d0:	59 c0       	rjmp	.+178    	; 0x284 <DIO_Init+0x1a6>
 1d2:	64 b3       	in	r22, 0x14	; 20
 1d4:	e1 e0       	ldi	r30, 0x01	; 1
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	df 01       	movw	r26, r30
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_Init+0x102>
 1dc:	aa 0f       	add	r26, r26
 1de:	bb 1f       	adc	r27, r27
 1e0:	2a 95       	dec	r18
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_Init+0xfe>
 1e4:	9d 01       	movw	r18, r26
 1e6:	5a 2f       	mov	r21, r26
 1e8:	50 95       	com	r21
 1ea:	65 23       	and	r22, r21
 1ec:	64 bb       	out	0x14, r22	; 20
 1ee:	65 b3       	in	r22, 0x15	; 21
 1f0:	56 23       	and	r21, r22
 1f2:	55 bb       	out	0x15, r21	; 21
 1f4:	fc 01       	movw	r30, r24
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e8 0f       	add	r30, r24
 1fc:	f9 1f       	adc	r31, r25
 1fe:	e0 5a       	subi	r30, 0xA0	; 160
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	51 81       	ldd	r21, Z+1	; 0x01
 204:	55 23       	and	r21, r21
 206:	19 f0       	breq	.+6      	; 0x20e <DIO_Init+0x130>
 208:	54 b3       	in	r21, 0x14	; 20
 20a:	5a 2b       	or	r21, r26
 20c:	54 bb       	out	0x14, r21	; 20
 20e:	fc 01       	movw	r30, r24
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	8e 0f       	add	r24, r30
 216:	9f 1f       	adc	r25, r31
 218:	fc 01       	movw	r30, r24
 21a:	e0 5a       	subi	r30, 0xA0	; 160
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	88 23       	and	r24, r24
 222:	81 f1       	breq	.+96     	; 0x284 <DIO_Init+0x1a6>
 224:	85 b3       	in	r24, 0x15	; 21
 226:	28 2b       	or	r18, r24
 228:	25 bb       	out	0x15, r18	; 21
 22a:	2c c0       	rjmp	.+88     	; 0x284 <DIO_Init+0x1a6>
 22c:	61 b3       	in	r22, 0x11	; 17
 22e:	e1 e0       	ldi	r30, 0x01	; 1
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	df 01       	movw	r26, r30
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_Init+0x15c>
 236:	aa 0f       	add	r26, r26
 238:	bb 1f       	adc	r27, r27
 23a:	2a 95       	dec	r18
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_Init+0x158>
 23e:	9d 01       	movw	r18, r26
 240:	5a 2f       	mov	r21, r26
 242:	50 95       	com	r21
 244:	65 23       	and	r22, r21
 246:	61 bb       	out	0x11, r22	; 17
 248:	62 b3       	in	r22, 0x12	; 18
 24a:	56 23       	and	r21, r22
 24c:	52 bb       	out	0x12, r21	; 18
 24e:	fc 01       	movw	r30, r24
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	e8 0f       	add	r30, r24
 256:	f9 1f       	adc	r31, r25
 258:	e0 5a       	subi	r30, 0xA0	; 160
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	51 81       	ldd	r21, Z+1	; 0x01
 25e:	55 23       	and	r21, r21
 260:	19 f0       	breq	.+6      	; 0x268 <DIO_Init+0x18a>
 262:	51 b3       	in	r21, 0x11	; 17
 264:	5a 2b       	or	r21, r26
 266:	51 bb       	out	0x11, r21	; 17
 268:	fc 01       	movw	r30, r24
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	8e 0f       	add	r24, r30
 270:	9f 1f       	adc	r25, r31
 272:	fc 01       	movw	r30, r24
 274:	e0 5a       	subi	r30, 0xA0	; 160
 276:	ff 4f       	sbci	r31, 0xFF	; 255
 278:	82 81       	ldd	r24, Z+2	; 0x02
 27a:	88 23       	and	r24, r24
 27c:	19 f0       	breq	.+6      	; 0x284 <DIO_Init+0x1a6>
 27e:	82 b3       	in	r24, 0x12	; 18
 280:	28 2b       	or	r18, r24
 282:	22 bb       	out	0x12, r18	; 18
 284:	4f 5f       	subi	r20, 0xFF	; 255
 286:	45 30       	cpi	r20, 0x05	; 5
 288:	08 f4       	brcc	.+2      	; 0x28c <DIO_Init+0x1ae>
 28a:	2b cf       	rjmp	.-426    	; 0xe2 <DIO_Init+0x4>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	08 95       	ret
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	08 95       	ret

00000294 <DIO_Write>:
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	fc 01       	movw	r30, r24
 298:	ee 0f       	add	r30, r30
 29a:	ff 1f       	adc	r31, r31
 29c:	e8 0f       	add	r30, r24
 29e:	f9 1f       	adc	r31, r25
 2a0:	e0 5a       	subi	r30, 0xA0	; 160
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	20 81       	ld	r18, Z
 2a6:	32 2f       	mov	r19, r18
 2a8:	36 95       	lsr	r19
 2aa:	36 95       	lsr	r19
 2ac:	36 95       	lsr	r19
 2ae:	27 70       	andi	r18, 0x07	; 7
 2b0:	34 30       	cpi	r19, 0x04	; 4
 2b2:	08 f0       	brcs	.+2      	; 0x2b6 <DIO_Write+0x22>
 2b4:	61 c0       	rjmp	.+194    	; 0x378 <DIO_Write+0xe4>
 2b6:	fc 01       	movw	r30, r24
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	8e 0f       	add	r24, r30
 2be:	9f 1f       	adc	r25, r31
 2c0:	fc 01       	movw	r30, r24
 2c2:	e0 5a       	subi	r30, 0xA0	; 160
 2c4:	ff 4f       	sbci	r31, 0xFF	; 255
 2c6:	81 81       	ldd	r24, Z+1	; 0x01
 2c8:	88 23       	and	r24, r24
 2ca:	09 f4       	brne	.+2      	; 0x2ce <DIO_Write+0x3a>
 2cc:	57 c0       	rjmp	.+174    	; 0x37c <DIO_Write+0xe8>
 2ce:	31 30       	cpi	r19, 0x01	; 1
 2d0:	d1 f0       	breq	.+52     	; 0x306 <DIO_Write+0x72>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <DIO_Write+0x4a>
 2d4:	32 30       	cpi	r19, 0x02	; 2
 2d6:	51 f1       	breq	.+84     	; 0x32c <DIO_Write+0x98>
 2d8:	33 30       	cpi	r19, 0x03	; 3
 2da:	d9 f1       	breq	.+118    	; 0x352 <DIO_Write+0xbe>
 2dc:	51 c0       	rjmp	.+162    	; 0x380 <DIO_Write+0xec>
 2de:	3b b3       	in	r19, 0x1b	; 27
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_Write+0x56>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	2a 95       	dec	r18
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_Write+0x52>
 2ee:	28 2f       	mov	r18, r24
 2f0:	20 95       	com	r18
 2f2:	23 23       	and	r18, r19
 2f4:	2b bb       	out	0x1b, r18	; 27
 2f6:	66 23       	and	r22, r22
 2f8:	09 f4       	brne	.+2      	; 0x2fc <DIO_Write+0x68>
 2fa:	44 c0       	rjmp	.+136    	; 0x384 <DIO_Write+0xf0>
 2fc:	9b b3       	in	r25, 0x1b	; 27
 2fe:	89 2b       	or	r24, r25
 300:	8b bb       	out	0x1b, r24	; 27
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	08 95       	ret
 306:	38 b3       	in	r19, 0x18	; 24
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_Write+0x7e>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	2a 95       	dec	r18
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_Write+0x7a>
 316:	28 2f       	mov	r18, r24
 318:	20 95       	com	r18
 31a:	23 23       	and	r18, r19
 31c:	28 bb       	out	0x18, r18	; 24
 31e:	66 23       	and	r22, r22
 320:	99 f1       	breq	.+102    	; 0x388 <DIO_Write+0xf4>
 322:	98 b3       	in	r25, 0x18	; 24
 324:	89 2b       	or	r24, r25
 326:	88 bb       	out	0x18, r24	; 24
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	08 95       	ret
 32c:	35 b3       	in	r19, 0x15	; 21
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_Write+0xa4>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	2a 95       	dec	r18
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_Write+0xa0>
 33c:	28 2f       	mov	r18, r24
 33e:	20 95       	com	r18
 340:	23 23       	and	r18, r19
 342:	25 bb       	out	0x15, r18	; 21
 344:	66 23       	and	r22, r22
 346:	11 f1       	breq	.+68     	; 0x38c <DIO_Write+0xf8>
 348:	95 b3       	in	r25, 0x15	; 21
 34a:	89 2b       	or	r24, r25
 34c:	85 bb       	out	0x15, r24	; 21
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	08 95       	ret
 352:	32 b3       	in	r19, 0x12	; 18
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_Write+0xca>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	2a 95       	dec	r18
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_Write+0xc6>
 362:	28 2f       	mov	r18, r24
 364:	20 95       	com	r18
 366:	23 23       	and	r18, r19
 368:	22 bb       	out	0x12, r18	; 18
 36a:	66 23       	and	r22, r22
 36c:	89 f0       	breq	.+34     	; 0x390 <DIO_Write+0xfc>
 36e:	92 b3       	in	r25, 0x12	; 18
 370:	89 2b       	or	r24, r25
 372:	82 bb       	out	0x12, r24	; 18
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	08 95       	ret
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	08 95       	ret
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	08 95       	ret
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	08 95       	ret
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	08 95       	ret
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	08 95       	ret

00000394 <DIO_Toggle>:
************************************************************************************/
enuErrorStatus_t DIO_Toggle(uint8_t u8GroupId)
{
   uint8_t u8port,u8pin;
   //calculate the port and pin number of the selected object
   u8port=astrDIOConfigParameters[u8GroupId].enuPinNo / DIO_PINS_NO;
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	e8 0f       	add	r30, r24
 39e:	f9 1f       	adc	r31, r25
 3a0:	e0 5a       	subi	r30, 0xA0	; 160
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	20 81       	ld	r18, Z
 3a6:	32 2f       	mov	r19, r18
 3a8:	36 95       	lsr	r19
 3aa:	36 95       	lsr	r19
 3ac:	36 95       	lsr	r19
   u8pin =astrDIOConfigParameters[u8GroupId].enuPinNo % DIO_PINS_NO;
 3ae:	27 70       	andi	r18, 0x07	; 7
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
 3b0:	34 30       	cpi	r19, 0x04	; 4
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <DIO_Toggle+0x22>
 3b4:	43 c0       	rjmp	.+134    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3b6:	fc 01       	movw	r30, r24
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	8e 0f       	add	r24, r30
 3be:	9f 1f       	adc	r25, r31
 3c0:	fc 01       	movw	r30, r24
 3c2:	e0 5a       	subi	r30, 0xA0	; 160
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	81 81       	ldd	r24, Z+1	; 0x01
 3c8:	88 23       	and	r24, r24
 3ca:	d1 f1       	breq	.+116    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
      return ERROR;
   }
   else
   {
      //select the calculated port
      switch(u8port)
 3cc:	31 30       	cpi	r19, 0x01	; 1
 3ce:	91 f0       	breq	.+36     	; 0x3f4 <DIO_Toggle+0x60>
 3d0:	28 f0       	brcs	.+10     	; 0x3dc <DIO_Toggle+0x48>
 3d2:	32 30       	cpi	r19, 0x02	; 2
 3d4:	d9 f0       	breq	.+54     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3d6:	33 30       	cpi	r19, 0x03	; 3
 3d8:	29 f1       	breq	.+74     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3da:	34 c0       	rjmp	.+104    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
      {
         case M_PORTA:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTA_R,u8pin);
 3dc:	3b b3       	in	r19, 0x1b	; 27
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_Toggle+0x54>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	2a 95       	dec	r18
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_Toggle+0x50>
 3ec:	83 27       	eor	r24, r19
 3ee:	8b bb       	out	0x1b, r24	; 27
         TOG_BIT(PORTD_R,u8pin);
         break;
      }
   }
   //return success status
   return SUCCESS;
 3f0:	81 e0       	ldi	r24, 0x01	; 1
      switch(u8port)
      {
         case M_PORTA:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTA_R,u8pin);
         break;
 3f2:	08 95       	ret

         case M_PORTB:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTB_R,u8pin);
 3f4:	38 b3       	in	r19, 0x18	; 24
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	2a 95       	dec	r18
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_Toggle+0x68>
 404:	83 27       	eor	r24, r19
 406:	88 bb       	out	0x18, r24	; 24
         TOG_BIT(PORTD_R,u8pin);
         break;
      }
   }
   //return success status
   return SUCCESS;
 408:	81 e0       	ldi	r24, 0x01	; 1
         break;

         case M_PORTB:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTB_R,u8pin);
         break;
 40a:	08 95       	ret

         case M_PORTC:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTC_R,u8pin);
 40c:	35 b3       	in	r19, 0x15	; 21
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	2a 95       	dec	r18
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	83 27       	eor	r24, r19
 41e:	85 bb       	out	0x15, r24	; 21
         TOG_BIT(PORTD_R,u8pin);
         break;
      }
   }
   //return success status
   return SUCCESS;
 420:	81 e0       	ldi	r24, 0x01	; 1
         break;

         case M_PORTC:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTC_R,u8pin);
         break;
 422:	08 95       	ret

         case M_PORTD:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTD_R,u8pin);
 424:	32 b3       	in	r19, 0x12	; 18
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	2a 95       	dec	r18
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	83 27       	eor	r24, r19
 436:	82 bb       	out	0x12, r24	; 18
         break;
      }
   }
   //return success status
   return SUCCESS;
 438:	81 e0       	ldi	r24, 0x01	; 1
         break;

         case M_PORTD:
         //toggle the current value of the pin in the PORTx Register
         TOG_BIT(PORTD_R,u8pin);
         break;
 43a:	08 95       	ret
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
   {
      //return error status
      return ERROR;
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	08 95       	ret
         TOG_BIT(PORTD_R,u8pin);
         break;
      }
   }
   //return success status
   return SUCCESS;
 444:	81 e0       	ldi	r24, 0x01	; 1
}
 446:	08 95       	ret

00000448 <SPI_Init>:

#if (SPI_CONFIG == MASTER)

enuErrorStatus_t SPI_Init(void)
{
   DIO_Init();
 448:	0e 94 6f 00 	call	0xde	; 0xde <DIO_Init>
   
   //enable SPI Master Operation
   SET_BIT(SPCR_R,MSTR_B);
 44c:	8d b1       	in	r24, 0x0d	; 13
 44e:	80 61       	ori	r24, 0x10	; 16
 450:	8d b9       	out	0x0d, r24	; 13
   //Enable SPI 
   SET_BIT(SPCR_R,SPE_B);
 452:	8d b1       	in	r24, 0x0d	; 13
 454:	80 64       	ori	r24, 0x40	; 64
 456:	8d b9       	out	0x0d, r24	; 13
   return SUCCESS;
}
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret

0000045c <SPI_SendData>:

enuErrorStatus_t SPI_SendData(uint8_t u8Data)
{
 45c:	cf 93       	push	r28
 45e:	c8 2f       	mov	r28, r24
   
   DIO_Write(SPI_SS0,LOW);
 460:	60 e0       	ldi	r22, 0x00	; 0
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_Write>
   SPDR_R=u8Data;
 468:	cf b9       	out	0x0f, r28	; 15
   while (!GET_BIT(SPSR_R,SPIF_B));
 46a:	77 9b       	sbis	0x0e, 7	; 14
 46c:	fe cf       	rjmp	.-4      	; 0x46a <SPI_SendData+0xe>
   
   DIO_Write(SPI_SS0,HIGH);
 46e:	61 e0       	ldi	r22, 0x01	; 1
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_Write>
   return SUCCESS;
}
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <T0_Init>:
         return SUCCESS;
         
      }
      // if all failed, return an error state
   return ERROR;
}
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	69 f0       	breq	.+26     	; 0x49a <T0_Init+0x1e>
 480:	28 f0       	brcs	.+10     	; 0x48c <T0_Init+0x10>
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	89 f0       	breq	.+34     	; 0x4a8 <T0_Init+0x2c>
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	b1 f0       	breq	.+44     	; 0x4b6 <T0_Init+0x3a>
 48a:	5c c0       	rjmp	.+184    	; 0x544 <T0_Init+0xc8>
 48c:	83 b7       	in	r24, 0x33	; 51
 48e:	8f 7b       	andi	r24, 0xBF	; 191
 490:	83 bf       	out	0x33, r24	; 51
 492:	83 b7       	in	r24, 0x33	; 51
 494:	87 7f       	andi	r24, 0xF7	; 247
 496:	83 bf       	out	0x33, r24	; 51
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <T0_Init+0x46>
 49a:	83 b7       	in	r24, 0x33	; 51
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	83 bf       	out	0x33, r24	; 51
 4a0:	83 b7       	in	r24, 0x33	; 51
 4a2:	87 7f       	andi	r24, 0xF7	; 247
 4a4:	83 bf       	out	0x33, r24	; 51
 4a6:	0d c0       	rjmp	.+26     	; 0x4c2 <T0_Init+0x46>
 4a8:	83 b7       	in	r24, 0x33	; 51
 4aa:	8f 7b       	andi	r24, 0xBF	; 191
 4ac:	83 bf       	out	0x33, r24	; 51
 4ae:	83 b7       	in	r24, 0x33	; 51
 4b0:	88 60       	ori	r24, 0x08	; 8
 4b2:	83 bf       	out	0x33, r24	; 51
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <T0_Init+0x46>
 4b6:	83 b7       	in	r24, 0x33	; 51
 4b8:	80 64       	ori	r24, 0x40	; 64
 4ba:	83 bf       	out	0x33, r24	; 51
 4bc:	83 b7       	in	r24, 0x33	; 51
 4be:	88 60       	ori	r24, 0x08	; 8
 4c0:	83 bf       	out	0x33, r24	; 51
 4c2:	83 b7       	in	r24, 0x33	; 51
 4c4:	88 7f       	andi	r24, 0xF8	; 248
 4c6:	83 bf       	out	0x33, r24	; 51
 4c8:	83 b7       	in	r24, 0x33	; 51
 4ca:	86 2b       	or	r24, r22
 4cc:	83 bf       	out	0x33, r24	; 51
 4ce:	62 30       	cpi	r22, 0x02	; 2
 4d0:	c9 f0       	breq	.+50     	; 0x504 <T0_Init+0x88>
 4d2:	28 f4       	brcc	.+10     	; 0x4de <T0_Init+0x62>
 4d4:	66 23       	and	r22, r22
 4d6:	49 f0       	breq	.+18     	; 0x4ea <T0_Init+0x6e>
 4d8:	61 30       	cpi	r22, 0x01	; 1
 4da:	69 f0       	breq	.+26     	; 0x4f6 <T0_Init+0x7a>
 4dc:	35 c0       	rjmp	.+106    	; 0x548 <T0_Init+0xcc>
 4de:	64 30       	cpi	r22, 0x04	; 4
 4e0:	09 f1       	breq	.+66     	; 0x524 <T0_Init+0xa8>
 4e2:	c0 f0       	brcs	.+48     	; 0x514 <T0_Init+0x98>
 4e4:	65 30       	cpi	r22, 0x05	; 5
 4e6:	31 f1       	breq	.+76     	; 0x534 <T0_Init+0xb8>
 4e8:	2f c0       	rjmp	.+94     	; 0x548 <T0_Init+0xcc>
 4ea:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Gu16_T0Prescaler+0x1>
 4ee:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Gu16_T0Prescaler>
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	08 95       	ret
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Gu16_T0Prescaler+0x1>
 4fe:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Gu16_T0Prescaler>
 502:	08 95       	ret
 504:	88 e0       	ldi	r24, 0x08	; 8
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Gu16_T0Prescaler+0x1>
 50c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Gu16_T0Prescaler>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 95       	ret
 514:	80 e4       	ldi	r24, 0x40	; 64
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Gu16_T0Prescaler+0x1>
 51c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Gu16_T0Prescaler>
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	08 95       	ret
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Gu16_T0Prescaler+0x1>
 52c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Gu16_T0Prescaler>
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	08 95       	ret
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	94 e0       	ldi	r25, 0x04	; 4
 538:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Gu16_T0Prescaler+0x1>
 53c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Gu16_T0Prescaler>
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	08 95       	ret
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	08 95       	ret

0000054c <T0_OV_InterruptEnable>:
 54c:	89 b7       	in	r24, 0x39	; 57
 54e:	81 60       	ori	r24, 0x01	; 1
 550:	89 bf       	out	0x39, r24	; 57
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	08 95       	ret

00000556 <T0_Start>:
 556:	2f 92       	push	r2
 558:	3f 92       	push	r3
 55a:	4f 92       	push	r4
 55c:	5f 92       	push	r5
 55e:	6f 92       	push	r6
 560:	7f 92       	push	r7
 562:	8f 92       	push	r8
 564:	9f 92       	push	r9
 566:	af 92       	push	r10
 568:	bf 92       	push	r11
 56a:	cf 92       	push	r12
 56c:	df 92       	push	r13
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	2f 97       	sbiw	r28, 0x0f	; 15
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	a2 2e       	mov	r10, r18
 58c:	b3 2e       	mov	r11, r19
 58e:	c4 2e       	mov	r12, r20
 590:	d5 2e       	mov	r13, r21
 592:	e6 2e       	mov	r14, r22
 594:	f7 2e       	mov	r15, r23
 596:	e8 2f       	mov	r30, r24
 598:	f9 2f       	mov	r31, r25
 59a:	09 b6       	in	r0, 0x39	; 57
 59c:	00 fc       	sbrc	r0, 0
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <T0_Start+0x50>
 5a0:	09 b6       	in	r0, 0x39	; 57
 5a2:	01 fe       	sbrs	r0, 1
 5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <T0_Start+0x60>
 5a6:	01 15       	cp	r16, r1
 5a8:	11 05       	cpc	r17, r1
 5aa:	09 f4       	brne	.+2      	; 0x5ae <T0_Start+0x58>
 5ac:	d4 c0       	rjmp	.+424    	; 0x756 <T0_Start+0x200>
 5ae:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <G_fptr+0x1>
 5b2:	00 93 84 00 	sts	0x0084, r16	; 0x800084 <G_fptr>
 5b6:	2a 2d       	mov	r18, r10
 5b8:	3b 2d       	mov	r19, r11
 5ba:	4c 2d       	mov	r20, r12
 5bc:	5d 2d       	mov	r21, r13
 5be:	6e 2d       	mov	r22, r14
 5c0:	7f 2d       	mov	r23, r15
 5c2:	8e 2f       	mov	r24, r30
 5c4:	9f 2f       	mov	r25, r31
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__cmpdi2_s8>
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <T0_Start+0x7a>
 5ce:	c5 c0       	rjmp	.+394    	; 0x75a <T0_Start+0x204>
 5d0:	21 15       	cp	r18, r1
 5d2:	a1 e0       	ldi	r26, 0x01	; 1
 5d4:	3a 07       	cpc	r19, r26
 5d6:	41 05       	cpc	r20, r1
 5d8:	51 05       	cpc	r21, r1
 5da:	61 05       	cpc	r22, r1
 5dc:	71 05       	cpc	r23, r1
 5de:	81 05       	cpc	r24, r1
 5e0:	91 05       	cpc	r25, r1
 5e2:	79 f1       	breq	.+94     	; 0x642 <T0_Start+0xec>
 5e4:	70 f1       	brcs	.+92     	; 0x642 <T0_Start+0xec>
 5e6:	21 50       	subi	r18, 0x01	; 1
 5e8:	31 40       	sbci	r19, 0x01	; 1
 5ea:	41 09       	sbc	r20, r1
 5ec:	51 09       	sbc	r21, r1
 5ee:	61 09       	sbc	r22, r1
 5f0:	71 09       	sbc	r23, r1
 5f2:	81 09       	sbc	r24, r1
 5f4:	91 09       	sbc	r25, r1
 5f6:	2f 3f       	cpi	r18, 0xFF	; 255
 5f8:	36 40       	sbci	r19, 0x06	; 6
 5fa:	41 05       	cpc	r20, r1
 5fc:	51 05       	cpc	r21, r1
 5fe:	61 05       	cpc	r22, r1
 600:	71 05       	cpc	r23, r1
 602:	81 05       	cpc	r24, r1
 604:	91 05       	cpc	r25, r1
 606:	f9 f0       	breq	.+62     	; 0x646 <T0_Start+0xf0>
 608:	f0 f0       	brcs	.+60     	; 0x646 <T0_Start+0xf0>
 60a:	2a 2d       	mov	r18, r10
 60c:	3b 2d       	mov	r19, r11
 60e:	4c 2d       	mov	r20, r12
 610:	5d 2d       	mov	r21, r13
 612:	6e 2d       	mov	r22, r14
 614:	7f 2d       	mov	r23, r15
 616:	8e 2f       	mov	r24, r30
 618:	9f 2f       	mov	r25, r31
 61a:	21 50       	subi	r18, 0x01	; 1
 61c:	38 40       	sbci	r19, 0x08	; 8
 61e:	41 09       	sbc	r20, r1
 620:	51 09       	sbc	r21, r1
 622:	61 09       	sbc	r22, r1
 624:	71 09       	sbc	r23, r1
 626:	81 09       	sbc	r24, r1
 628:	91 09       	sbc	r25, r1
 62a:	2f 3f       	cpi	r18, 0xFF	; 255
 62c:	37 41       	sbci	r19, 0x17	; 23
 62e:	41 05       	cpc	r20, r1
 630:	51 05       	cpc	r21, r1
 632:	61 05       	cpc	r22, r1
 634:	71 05       	cpc	r23, r1
 636:	81 05       	cpc	r24, r1
 638:	91 05       	cpc	r25, r1
 63a:	09 f0       	breq	.+2      	; 0x63e <T0_Start+0xe8>
 63c:	30 f4       	brcc	.+12     	; 0x64a <T0_Start+0xf4>
 63e:	64 e0       	ldi	r22, 0x04	; 4
 640:	05 c0       	rjmp	.+10     	; 0x64c <T0_Start+0xf6>
 642:	62 e0       	ldi	r22, 0x02	; 2
 644:	03 c0       	rjmp	.+6      	; 0x64c <T0_Start+0xf6>
 646:	63 e0       	ldi	r22, 0x03	; 3
 648:	01 c0       	rjmp	.+2      	; 0x64c <T0_Start+0xf6>
 64a:	65 e0       	ldi	r22, 0x05	; 5
 64c:	1f 2f       	mov	r17, r31
 64e:	0e 2f       	mov	r16, r30
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	0e 94 3e 02 	call	0x47c	; 0x47c <T0_Init>
 656:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Gu16_T0Prescaler>
 65a:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Gu16_T0Prescaler+0x1>
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	72 e1       	ldi	r23, 0x12	; 18
 666:	8a e7       	ldi	r24, 0x7A	; 122
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 b2 04 	call	0x964	; 0x964 <__udivmodsi4>
 66e:	19 01       	movw	r2, r18
 670:	2a 01       	movw	r4, r20
 672:	61 2c       	mov	r6, r1
 674:	71 2c       	mov	r7, r1
 676:	43 01       	movw	r8, r6
 678:	2f 83       	std	Y+7, r18	; 0x07
 67a:	38 86       	std	Y+8, r3	; 0x08
 67c:	49 86       	std	Y+9, r4	; 0x09
 67e:	5a 86       	std	Y+10, r5	; 0x0a
 680:	6b 86       	std	Y+11, r6	; 0x0b
 682:	7c 86       	std	Y+12, r7	; 0x0c
 684:	8d 86       	std	Y+13, r8	; 0x0d
 686:	9e 86       	std	Y+14, r9	; 0x0e
 688:	33 2d       	mov	r19, r3
 68a:	44 2d       	mov	r20, r4
 68c:	55 2d       	mov	r21, r5
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__muldi3>
 69a:	22 2e       	mov	r2, r18
 69c:	33 2e       	mov	r3, r19
 69e:	49 83       	std	Y+1, r20	; 0x01
 6a0:	5a 83       	std	Y+2, r21	; 0x02
 6a2:	6b 83       	std	Y+3, r22	; 0x03
 6a4:	7c 83       	std	Y+4, r23	; 0x04
 6a6:	8d 83       	std	Y+5, r24	; 0x05
 6a8:	9e 83       	std	Y+6, r25	; 0x06
 6aa:	a1 2c       	mov	r10, r1
 6ac:	68 94       	set
 6ae:	bb 24       	eor	r11, r11
 6b0:	b6 f8       	bld	r11, 6
 6b2:	0f 2e       	mov	r0, r31
 6b4:	f2 e4       	ldi	r31, 0x42	; 66
 6b6:	cf 2e       	mov	r12, r31
 6b8:	f0 2d       	mov	r31, r0
 6ba:	0f 2e       	mov	r0, r31
 6bc:	ff e0       	ldi	r31, 0x0F	; 15
 6be:	df 2e       	mov	r13, r31
 6c0:	f0 2d       	mov	r31, r0
 6c2:	e1 2c       	mov	r14, r1
 6c4:	f1 2c       	mov	r15, r1
 6c6:	00 e0       	ldi	r16, 0x00	; 0
 6c8:	10 e0       	ldi	r17, 0x00	; 0
 6ca:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__udivdi3>
 6ce:	2f 87       	std	Y+15, r18	; 0x0f
 6d0:	3f 83       	std	Y+7, r19	; 0x07
 6d2:	44 2e       	mov	r4, r20
 6d4:	55 2e       	mov	r5, r21
 6d6:	66 2e       	mov	r6, r22
 6d8:	77 2e       	mov	r7, r23
 6da:	88 2e       	mov	r8, r24
 6dc:	99 2e       	mov	r9, r25
 6de:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <Gu32_T0MaxOVCount>
 6e2:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <Gu32_T0MaxOVCount+0x1>
 6e6:	40 92 7e 00 	sts	0x007E, r4	; 0x80007e <Gu32_T0MaxOVCount+0x2>
 6ea:	50 92 7f 00 	sts	0x007F, r5	; 0x80007f <Gu32_T0MaxOVCount+0x3>
 6ee:	60 92 80 00 	sts	0x0080, r6	; 0x800080 <Gu32_T0MaxOVCount+0x4>
 6f2:	70 92 81 00 	sts	0x0081, r7	; 0x800081 <Gu32_T0MaxOVCount+0x5>
 6f6:	80 92 82 00 	sts	0x0082, r8	; 0x800082 <Gu32_T0MaxOVCount+0x6>
 6fa:	90 92 83 00 	sts	0x0083, r9	; 0x800083 <Gu32_T0MaxOVCount+0x7>
 6fe:	68 94       	set
 700:	aa 24       	eor	r10, r10
 702:	a6 f8       	bld	r10, 6
 704:	0f 2e       	mov	r0, r31
 706:	f2 e4       	ldi	r31, 0x42	; 66
 708:	bf 2e       	mov	r11, r31
 70a:	f0 2d       	mov	r31, r0
 70c:	0f 2e       	mov	r0, r31
 70e:	ff e0       	ldi	r31, 0x0F	; 15
 710:	cf 2e       	mov	r12, r31
 712:	f0 2d       	mov	r31, r0
 714:	d1 2c       	mov	r13, r1
 716:	22 2d       	mov	r18, r2
 718:	33 2d       	mov	r19, r3
 71a:	49 81       	ldd	r20, Y+1	; 0x01
 71c:	5a 81       	ldd	r21, Y+2	; 0x02
 71e:	6b 81       	ldd	r22, Y+3	; 0x03
 720:	7c 81       	ldd	r23, Y+4	; 0x04
 722:	8d 81       	ldd	r24, Y+5	; 0x05
 724:	9e 81       	ldd	r25, Y+6	; 0x06
 726:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__udivdi3>
 72a:	e2 2f       	mov	r30, r18
 72c:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <Gu32_T0LastOVTicks>
 730:	2f 85       	ldd	r18, Y+15	; 0x0f
 732:	3f 81       	ldd	r19, Y+7	; 0x07
 734:	44 2d       	mov	r20, r4
 736:	55 2d       	mov	r21, r5
 738:	66 2d       	mov	r22, r6
 73a:	77 2d       	mov	r23, r7
 73c:	88 2d       	mov	r24, r8
 73e:	99 2d       	mov	r25, r9
 740:	a0 e0       	ldi	r26, 0x00	; 0
 742:	0e 94 a1 05 	call	0xb42	; 0xb42 <__cmpdi2_s8>
 746:	21 f4       	brne	.+8      	; 0x750 <T0_Start+0x1fa>
 748:	e1 95       	neg	r30
 74a:	e2 bf       	out	0x32, r30	; 50
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	06 c0       	rjmp	.+12     	; 0x75c <T0_Start+0x206>
 750:	12 be       	out	0x32, r1	; 50
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	03 c0       	rjmp	.+6      	; 0x75c <T0_Start+0x206>
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	01 c0       	rjmp	.+2      	; 0x75c <T0_Start+0x206>
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	2f 96       	adiw	r28, 0x0f	; 15
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	de bf       	out	0x3e, r29	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	cd bf       	out	0x3d, r28	; 61
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	df 90       	pop	r13
 776:	cf 90       	pop	r12
 778:	bf 90       	pop	r11
 77a:	af 90       	pop	r10
 77c:	9f 90       	pop	r9
 77e:	8f 90       	pop	r8
 780:	7f 90       	pop	r7
 782:	6f 90       	pop	r6
 784:	5f 90       	pop	r5
 786:	4f 90       	pop	r4
 788:	3f 90       	pop	r3
 78a:	2f 90       	pop	r2
 78c:	08 95       	ret

0000078e <__vector_11>:

/******************** ISR FUNCTIONS ****************************************/

//ISR function to run in case  of a timer overflow interrupt
ISR(TIMER0_OVF_vect)
{
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	2f 92       	push	r2
 79a:	3f 92       	push	r3
 79c:	4f 92       	push	r4
 79e:	5f 92       	push	r5
 7a0:	6f 92       	push	r6
 7a2:	7f 92       	push	r7
 7a4:	8f 92       	push	r8
 7a6:	9f 92       	push	r9
 7a8:	af 92       	push	r10
 7aa:	bf 92       	push	r11
 7ac:	cf 92       	push	r12
 7ae:	df 92       	push	r13
 7b0:	ef 92       	push	r14
 7b2:	ff 92       	push	r15
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	2f 93       	push	r18
 7ba:	3f 93       	push	r19
 7bc:	4f 93       	push	r20
 7be:	5f 93       	push	r21
 7c0:	6f 93       	push	r22
 7c2:	7f 93       	push	r23
 7c4:	8f 93       	push	r24
 7c6:	9f 93       	push	r25
 7c8:	af 93       	push	r26
 7ca:	bf 93       	push	r27
 7cc:	ef 93       	push	r30
 7ce:	ff 93       	push	r31
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <__vector_11+0x48>
 7d6:	00 d0       	rcall	.+0      	; 0x7d8 <__vector_11+0x4a>
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
   //if the current overflow value is less than the total overflows value
   if (Gu32_T0CurrentOVCount < Gu32_T0MaxOVCount)
 7dc:	80 90 74 00 	lds	r8, 0x0074	; 0x800074 <Gu32_T0CurrentOVCount>
 7e0:	90 90 75 00 	lds	r9, 0x0075	; 0x800075 <Gu32_T0CurrentOVCount+0x1>
 7e4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Gu32_T0CurrentOVCount+0x2>
 7e8:	8c 83       	std	Y+4, r24	; 0x04
 7ea:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Gu32_T0CurrentOVCount+0x3>
 7ee:	8b 83       	std	Y+3, r24	; 0x03
 7f0:	b0 91 78 00 	lds	r27, 0x0078	; 0x800078 <Gu32_T0CurrentOVCount+0x4>
 7f4:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <Gu32_T0CurrentOVCount+0x5>
 7f8:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <Gu32_T0CurrentOVCount+0x6>
 7fc:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <Gu32_T0CurrentOVCount+0x7>
 800:	20 90 7c 00 	lds	r2, 0x007C	; 0x80007c <Gu32_T0MaxOVCount>
 804:	30 90 7d 00 	lds	r3, 0x007D	; 0x80007d <Gu32_T0MaxOVCount+0x1>
 808:	40 90 7e 00 	lds	r4, 0x007E	; 0x80007e <Gu32_T0MaxOVCount+0x2>
 80c:	50 90 7f 00 	lds	r5, 0x007F	; 0x80007f <Gu32_T0MaxOVCount+0x3>
 810:	60 90 80 00 	lds	r6, 0x0080	; 0x800080 <Gu32_T0MaxOVCount+0x4>
 814:	70 90 81 00 	lds	r7, 0x0081	; 0x800081 <Gu32_T0MaxOVCount+0x5>
 818:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <Gu32_T0MaxOVCount+0x6>
 81c:	89 83       	std	Y+1, r24	; 0x01
 81e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Gu32_T0MaxOVCount+0x7>
 822:	8a 83       	std	Y+2, r24	; 0x02
 824:	28 2d       	mov	r18, r8
 826:	39 2d       	mov	r19, r9
 828:	4c 81       	ldd	r20, Y+4	; 0x04
 82a:	5b 81       	ldd	r21, Y+3	; 0x03
 82c:	6b 2f       	mov	r22, r27
 82e:	7a 2f       	mov	r23, r26
 830:	8f 2f       	mov	r24, r31
 832:	9e 2f       	mov	r25, r30
 834:	a2 2c       	mov	r10, r2
 836:	b3 2c       	mov	r11, r3
 838:	c4 2c       	mov	r12, r4
 83a:	d5 2c       	mov	r13, r5
 83c:	e6 2c       	mov	r14, r6
 83e:	f7 2c       	mov	r15, r7
 840:	09 81       	ldd	r16, Y+1	; 0x01
 842:	1a 81       	ldd	r17, Y+2	; 0x02
 844:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpdi2>
 848:	a0 f4       	brcc	.+40     	; 0x872 <__stack+0x13>
   {
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
 84a:	a1 e0       	ldi	r26, 0x01	; 1
 84c:	0e 94 8c 05 	call	0xb18	; 0xb18 <__adddi3_s8>
 850:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <Gu32_T0CurrentOVCount>
 854:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <Gu32_T0CurrentOVCount+0x1>
 858:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <Gu32_T0CurrentOVCount+0x2>
 85c:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <Gu32_T0CurrentOVCount+0x3>
 860:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <Gu32_T0CurrentOVCount+0x4>
 864:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <Gu32_T0CurrentOVCount+0x5>
 868:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Gu32_T0CurrentOVCount+0x6>
 86c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <Gu32_T0CurrentOVCount+0x7>
 870:	52 c0       	rjmp	.+164    	; 0x916 <__stack+0xb7>
   }
   //if the current overflow value equals the calculated total overflows value
   else if (Gu32_T0CurrentOVCount == Gu32_T0MaxOVCount)
 872:	28 2d       	mov	r18, r8
 874:	39 2d       	mov	r19, r9
 876:	4c 81       	ldd	r20, Y+4	; 0x04
 878:	5b 81       	ldd	r21, Y+3	; 0x03
 87a:	6b 2f       	mov	r22, r27
 87c:	7a 2f       	mov	r23, r26
 87e:	8f 2f       	mov	r24, r31
 880:	9e 2f       	mov	r25, r30
 882:	a2 2c       	mov	r10, r2
 884:	b3 2c       	mov	r11, r3
 886:	c4 2c       	mov	r12, r4
 888:	d5 2c       	mov	r13, r5
 88a:	e6 2c       	mov	r14, r6
 88c:	f7 2c       	mov	r15, r7
 88e:	09 81       	ldd	r16, Y+1	; 0x01
 890:	1a 81       	ldd	r17, Y+2	; 0x02
 892:	0e 94 98 05 	call	0xb30	; 0xb30 <__cmpdi2>
 896:	41 f5       	brne	.+80     	; 0x8e8 <__stack+0x89>
   {
      //set the timer value to the remaining timing
      TCNT0_R=((T0_TICKS-1)-Gu32_T0LastOVTicks);
 898:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Gu32_T0LastOVTicks>
 89c:	80 95       	com	r24
 89e:	82 bf       	out	0x32, r24	; 50
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
 8a0:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <Gu32_T0CurrentOVCount>
 8a4:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <Gu32_T0CurrentOVCount+0x1>
 8a8:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <Gu32_T0CurrentOVCount+0x2>
 8ac:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <Gu32_T0CurrentOVCount+0x3>
 8b0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <Gu32_T0CurrentOVCount+0x4>
 8b4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <Gu32_T0CurrentOVCount+0x5>
 8b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <Gu32_T0CurrentOVCount+0x6>
 8bc:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <Gu32_T0CurrentOVCount+0x7>
 8c0:	a1 e0       	ldi	r26, 0x01	; 1
 8c2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__adddi3_s8>
 8c6:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <Gu32_T0CurrentOVCount>
 8ca:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <Gu32_T0CurrentOVCount+0x1>
 8ce:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <Gu32_T0CurrentOVCount+0x2>
 8d2:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <Gu32_T0CurrentOVCount+0x3>
 8d6:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <Gu32_T0CurrentOVCount+0x4>
 8da:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <Gu32_T0CurrentOVCount+0x5>
 8de:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <Gu32_T0CurrentOVCount+0x6>
 8e2:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <Gu32_T0CurrentOVCount+0x7>
 8e6:	17 c0       	rjmp	.+46     	; 0x916 <__stack+0xb7>
   }
   //if the time is up
   else
   {
      //reset the overflow counter
      Gu32_T0CurrentOVCount=0;
 8e8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Gu32_T0CurrentOVCount>
 8ec:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Gu32_T0CurrentOVCount+0x1>
 8f0:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Gu32_T0CurrentOVCount+0x2>
 8f4:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Gu32_T0CurrentOVCount+0x3>
 8f8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Gu32_T0CurrentOVCount+0x4>
 8fc:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Gu32_T0CurrentOVCount+0x5>
 900:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Gu32_T0CurrentOVCount+0x6>
 904:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <Gu32_T0CurrentOVCount+0x7>
      //check if the global pointer to function holds a valid function address
      if (G_fptr != NULLPTR)
 908:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <G_fptr>
 90c:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <G_fptr+0x1>
 910:	30 97       	sbiw	r30, 0x00	; 0
 912:	09 f0       	breq	.+2      	; 0x916 <__stack+0xb7>
      {
         //call the function
         G_fptr();
 914:	09 95       	icall
      }
   }      
}
 916:	0f 90       	pop	r0
 918:	0f 90       	pop	r0
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	ff 91       	pop	r31
 924:	ef 91       	pop	r30
 926:	bf 91       	pop	r27
 928:	af 91       	pop	r26
 92a:	9f 91       	pop	r25
 92c:	8f 91       	pop	r24
 92e:	7f 91       	pop	r23
 930:	6f 91       	pop	r22
 932:	5f 91       	pop	r21
 934:	4f 91       	pop	r20
 936:	3f 91       	pop	r19
 938:	2f 91       	pop	r18
 93a:	1f 91       	pop	r17
 93c:	0f 91       	pop	r16
 93e:	ff 90       	pop	r15
 940:	ef 90       	pop	r14
 942:	df 90       	pop	r13
 944:	cf 90       	pop	r12
 946:	bf 90       	pop	r11
 948:	af 90       	pop	r10
 94a:	9f 90       	pop	r9
 94c:	8f 90       	pop	r8
 94e:	7f 90       	pop	r7
 950:	6f 90       	pop	r6
 952:	5f 90       	pop	r5
 954:	4f 90       	pop	r4
 956:	3f 90       	pop	r3
 958:	2f 90       	pop	r2
 95a:	0f 90       	pop	r0
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	0f 90       	pop	r0
 960:	1f 90       	pop	r1
 962:	18 95       	reti

00000964 <__udivmodsi4>:
 964:	a1 e2       	ldi	r26, 0x21	; 33
 966:	1a 2e       	mov	r1, r26
 968:	aa 1b       	sub	r26, r26
 96a:	bb 1b       	sub	r27, r27
 96c:	fd 01       	movw	r30, r26
 96e:	0d c0       	rjmp	.+26     	; 0x98a <__udivmodsi4_ep>

00000970 <__udivmodsi4_loop>:
 970:	aa 1f       	adc	r26, r26
 972:	bb 1f       	adc	r27, r27
 974:	ee 1f       	adc	r30, r30
 976:	ff 1f       	adc	r31, r31
 978:	a2 17       	cp	r26, r18
 97a:	b3 07       	cpc	r27, r19
 97c:	e4 07       	cpc	r30, r20
 97e:	f5 07       	cpc	r31, r21
 980:	20 f0       	brcs	.+8      	; 0x98a <__udivmodsi4_ep>
 982:	a2 1b       	sub	r26, r18
 984:	b3 0b       	sbc	r27, r19
 986:	e4 0b       	sbc	r30, r20
 988:	f5 0b       	sbc	r31, r21

0000098a <__udivmodsi4_ep>:
 98a:	66 1f       	adc	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	99 1f       	adc	r25, r25
 992:	1a 94       	dec	r1
 994:	69 f7       	brne	.-38     	; 0x970 <__udivmodsi4_loop>
 996:	60 95       	com	r22
 998:	70 95       	com	r23
 99a:	80 95       	com	r24
 99c:	90 95       	com	r25
 99e:	9b 01       	movw	r18, r22
 9a0:	ac 01       	movw	r20, r24
 9a2:	bd 01       	movw	r22, r26
 9a4:	cf 01       	movw	r24, r30
 9a6:	08 95       	ret

000009a8 <__muldi3>:
 9a8:	df 93       	push	r29
 9aa:	cf 93       	push	r28
 9ac:	1f 93       	push	r17
 9ae:	0f 93       	push	r16
 9b0:	9a 9d       	mul	r25, r10
 9b2:	f0 2d       	mov	r31, r0
 9b4:	21 9f       	mul	r18, r17
 9b6:	f0 0d       	add	r31, r0
 9b8:	8b 9d       	mul	r24, r11
 9ba:	f0 0d       	add	r31, r0
 9bc:	8a 9d       	mul	r24, r10
 9be:	e0 2d       	mov	r30, r0
 9c0:	f1 0d       	add	r31, r1
 9c2:	03 9f       	mul	r16, r19
 9c4:	f0 0d       	add	r31, r0
 9c6:	02 9f       	mul	r16, r18
 9c8:	e0 0d       	add	r30, r0
 9ca:	f1 1d       	adc	r31, r1
 9cc:	4e 9d       	mul	r20, r14
 9ce:	e0 0d       	add	r30, r0
 9d0:	f1 1d       	adc	r31, r1
 9d2:	5e 9d       	mul	r21, r14
 9d4:	f0 0d       	add	r31, r0
 9d6:	4f 9d       	mul	r20, r15
 9d8:	f0 0d       	add	r31, r0
 9da:	7f 93       	push	r23
 9dc:	6f 93       	push	r22
 9de:	bf 92       	push	r11
 9e0:	af 92       	push	r10
 9e2:	5f 93       	push	r21
 9e4:	4f 93       	push	r20
 9e6:	d5 01       	movw	r26, r10
 9e8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__umulhisi3>
 9ec:	8b 01       	movw	r16, r22
 9ee:	ac 01       	movw	r20, r24
 9f0:	d7 01       	movw	r26, r14
 9f2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__umulhisi3>
 9f6:	eb 01       	movw	r28, r22
 9f8:	e8 0f       	add	r30, r24
 9fa:	f9 1f       	adc	r31, r25
 9fc:	d6 01       	movw	r26, r12
 9fe:	0e 94 24 05 	call	0xa48	; 0xa48 <__muldi3_6>
 a02:	2f 91       	pop	r18
 a04:	3f 91       	pop	r19
 a06:	d6 01       	movw	r26, r12
 a08:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__umulhisi3>
 a0c:	c6 0f       	add	r28, r22
 a0e:	d7 1f       	adc	r29, r23
 a10:	e8 1f       	adc	r30, r24
 a12:	f9 1f       	adc	r31, r25
 a14:	af 91       	pop	r26
 a16:	bf 91       	pop	r27
 a18:	0e 94 24 05 	call	0xa48	; 0xa48 <__muldi3_6>
 a1c:	2f 91       	pop	r18
 a1e:	3f 91       	pop	r19
 a20:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__umulhisi3>
 a24:	c6 0f       	add	r28, r22
 a26:	d7 1f       	adc	r29, r23
 a28:	e8 1f       	adc	r30, r24
 a2a:	f9 1f       	adc	r31, r25
 a2c:	d6 01       	movw	r26, r12
 a2e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__umulhisi3>
 a32:	e6 0f       	add	r30, r22
 a34:	f7 1f       	adc	r31, r23
 a36:	98 01       	movw	r18, r16
 a38:	be 01       	movw	r22, r28
 a3a:	cf 01       	movw	r24, r30
 a3c:	11 24       	eor	r1, r1
 a3e:	0f 91       	pop	r16
 a40:	1f 91       	pop	r17
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	08 95       	ret

00000a48 <__muldi3_6>:
 a48:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__umulhisi3>
 a4c:	46 0f       	add	r20, r22
 a4e:	57 1f       	adc	r21, r23
 a50:	c8 1f       	adc	r28, r24
 a52:	d9 1f       	adc	r29, r25
 a54:	08 f4       	brcc	.+2      	; 0xa58 <__muldi3_6+0x10>
 a56:	31 96       	adiw	r30, 0x01	; 1
 a58:	08 95       	ret

00000a5a <__umoddi3>:
 a5a:	68 94       	set
 a5c:	01 c0       	rjmp	.+2      	; 0xa60 <__udivdi3_umoddi3>

00000a5e <__udivdi3>:
 a5e:	e8 94       	clt

00000a60 <__udivdi3_umoddi3>:
 a60:	8f 92       	push	r8
 a62:	9f 92       	push	r9
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	0e 94 3b 05 	call	0xa76	; 0xa76 <__udivmod64>
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	9f 90       	pop	r9
 a72:	8f 90       	pop	r8
 a74:	08 95       	ret

00000a76 <__udivmod64>:
 a76:	88 24       	eor	r8, r8
 a78:	99 24       	eor	r9, r9
 a7a:	f4 01       	movw	r30, r8
 a7c:	e4 01       	movw	r28, r8
 a7e:	b0 e4       	ldi	r27, 0x40	; 64
 a80:	9f 93       	push	r25
 a82:	aa 27       	eor	r26, r26
 a84:	9a 15       	cp	r25, r10
 a86:	8b 04       	cpc	r8, r11
 a88:	9c 04       	cpc	r9, r12
 a8a:	ed 05       	cpc	r30, r13
 a8c:	fe 05       	cpc	r31, r14
 a8e:	cf 05       	cpc	r28, r15
 a90:	d0 07       	cpc	r29, r16
 a92:	a1 07       	cpc	r26, r17
 a94:	98 f4       	brcc	.+38     	; 0xabc <__udivmod64+0x46>
 a96:	ad 2f       	mov	r26, r29
 a98:	dc 2f       	mov	r29, r28
 a9a:	cf 2f       	mov	r28, r31
 a9c:	fe 2f       	mov	r31, r30
 a9e:	e9 2d       	mov	r30, r9
 aa0:	98 2c       	mov	r9, r8
 aa2:	89 2e       	mov	r8, r25
 aa4:	98 2f       	mov	r25, r24
 aa6:	87 2f       	mov	r24, r23
 aa8:	76 2f       	mov	r23, r22
 aaa:	65 2f       	mov	r22, r21
 aac:	54 2f       	mov	r21, r20
 aae:	43 2f       	mov	r20, r19
 ab0:	32 2f       	mov	r19, r18
 ab2:	22 27       	eor	r18, r18
 ab4:	b8 50       	subi	r27, 0x08	; 8
 ab6:	31 f7       	brne	.-52     	; 0xa84 <__udivmod64+0xe>
 ab8:	bf 91       	pop	r27
 aba:	27 c0       	rjmp	.+78     	; 0xb0a <__udivmod64+0x94>
 abc:	1b 2e       	mov	r1, r27
 abe:	bf 91       	pop	r27
 ac0:	bb 27       	eor	r27, r27
 ac2:	22 0f       	add	r18, r18
 ac4:	33 1f       	adc	r19, r19
 ac6:	44 1f       	adc	r20, r20
 ac8:	55 1f       	adc	r21, r21
 aca:	66 1f       	adc	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	88 1c       	adc	r8, r8
 ad4:	99 1c       	adc	r9, r9
 ad6:	ee 1f       	adc	r30, r30
 ad8:	ff 1f       	adc	r31, r31
 ada:	cc 1f       	adc	r28, r28
 adc:	dd 1f       	adc	r29, r29
 ade:	aa 1f       	adc	r26, r26
 ae0:	bb 1f       	adc	r27, r27
 ae2:	8a 14       	cp	r8, r10
 ae4:	9b 04       	cpc	r9, r11
 ae6:	ec 05       	cpc	r30, r12
 ae8:	fd 05       	cpc	r31, r13
 aea:	ce 05       	cpc	r28, r14
 aec:	df 05       	cpc	r29, r15
 aee:	a0 07       	cpc	r26, r16
 af0:	b1 07       	cpc	r27, r17
 af2:	48 f0       	brcs	.+18     	; 0xb06 <__udivmod64+0x90>
 af4:	8a 18       	sub	r8, r10
 af6:	9b 08       	sbc	r9, r11
 af8:	ec 09       	sbc	r30, r12
 afa:	fd 09       	sbc	r31, r13
 afc:	ce 09       	sbc	r28, r14
 afe:	df 09       	sbc	r29, r15
 b00:	a0 0b       	sbc	r26, r16
 b02:	b1 0b       	sbc	r27, r17
 b04:	21 60       	ori	r18, 0x01	; 1
 b06:	1a 94       	dec	r1
 b08:	e1 f6       	brne	.-72     	; 0xac2 <__udivmod64+0x4c>
 b0a:	2e f4       	brtc	.+10     	; 0xb16 <__udivmod64+0xa0>
 b0c:	94 01       	movw	r18, r8
 b0e:	af 01       	movw	r20, r30
 b10:	be 01       	movw	r22, r28
 b12:	cd 01       	movw	r24, r26
 b14:	00 0c       	add	r0, r0
 b16:	08 95       	ret

00000b18 <__adddi3_s8>:
 b18:	00 24       	eor	r0, r0
 b1a:	a7 fd       	sbrc	r26, 7
 b1c:	00 94       	com	r0
 b1e:	2a 0f       	add	r18, r26
 b20:	30 1d       	adc	r19, r0
 b22:	40 1d       	adc	r20, r0
 b24:	50 1d       	adc	r21, r0
 b26:	60 1d       	adc	r22, r0
 b28:	70 1d       	adc	r23, r0
 b2a:	80 1d       	adc	r24, r0
 b2c:	90 1d       	adc	r25, r0
 b2e:	08 95       	ret

00000b30 <__cmpdi2>:
 b30:	2a 15       	cp	r18, r10
 b32:	3b 05       	cpc	r19, r11
 b34:	4c 05       	cpc	r20, r12
 b36:	5d 05       	cpc	r21, r13
 b38:	6e 05       	cpc	r22, r14
 b3a:	7f 05       	cpc	r23, r15
 b3c:	80 07       	cpc	r24, r16
 b3e:	91 07       	cpc	r25, r17
 b40:	08 95       	ret

00000b42 <__cmpdi2_s8>:
 b42:	00 24       	eor	r0, r0
 b44:	a7 fd       	sbrc	r26, 7
 b46:	00 94       	com	r0
 b48:	2a 17       	cp	r18, r26
 b4a:	30 05       	cpc	r19, r0
 b4c:	40 05       	cpc	r20, r0
 b4e:	50 05       	cpc	r21, r0
 b50:	60 05       	cpc	r22, r0
 b52:	70 05       	cpc	r23, r0
 b54:	80 05       	cpc	r24, r0
 b56:	90 05       	cpc	r25, r0
 b58:	08 95       	ret

00000b5a <__umulhisi3>:
 b5a:	a2 9f       	mul	r26, r18
 b5c:	b0 01       	movw	r22, r0
 b5e:	b3 9f       	mul	r27, r19
 b60:	c0 01       	movw	r24, r0
 b62:	a3 9f       	mul	r26, r19
 b64:	70 0d       	add	r23, r0
 b66:	81 1d       	adc	r24, r1
 b68:	11 24       	eor	r1, r1
 b6a:	91 1d       	adc	r25, r1
 b6c:	b2 9f       	mul	r27, r18
 b6e:	70 0d       	add	r23, r0
 b70:	81 1d       	adc	r24, r1
 b72:	11 24       	eor	r1, r1
 b74:	91 1d       	adc	r25, r1
 b76:	08 95       	ret

00000b78 <_exit>:
 b78:	f8 94       	cli

00000b7a <__stop_program>:
 b7a:	ff cf       	rjmp	.-2      	; 0xb7a <__stop_program>
