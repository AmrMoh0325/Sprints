
SPI_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000b0c  00000ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800070  00800070  00000bb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000149a  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a28  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d87  00000000  00000000  00002c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  000039f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7d  00000000  00000000  00003e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e70  00000000  00000000  000048d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005741  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_11>
  30:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 84 05 	jmp	0xb08	; 0xb08 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Simple_App>:


void Simple_App(void)
{
   static uint8_t Data=0;
   SPI_SendData(Data++);
  92:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	98 0f       	add	r25, r24
  9a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <__data_end>
  9e:	0e 94 cd 01 	call	0x39a	; 0x39a <SPI_SendData>
  a2:	08 95       	ret

000000a4 <main>:
}

int main(void)
{
    SPI_Init();
  a4:	0e 94 c3 01 	call	0x386	; 0x386 <SPI_Init>
    T0_Init(TIMER0_NORMAL_MODE,TIMER0_SCALER_8);
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 06 02 	call	0x40c	; 0x40c <T0_Init>
    T0_OV_InterruptEnable();
  b0:	0e 94 6e 02 	call	0x4dc	; 0x4dc <T0_OV_InterruptEnable>
    sei();
  b4:	78 94       	sei
    T0_Start(1000000,Simple_App);
  b6:	09 e4       	ldi	r16, 0x49	; 73
  b8:	10 e0       	ldi	r17, 0x00	; 0
  ba:	20 e4       	ldi	r18, 0x40	; 64
  bc:	32 e4       	ldi	r19, 0x42	; 66
  be:	4f e0       	ldi	r20, 0x0F	; 15
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 73 02 	call	0x4e6	; 0x4e6 <T0_Start>
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x2a>

000000d0 <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	d2 c0       	rjmp	.+420    	; 0x278 <DIO_Init+0x1a8>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
  d4:	84 2f       	mov	r24, r20
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	ee 0f       	add	r30, r30
  dc:	ff 1f       	adc	r31, r31
  de:	e8 0f       	add	r30, r24
  e0:	f9 1f       	adc	r31, r25
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	20 81       	ld	r18, Z
  e8:	32 2f       	mov	r19, r18
  ea:	36 95       	lsr	r19
  ec:	36 95       	lsr	r19
  ee:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
  f0:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
  f2:	34 30       	cpi	r19, 0x04	; 4
  f4:	08 f0       	brcs	.+2      	; 0xf8 <DIO_Init+0x28>
  f6:	c5 c0       	rjmp	.+394    	; 0x282 <DIO_Init+0x1b2>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
  f8:	31 30       	cpi	r19, 0x01	; 1
  fa:	b1 f1       	breq	.+108    	; 0x168 <DIO_Init+0x98>
  fc:	38 f0       	brcs	.+14     	; 0x10c <DIO_Init+0x3c>
  fe:	32 30       	cpi	r19, 0x02	; 2
 100:	09 f4       	brne	.+2      	; 0x104 <DIO_Init+0x34>
 102:	60 c0       	rjmp	.+192    	; 0x1c4 <DIO_Init+0xf4>
 104:	33 30       	cpi	r19, 0x03	; 3
 106:	09 f4       	brne	.+2      	; 0x10a <DIO_Init+0x3a>
 108:	8a c0       	rjmp	.+276    	; 0x21e <DIO_Init+0x14e>
 10a:	b5 c0       	rjmp	.+362    	; 0x276 <DIO_Init+0x1a6>
      {
         case M_PORTA:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRA_R,u8pin);
 10c:	6a b3       	in	r22, 0x1a	; 26
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	df 01       	movw	r26, r30
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_Init+0x4a>
 116:	aa 0f       	add	r26, r26
 118:	bb 1f       	adc	r27, r27
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_Init+0x46>
 11e:	9d 01       	movw	r18, r26
 120:	5a 2f       	mov	r21, r26
 122:	50 95       	com	r21
 124:	65 23       	and	r22, r21
 126:	6a bb       	out	0x1a, r22	; 26
         CLR_BIT(PORTA_R,u8pin);
 128:	6b b3       	in	r22, 0x1b	; 27
 12a:	56 23       	and	r21, r22
 12c:	5b bb       	out	0x1b, r21	; 27
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 0f       	add	r30, r24
 136:	f9 1f       	adc	r31, r25
 138:	e0 5a       	subi	r30, 0xA0	; 160
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	51 81       	ldd	r21, Z+1	; 0x01
 13e:	55 23       	and	r21, r21
 140:	19 f0       	breq	.+6      	; 0x148 <DIO_Init+0x78>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRA_R,u8pin);
 142:	5a b3       	in	r21, 0x1a	; 26
 144:	5a 2b       	or	r21, r26
 146:	5a bb       	out	0x1a, r21	; 26
         }

         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 148:	fc 01       	movw	r30, r24
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	8e 0f       	add	r24, r30
 150:	9f 1f       	adc	r25, r31
 152:	fc 01       	movw	r30, r24
 154:	e0 5a       	subi	r30, 0xA0	; 160
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	82 81       	ldd	r24, Z+2	; 0x02
 15a:	88 23       	and	r24, r24
 15c:	09 f4       	brne	.+2      	; 0x160 <DIO_Init+0x90>
 15e:	8b c0       	rjmp	.+278    	; 0x276 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTA_R,u8pin);
 160:	8b b3       	in	r24, 0x1b	; 27
 162:	28 2b       	or	r18, r24
 164:	2b bb       	out	0x1b, r18	; 27
 166:	87 c0       	rjmp	.+270    	; 0x276 <DIO_Init+0x1a6>
         }
         break;

         case M_PORTB:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRB_R,u8pin);
 168:	67 b3       	in	r22, 0x17	; 23
 16a:	e1 e0       	ldi	r30, 0x01	; 1
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	df 01       	movw	r26, r30
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Init+0xa6>
 172:	aa 0f       	add	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	2a 95       	dec	r18
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Init+0xa2>
 17a:	9d 01       	movw	r18, r26
 17c:	5a 2f       	mov	r21, r26
 17e:	50 95       	com	r21
 180:	65 23       	and	r22, r21
 182:	67 bb       	out	0x17, r22	; 23
         CLR_BIT(PORTB_R,u8pin);
 184:	68 b3       	in	r22, 0x18	; 24
 186:	56 23       	and	r21, r22
 188:	58 bb       	out	0x18, r21	; 24
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 18a:	fc 01       	movw	r30, r24
 18c:	ee 0f       	add	r30, r30
 18e:	ff 1f       	adc	r31, r31
 190:	e8 0f       	add	r30, r24
 192:	f9 1f       	adc	r31, r25
 194:	e0 5a       	subi	r30, 0xA0	; 160
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	51 81       	ldd	r21, Z+1	; 0x01
 19a:	55 23       	and	r21, r21
 19c:	19 f0       	breq	.+6      	; 0x1a4 <DIO_Init+0xd4>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRB_R,u8pin);
 19e:	57 b3       	in	r21, 0x17	; 23
 1a0:	5a 2b       	or	r21, r26
 1a2:	57 bb       	out	0x17, r21	; 23
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 1a4:	fc 01       	movw	r30, r24
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	8e 0f       	add	r24, r30
 1ac:	9f 1f       	adc	r25, r31
 1ae:	fc 01       	movw	r30, r24
 1b0:	e0 5a       	subi	r30, 0xA0	; 160
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	82 81       	ldd	r24, Z+2	; 0x02
 1b6:	88 23       	and	r24, r24
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_Init+0xec>
 1ba:	5d c0       	rjmp	.+186    	; 0x276 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTB_R,u8pin);
 1bc:	88 b3       	in	r24, 0x18	; 24
 1be:	28 2b       	or	r18, r24
 1c0:	28 bb       	out	0x18, r18	; 24
 1c2:	59 c0       	rjmp	.+178    	; 0x276 <DIO_Init+0x1a6>
         }
         break;

         case M_PORTC:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRC_R,u8pin);
 1c4:	64 b3       	in	r22, 0x14	; 20
 1c6:	e1 e0       	ldi	r30, 0x01	; 1
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	df 01       	movw	r26, r30
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_Init+0x102>
 1ce:	aa 0f       	add	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	2a 95       	dec	r18
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_Init+0xfe>
 1d6:	9d 01       	movw	r18, r26
 1d8:	5a 2f       	mov	r21, r26
 1da:	50 95       	com	r21
 1dc:	65 23       	and	r22, r21
 1de:	64 bb       	out	0x14, r22	; 20
         CLR_BIT(PORTC_R,u8pin);
 1e0:	65 b3       	in	r22, 0x15	; 21
 1e2:	56 23       	and	r21, r22
 1e4:	55 bb       	out	0x15, r21	; 21
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 1e6:	fc 01       	movw	r30, r24
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	e8 0f       	add	r30, r24
 1ee:	f9 1f       	adc	r31, r25
 1f0:	e0 5a       	subi	r30, 0xA0	; 160
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	51 81       	ldd	r21, Z+1	; 0x01
 1f6:	55 23       	and	r21, r21
 1f8:	19 f0       	breq	.+6      	; 0x200 <DIO_Init+0x130>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRC_R,u8pin);
 1fa:	54 b3       	in	r21, 0x14	; 20
 1fc:	5a 2b       	or	r21, r26
 1fe:	54 bb       	out	0x14, r21	; 20
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 200:	fc 01       	movw	r30, r24
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	8e 0f       	add	r24, r30
 208:	9f 1f       	adc	r25, r31
 20a:	fc 01       	movw	r30, r24
 20c:	e0 5a       	subi	r30, 0xA0	; 160
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	88 23       	and	r24, r24
 214:	81 f1       	breq	.+96     	; 0x276 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTC_R,u8pin);
 216:	85 b3       	in	r24, 0x15	; 21
 218:	28 2b       	or	r18, r24
 21a:	25 bb       	out	0x15, r18	; 21
 21c:	2c c0       	rjmp	.+88     	; 0x276 <DIO_Init+0x1a6>
         }
         break;

         case M_PORTD:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRD_R,u8pin);
 21e:	61 b3       	in	r22, 0x11	; 17
 220:	e1 e0       	ldi	r30, 0x01	; 1
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	df 01       	movw	r26, r30
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_Init+0x15c>
 228:	aa 0f       	add	r26, r26
 22a:	bb 1f       	adc	r27, r27
 22c:	2a 95       	dec	r18
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_Init+0x158>
 230:	9d 01       	movw	r18, r26
 232:	5a 2f       	mov	r21, r26
 234:	50 95       	com	r21
 236:	65 23       	and	r22, r21
 238:	61 bb       	out	0x11, r22	; 17
         CLR_BIT(PORTD_R,u8pin);
 23a:	62 b3       	in	r22, 0x12	; 18
 23c:	56 23       	and	r21, r22
 23e:	52 bb       	out	0x12, r21	; 18
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 240:	fc 01       	movw	r30, r24
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	e8 0f       	add	r30, r24
 248:	f9 1f       	adc	r31, r25
 24a:	e0 5a       	subi	r30, 0xA0	; 160
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	51 81       	ldd	r21, Z+1	; 0x01
 250:	55 23       	and	r21, r21
 252:	19 f0       	breq	.+6      	; 0x25a <DIO_Init+0x18a>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRD_R,u8pin);
 254:	51 b3       	in	r21, 0x11	; 17
 256:	5a 2b       	or	r21, r26
 258:	51 bb       	out	0x11, r21	; 17
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 25a:	fc 01       	movw	r30, r24
 25c:	ee 0f       	add	r30, r30
 25e:	ff 1f       	adc	r31, r31
 260:	8e 0f       	add	r24, r30
 262:	9f 1f       	adc	r25, r31
 264:	fc 01       	movw	r30, r24
 266:	e0 5a       	subi	r30, 0xA0	; 160
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	88 23       	and	r24, r24
 26e:	19 f0       	breq	.+6      	; 0x276 <DIO_Init+0x1a6>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTD_R,u8pin);
 270:	82 b3       	in	r24, 0x12	; 18
 272:	28 2b       	or	r18, r24
 274:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 276:	4f 5f       	subi	r20, 0xFF	; 255
 278:	45 30       	cpi	r20, 0x05	; 5
 27a:	08 f4       	brcc	.+2      	; 0x27e <DIO_Init+0x1ae>
 27c:	2b cf       	rjmp	.-426    	; 0xd4 <DIO_Init+0x4>
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 282:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
   }
   //return success status
   return SUCCESS;
}
 284:	08 95       	ret

00000286 <DIO_Write>:
************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8Data)
{
   uint8_t u8port,u8pin;
   //calculate the port and pin number of the selected object
   u8port=astrDIOConfigParameters[u8GroupId].enuPinNo / DIO_PINS_NO;
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	e8 0f       	add	r30, r24
 290:	f9 1f       	adc	r31, r25
 292:	e0 5a       	subi	r30, 0xA0	; 160
 294:	ff 4f       	sbci	r31, 0xFF	; 255
 296:	20 81       	ld	r18, Z
 298:	32 2f       	mov	r19, r18
 29a:	36 95       	lsr	r19
 29c:	36 95       	lsr	r19
 29e:	36 95       	lsr	r19
   u8pin =astrDIOConfigParameters[u8GroupId].enuPinNo % DIO_PINS_NO;
 2a0:	27 70       	andi	r18, 0x07	; 7
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
 2a2:	34 30       	cpi	r19, 0x04	; 4
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <DIO_Write+0x22>
 2a6:	61 c0       	rjmp	.+194    	; 0x36a <DIO_Write+0xe4>
 2a8:	fc 01       	movw	r30, r24
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	8e 0f       	add	r24, r30
 2b0:	9f 1f       	adc	r25, r31
 2b2:	fc 01       	movw	r30, r24
 2b4:	e0 5a       	subi	r30, 0xA0	; 160
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	88 23       	and	r24, r24
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <DIO_Write+0x3a>
 2be:	57 c0       	rjmp	.+174    	; 0x36e <DIO_Write+0xe8>
   }
   
   else
   {
      //select the calculated port
      switch(u8port)
 2c0:	31 30       	cpi	r19, 0x01	; 1
 2c2:	d1 f0       	breq	.+52     	; 0x2f8 <DIO_Write+0x72>
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_Write+0x4a>
 2c6:	32 30       	cpi	r19, 0x02	; 2
 2c8:	51 f1       	breq	.+84     	; 0x31e <DIO_Write+0x98>
 2ca:	33 30       	cpi	r19, 0x03	; 3
 2cc:	d9 f1       	breq	.+118    	; 0x344 <DIO_Write+0xbe>
 2ce:	51 c0       	rjmp	.+162    	; 0x372 <DIO_Write+0xec>
      {
         case M_PORTA:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTA_R,u8pin);
 2d0:	3b b3       	in	r19, 0x1b	; 27
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_Write+0x56>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	2a 95       	dec	r18
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_Write+0x52>
 2e0:	28 2f       	mov	r18, r24
 2e2:	20 95       	com	r18
 2e4:	23 23       	and	r18, r19
 2e6:	2b bb       	out	0x1b, r18	; 27
         //if we want to apply 5V to the pin
         if (u8Data)
 2e8:	66 23       	and	r22, r22
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_Write+0x68>
 2ec:	44 c0       	rjmp	.+136    	; 0x376 <DIO_Write+0xf0>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTA_R,u8pin);
 2ee:	9b b3       	in	r25, 0x1b	; 27
 2f0:	89 2b       	or	r24, r25
 2f2:	8b bb       	out	0x1b, r24	; 27
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	08 95       	ret
         }
         break;

         case M_PORTB:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTB_R,u8pin);
 2f8:	38 b3       	in	r19, 0x18	; 24
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_Write+0x7e>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	2a 95       	dec	r18
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_Write+0x7a>
 308:	28 2f       	mov	r18, r24
 30a:	20 95       	com	r18
 30c:	23 23       	and	r18, r19
 30e:	28 bb       	out	0x18, r18	; 24
         //if we want to apply 5V to the pin
         if (u8Data)
 310:	66 23       	and	r22, r22
 312:	99 f1       	breq	.+102    	; 0x37a <DIO_Write+0xf4>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTB_R,u8pin);
 314:	98 b3       	in	r25, 0x18	; 24
 316:	89 2b       	or	r24, r25
 318:	88 bb       	out	0x18, r24	; 24
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	08 95       	ret
         }
         break;

         case M_PORTC:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTC_R,u8pin);
 31e:	35 b3       	in	r19, 0x15	; 21
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_Write+0xa4>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	2a 95       	dec	r18
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_Write+0xa0>
 32e:	28 2f       	mov	r18, r24
 330:	20 95       	com	r18
 332:	23 23       	and	r18, r19
 334:	25 bb       	out	0x15, r18	; 21
         //if we want to apply 5V to the pin
         if (u8Data)
 336:	66 23       	and	r22, r22
 338:	11 f1       	breq	.+68     	; 0x37e <DIO_Write+0xf8>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTC_R,u8pin);
 33a:	95 b3       	in	r25, 0x15	; 21
 33c:	89 2b       	or	r24, r25
 33e:	85 bb       	out	0x15, r24	; 21
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	08 95       	ret
         }
         break;

         case M_PORTD:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTD_R,u8pin);
 344:	32 b3       	in	r19, 0x12	; 18
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_Write+0xca>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	2a 95       	dec	r18
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_Write+0xc6>
 354:	28 2f       	mov	r18, r24
 356:	20 95       	com	r18
 358:	23 23       	and	r18, r19
 35a:	22 bb       	out	0x12, r18	; 18
         //if we want to apply 5V to the pin
         if (u8Data)
 35c:	66 23       	and	r22, r22
 35e:	89 f0       	breq	.+34     	; 0x382 <DIO_Write+0xfc>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTD_R,u8pin);
 360:	92 b3       	in	r25, 0x12	; 18
 362:	89 2b       	or	r24, r25
 364:	82 bb       	out	0x12, r24	; 18
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
   {
      //return error status
      return ERROR;
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	08 95       	ret
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 95       	ret
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	08 95       	ret
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	08 95       	ret
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	08 95       	ret
 382:	81 e0       	ldi	r24, 0x01	; 1
}
 384:	08 95       	ret

00000386 <SPI_Init>:
      return ERROR;
   }
   //setup callback
   SPI_Callback=local_fptr;
   return SUCCESS;
}
 386:	0e 94 68 00 	call	0xd0	; 0xd0 <DIO_Init>
 38a:	8d b1       	in	r24, 0x0d	; 13
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	8d b9       	out	0x0d, r24	; 13
 390:	8d b1       	in	r24, 0x0d	; 13
 392:	80 64       	ori	r24, 0x40	; 64
 394:	8d b9       	out	0x0d, r24	; 13
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	08 95       	ret

0000039a <SPI_SendData>:
 39a:	cf 93       	push	r28
 39c:	c8 2f       	mov	r28, r24
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 43 01 	call	0x286	; 0x286 <DIO_Write>
 3a6:	cf b9       	out	0x0f, r28	; 15
 3a8:	77 9b       	sbis	0x0e, 7	; 14
 3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <SPI_SendData+0xe>
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 43 01 	call	0x286	; 0x286 <DIO_Write>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <__vector_12>:
* Parameters (out): void
* Return value: void
* Description: SPI serial transfer complete interrupt service routine 
************************************************************************************/
ISR(SPI_STC_vect)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
   if (SPI_Callback != NULLPTR)
 3dc:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <SPI_Callback>
 3e0:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <SPI_Callback+0x1>
 3e4:	30 97       	sbiw	r30, 0x00	; 0
 3e6:	09 f0       	breq	.+2      	; 0x3ea <__vector_12+0x30>
   {
      SPI_Callback();
 3e8:	09 95       	icall
   }
 3ea:	ff 91       	pop	r31
 3ec:	ef 91       	pop	r30
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <T0_Init>:
         return SUCCESS;
         
      }
      // if all failed, return an error state
   return ERROR;
}
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	69 f0       	breq	.+26     	; 0x42a <T0_Init+0x1e>
 410:	28 f0       	brcs	.+10     	; 0x41c <T0_Init+0x10>
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	89 f0       	breq	.+34     	; 0x438 <T0_Init+0x2c>
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	b1 f0       	breq	.+44     	; 0x446 <T0_Init+0x3a>
 41a:	5c c0       	rjmp	.+184    	; 0x4d4 <T0_Init+0xc8>
 41c:	83 b7       	in	r24, 0x33	; 51
 41e:	8f 7b       	andi	r24, 0xBF	; 191
 420:	83 bf       	out	0x33, r24	; 51
 422:	83 b7       	in	r24, 0x33	; 51
 424:	87 7f       	andi	r24, 0xF7	; 247
 426:	83 bf       	out	0x33, r24	; 51
 428:	14 c0       	rjmp	.+40     	; 0x452 <T0_Init+0x46>
 42a:	83 b7       	in	r24, 0x33	; 51
 42c:	80 64       	ori	r24, 0x40	; 64
 42e:	83 bf       	out	0x33, r24	; 51
 430:	83 b7       	in	r24, 0x33	; 51
 432:	87 7f       	andi	r24, 0xF7	; 247
 434:	83 bf       	out	0x33, r24	; 51
 436:	0d c0       	rjmp	.+26     	; 0x452 <T0_Init+0x46>
 438:	83 b7       	in	r24, 0x33	; 51
 43a:	8f 7b       	andi	r24, 0xBF	; 191
 43c:	83 bf       	out	0x33, r24	; 51
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	88 60       	ori	r24, 0x08	; 8
 442:	83 bf       	out	0x33, r24	; 51
 444:	06 c0       	rjmp	.+12     	; 0x452 <T0_Init+0x46>
 446:	83 b7       	in	r24, 0x33	; 51
 448:	80 64       	ori	r24, 0x40	; 64
 44a:	83 bf       	out	0x33, r24	; 51
 44c:	83 b7       	in	r24, 0x33	; 51
 44e:	88 60       	ori	r24, 0x08	; 8
 450:	83 bf       	out	0x33, r24	; 51
 452:	83 b7       	in	r24, 0x33	; 51
 454:	88 7f       	andi	r24, 0xF8	; 248
 456:	83 bf       	out	0x33, r24	; 51
 458:	83 b7       	in	r24, 0x33	; 51
 45a:	86 2b       	or	r24, r22
 45c:	83 bf       	out	0x33, r24	; 51
 45e:	62 30       	cpi	r22, 0x02	; 2
 460:	c9 f0       	breq	.+50     	; 0x494 <T0_Init+0x88>
 462:	28 f4       	brcc	.+10     	; 0x46e <T0_Init+0x62>
 464:	66 23       	and	r22, r22
 466:	49 f0       	breq	.+18     	; 0x47a <T0_Init+0x6e>
 468:	61 30       	cpi	r22, 0x01	; 1
 46a:	69 f0       	breq	.+26     	; 0x486 <T0_Init+0x7a>
 46c:	35 c0       	rjmp	.+106    	; 0x4d8 <T0_Init+0xcc>
 46e:	64 30       	cpi	r22, 0x04	; 4
 470:	09 f1       	breq	.+66     	; 0x4b4 <T0_Init+0xa8>
 472:	c0 f0       	brcs	.+48     	; 0x4a4 <T0_Init+0x98>
 474:	65 30       	cpi	r22, 0x05	; 5
 476:	31 f1       	breq	.+76     	; 0x4c4 <T0_Init+0xb8>
 478:	2f c0       	rjmp	.+94     	; 0x4d8 <T0_Init+0xcc>
 47a:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Gu16_T0Prescaler+0x1>
 47e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Gu16_T0Prescaler>
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	08 95       	ret
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Gu16_T0Prescaler+0x1>
 48e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Gu16_T0Prescaler>
 492:	08 95       	ret
 494:	88 e0       	ldi	r24, 0x08	; 8
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Gu16_T0Prescaler+0x1>
 49c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Gu16_T0Prescaler>
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
 4a4:	80 e4       	ldi	r24, 0x40	; 64
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Gu16_T0Prescaler+0x1>
 4ac:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Gu16_T0Prescaler>
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	08 95       	ret
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Gu16_T0Prescaler+0x1>
 4bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Gu16_T0Prescaler>
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	08 95       	ret
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	94 e0       	ldi	r25, 0x04	; 4
 4c8:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Gu16_T0Prescaler+0x1>
 4cc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Gu16_T0Prescaler>
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	08 95       	ret
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	08 95       	ret

000004dc <T0_OV_InterruptEnable>:
 4dc:	89 b7       	in	r24, 0x39	; 57
 4de:	81 60       	ori	r24, 0x01	; 1
 4e0:	89 bf       	out	0x39, r24	; 57
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret

000004e6 <T0_Start>:
 4e6:	2f 92       	push	r2
 4e8:	3f 92       	push	r3
 4ea:	4f 92       	push	r4
 4ec:	5f 92       	push	r5
 4ee:	6f 92       	push	r6
 4f0:	7f 92       	push	r7
 4f2:	8f 92       	push	r8
 4f4:	9f 92       	push	r9
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	2f 97       	sbiw	r28, 0x0f	; 15
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	a2 2e       	mov	r10, r18
 51c:	b3 2e       	mov	r11, r19
 51e:	c4 2e       	mov	r12, r20
 520:	d5 2e       	mov	r13, r21
 522:	e6 2e       	mov	r14, r22
 524:	f7 2e       	mov	r15, r23
 526:	e8 2f       	mov	r30, r24
 528:	f9 2f       	mov	r31, r25
 52a:	09 b6       	in	r0, 0x39	; 57
 52c:	00 fc       	sbrc	r0, 0
 52e:	03 c0       	rjmp	.+6      	; 0x536 <T0_Start+0x50>
 530:	09 b6       	in	r0, 0x39	; 57
 532:	01 fe       	sbrs	r0, 1
 534:	08 c0       	rjmp	.+16     	; 0x546 <T0_Start+0x60>
 536:	01 15       	cp	r16, r1
 538:	11 05       	cpc	r17, r1
 53a:	09 f4       	brne	.+2      	; 0x53e <T0_Start+0x58>
 53c:	d4 c0       	rjmp	.+424    	; 0x6e6 <T0_Start+0x200>
 53e:	10 93 87 00 	sts	0x0087, r17	; 0x800087 <G_fptr+0x1>
 542:	00 93 86 00 	sts	0x0086, r16	; 0x800086 <G_fptr>
 546:	2a 2d       	mov	r18, r10
 548:	3b 2d       	mov	r19, r11
 54a:	4c 2d       	mov	r20, r12
 54c:	5d 2d       	mov	r21, r13
 54e:	6e 2d       	mov	r22, r14
 550:	7f 2d       	mov	r23, r15
 552:	8e 2f       	mov	r24, r30
 554:	9f 2f       	mov	r25, r31
 556:	a0 e0       	ldi	r26, 0x00	; 0
 558:	0e 94 69 05 	call	0xad2	; 0xad2 <__cmpdi2_s8>
 55c:	09 f4       	brne	.+2      	; 0x560 <T0_Start+0x7a>
 55e:	c5 c0       	rjmp	.+394    	; 0x6ea <T0_Start+0x204>
 560:	21 15       	cp	r18, r1
 562:	a1 e0       	ldi	r26, 0x01	; 1
 564:	3a 07       	cpc	r19, r26
 566:	41 05       	cpc	r20, r1
 568:	51 05       	cpc	r21, r1
 56a:	61 05       	cpc	r22, r1
 56c:	71 05       	cpc	r23, r1
 56e:	81 05       	cpc	r24, r1
 570:	91 05       	cpc	r25, r1
 572:	79 f1       	breq	.+94     	; 0x5d2 <T0_Start+0xec>
 574:	70 f1       	brcs	.+92     	; 0x5d2 <T0_Start+0xec>
 576:	21 50       	subi	r18, 0x01	; 1
 578:	31 40       	sbci	r19, 0x01	; 1
 57a:	41 09       	sbc	r20, r1
 57c:	51 09       	sbc	r21, r1
 57e:	61 09       	sbc	r22, r1
 580:	71 09       	sbc	r23, r1
 582:	81 09       	sbc	r24, r1
 584:	91 09       	sbc	r25, r1
 586:	2f 3f       	cpi	r18, 0xFF	; 255
 588:	36 40       	sbci	r19, 0x06	; 6
 58a:	41 05       	cpc	r20, r1
 58c:	51 05       	cpc	r21, r1
 58e:	61 05       	cpc	r22, r1
 590:	71 05       	cpc	r23, r1
 592:	81 05       	cpc	r24, r1
 594:	91 05       	cpc	r25, r1
 596:	f9 f0       	breq	.+62     	; 0x5d6 <T0_Start+0xf0>
 598:	f0 f0       	brcs	.+60     	; 0x5d6 <T0_Start+0xf0>
 59a:	2a 2d       	mov	r18, r10
 59c:	3b 2d       	mov	r19, r11
 59e:	4c 2d       	mov	r20, r12
 5a0:	5d 2d       	mov	r21, r13
 5a2:	6e 2d       	mov	r22, r14
 5a4:	7f 2d       	mov	r23, r15
 5a6:	8e 2f       	mov	r24, r30
 5a8:	9f 2f       	mov	r25, r31
 5aa:	21 50       	subi	r18, 0x01	; 1
 5ac:	38 40       	sbci	r19, 0x08	; 8
 5ae:	41 09       	sbc	r20, r1
 5b0:	51 09       	sbc	r21, r1
 5b2:	61 09       	sbc	r22, r1
 5b4:	71 09       	sbc	r23, r1
 5b6:	81 09       	sbc	r24, r1
 5b8:	91 09       	sbc	r25, r1
 5ba:	2f 3f       	cpi	r18, 0xFF	; 255
 5bc:	37 41       	sbci	r19, 0x17	; 23
 5be:	41 05       	cpc	r20, r1
 5c0:	51 05       	cpc	r21, r1
 5c2:	61 05       	cpc	r22, r1
 5c4:	71 05       	cpc	r23, r1
 5c6:	81 05       	cpc	r24, r1
 5c8:	91 05       	cpc	r25, r1
 5ca:	09 f0       	breq	.+2      	; 0x5ce <T0_Start+0xe8>
 5cc:	30 f4       	brcc	.+12     	; 0x5da <T0_Start+0xf4>
 5ce:	64 e0       	ldi	r22, 0x04	; 4
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <T0_Start+0xf6>
 5d2:	62 e0       	ldi	r22, 0x02	; 2
 5d4:	03 c0       	rjmp	.+6      	; 0x5dc <T0_Start+0xf6>
 5d6:	63 e0       	ldi	r22, 0x03	; 3
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <T0_Start+0xf6>
 5da:	65 e0       	ldi	r22, 0x05	; 5
 5dc:	1f 2f       	mov	r17, r31
 5de:	0e 2f       	mov	r16, r30
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 06 02 	call	0x40c	; 0x40c <T0_Init>
 5e6:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <Gu16_T0Prescaler>
 5ea:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <Gu16_T0Prescaler+0x1>
 5ee:	40 e0       	ldi	r20, 0x00	; 0
 5f0:	50 e0       	ldi	r21, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	72 e1       	ldi	r23, 0x12	; 18
 5f6:	8a e7       	ldi	r24, 0x7A	; 122
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <__udivmodsi4>
 5fe:	19 01       	movw	r2, r18
 600:	2a 01       	movw	r4, r20
 602:	61 2c       	mov	r6, r1
 604:	71 2c       	mov	r7, r1
 606:	43 01       	movw	r8, r6
 608:	2f 83       	std	Y+7, r18	; 0x07
 60a:	38 86       	std	Y+8, r3	; 0x08
 60c:	49 86       	std	Y+9, r4	; 0x09
 60e:	5a 86       	std	Y+10, r5	; 0x0a
 610:	6b 86       	std	Y+11, r6	; 0x0b
 612:	7c 86       	std	Y+12, r7	; 0x0c
 614:	8d 86       	std	Y+13, r8	; 0x0d
 616:	9e 86       	std	Y+14, r9	; 0x0e
 618:	33 2d       	mov	r19, r3
 61a:	44 2d       	mov	r20, r4
 61c:	55 2d       	mov	r21, r5
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	0e 94 9c 04 	call	0x938	; 0x938 <__muldi3>
 62a:	22 2e       	mov	r2, r18
 62c:	33 2e       	mov	r3, r19
 62e:	49 83       	std	Y+1, r20	; 0x01
 630:	5a 83       	std	Y+2, r21	; 0x02
 632:	6b 83       	std	Y+3, r22	; 0x03
 634:	7c 83       	std	Y+4, r23	; 0x04
 636:	8d 83       	std	Y+5, r24	; 0x05
 638:	9e 83       	std	Y+6, r25	; 0x06
 63a:	a1 2c       	mov	r10, r1
 63c:	68 94       	set
 63e:	bb 24       	eor	r11, r11
 640:	b6 f8       	bld	r11, 6
 642:	0f 2e       	mov	r0, r31
 644:	f2 e4       	ldi	r31, 0x42	; 66
 646:	cf 2e       	mov	r12, r31
 648:	f0 2d       	mov	r31, r0
 64a:	0f 2e       	mov	r0, r31
 64c:	ff e0       	ldi	r31, 0x0F	; 15
 64e:	df 2e       	mov	r13, r31
 650:	f0 2d       	mov	r31, r0
 652:	e1 2c       	mov	r14, r1
 654:	f1 2c       	mov	r15, r1
 656:	00 e0       	ldi	r16, 0x00	; 0
 658:	10 e0       	ldi	r17, 0x00	; 0
 65a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__udivdi3>
 65e:	2f 87       	std	Y+15, r18	; 0x0f
 660:	3f 83       	std	Y+7, r19	; 0x07
 662:	44 2e       	mov	r4, r20
 664:	55 2e       	mov	r5, r21
 666:	66 2e       	mov	r6, r22
 668:	77 2e       	mov	r7, r23
 66a:	88 2e       	mov	r8, r24
 66c:	99 2e       	mov	r9, r25
 66e:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <Gu32_T0MaxOVCount>
 672:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <Gu32_T0MaxOVCount+0x1>
 676:	40 92 80 00 	sts	0x0080, r4	; 0x800080 <Gu32_T0MaxOVCount+0x2>
 67a:	50 92 81 00 	sts	0x0081, r5	; 0x800081 <Gu32_T0MaxOVCount+0x3>
 67e:	60 92 82 00 	sts	0x0082, r6	; 0x800082 <Gu32_T0MaxOVCount+0x4>
 682:	70 92 83 00 	sts	0x0083, r7	; 0x800083 <Gu32_T0MaxOVCount+0x5>
 686:	80 92 84 00 	sts	0x0084, r8	; 0x800084 <Gu32_T0MaxOVCount+0x6>
 68a:	90 92 85 00 	sts	0x0085, r9	; 0x800085 <Gu32_T0MaxOVCount+0x7>
 68e:	68 94       	set
 690:	aa 24       	eor	r10, r10
 692:	a6 f8       	bld	r10, 6
 694:	0f 2e       	mov	r0, r31
 696:	f2 e4       	ldi	r31, 0x42	; 66
 698:	bf 2e       	mov	r11, r31
 69a:	f0 2d       	mov	r31, r0
 69c:	0f 2e       	mov	r0, r31
 69e:	ff e0       	ldi	r31, 0x0F	; 15
 6a0:	cf 2e       	mov	r12, r31
 6a2:	f0 2d       	mov	r31, r0
 6a4:	d1 2c       	mov	r13, r1
 6a6:	22 2d       	mov	r18, r2
 6a8:	33 2d       	mov	r19, r3
 6aa:	49 81       	ldd	r20, Y+1	; 0x01
 6ac:	5a 81       	ldd	r21, Y+2	; 0x02
 6ae:	6b 81       	ldd	r22, Y+3	; 0x03
 6b0:	7c 81       	ldd	r23, Y+4	; 0x04
 6b2:	8d 81       	ldd	r24, Y+5	; 0x05
 6b4:	9e 81       	ldd	r25, Y+6	; 0x06
 6b6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__udivdi3>
 6ba:	e2 2f       	mov	r30, r18
 6bc:	20 93 75 00 	sts	0x0075, r18	; 0x800075 <Gu32_T0LastOVTicks>
 6c0:	2f 85       	ldd	r18, Y+15	; 0x0f
 6c2:	3f 81       	ldd	r19, Y+7	; 0x07
 6c4:	44 2d       	mov	r20, r4
 6c6:	55 2d       	mov	r21, r5
 6c8:	66 2d       	mov	r22, r6
 6ca:	77 2d       	mov	r23, r7
 6cc:	88 2d       	mov	r24, r8
 6ce:	99 2d       	mov	r25, r9
 6d0:	a0 e0       	ldi	r26, 0x00	; 0
 6d2:	0e 94 69 05 	call	0xad2	; 0xad2 <__cmpdi2_s8>
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <T0_Start+0x1fa>
 6d8:	e1 95       	neg	r30
 6da:	e2 bf       	out	0x32, r30	; 50
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <T0_Start+0x206>
 6e0:	12 be       	out	0x32, r1	; 50
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <T0_Start+0x206>
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	01 c0       	rjmp	.+2      	; 0x6ec <T0_Start+0x206>
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	2f 96       	adiw	r28, 0x0f	; 15
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	f8 94       	cli
 6f2:	de bf       	out	0x3e, r29	; 62
 6f4:	0f be       	out	0x3f, r0	; 63
 6f6:	cd bf       	out	0x3d, r28	; 61
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	ff 90       	pop	r15
 702:	ef 90       	pop	r14
 704:	df 90       	pop	r13
 706:	cf 90       	pop	r12
 708:	bf 90       	pop	r11
 70a:	af 90       	pop	r10
 70c:	9f 90       	pop	r9
 70e:	8f 90       	pop	r8
 710:	7f 90       	pop	r7
 712:	6f 90       	pop	r6
 714:	5f 90       	pop	r5
 716:	4f 90       	pop	r4
 718:	3f 90       	pop	r3
 71a:	2f 90       	pop	r2
 71c:	08 95       	ret

0000071e <__vector_11>:

/******************** ISR FUNCTIONS ****************************************/

//ISR function to run in case  of a timer overflow interrupt
ISR(TIMER0_OVF_vect)
{
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	2f 92       	push	r2
 72a:	3f 92       	push	r3
 72c:	4f 92       	push	r4
 72e:	5f 92       	push	r5
 730:	6f 92       	push	r6
 732:	7f 92       	push	r7
 734:	8f 92       	push	r8
 736:	9f 92       	push	r9
 738:	af 92       	push	r10
 73a:	bf 92       	push	r11
 73c:	cf 92       	push	r12
 73e:	df 92       	push	r13
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	00 d0       	rcall	.+0      	; 0x766 <__vector_11+0x48>
 766:	00 d0       	rcall	.+0      	; 0x768 <__vector_11+0x4a>
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
   //if the current overflow value is less than the total overflows value
   if (Gu32_T0CurrentOVCount < Gu32_T0MaxOVCount)
 76c:	80 90 76 00 	lds	r8, 0x0076	; 0x800076 <Gu32_T0CurrentOVCount>
 770:	90 90 77 00 	lds	r9, 0x0077	; 0x800077 <Gu32_T0CurrentOVCount+0x1>
 774:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Gu32_T0CurrentOVCount+0x2>
 778:	8c 83       	std	Y+4, r24	; 0x04
 77a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <Gu32_T0CurrentOVCount+0x3>
 77e:	8b 83       	std	Y+3, r24	; 0x03
 780:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <Gu32_T0CurrentOVCount+0x4>
 784:	a0 91 7b 00 	lds	r26, 0x007B	; 0x80007b <Gu32_T0CurrentOVCount+0x5>
 788:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <Gu32_T0CurrentOVCount+0x6>
 78c:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <Gu32_T0CurrentOVCount+0x7>
 790:	20 90 7e 00 	lds	r2, 0x007E	; 0x80007e <Gu32_T0MaxOVCount>
 794:	30 90 7f 00 	lds	r3, 0x007F	; 0x80007f <Gu32_T0MaxOVCount+0x1>
 798:	40 90 80 00 	lds	r4, 0x0080	; 0x800080 <Gu32_T0MaxOVCount+0x2>
 79c:	50 90 81 00 	lds	r5, 0x0081	; 0x800081 <Gu32_T0MaxOVCount+0x3>
 7a0:	60 90 82 00 	lds	r6, 0x0082	; 0x800082 <Gu32_T0MaxOVCount+0x4>
 7a4:	70 90 83 00 	lds	r7, 0x0083	; 0x800083 <Gu32_T0MaxOVCount+0x5>
 7a8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <Gu32_T0MaxOVCount+0x6>
 7ac:	89 83       	std	Y+1, r24	; 0x01
 7ae:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <Gu32_T0MaxOVCount+0x7>
 7b2:	8a 83       	std	Y+2, r24	; 0x02
 7b4:	28 2d       	mov	r18, r8
 7b6:	39 2d       	mov	r19, r9
 7b8:	4c 81       	ldd	r20, Y+4	; 0x04
 7ba:	5b 81       	ldd	r21, Y+3	; 0x03
 7bc:	6b 2f       	mov	r22, r27
 7be:	7a 2f       	mov	r23, r26
 7c0:	8f 2f       	mov	r24, r31
 7c2:	9e 2f       	mov	r25, r30
 7c4:	a2 2c       	mov	r10, r2
 7c6:	b3 2c       	mov	r11, r3
 7c8:	c4 2c       	mov	r12, r4
 7ca:	d5 2c       	mov	r13, r5
 7cc:	e6 2c       	mov	r14, r6
 7ce:	f7 2c       	mov	r15, r7
 7d0:	09 81       	ldd	r16, Y+1	; 0x01
 7d2:	1a 81       	ldd	r17, Y+2	; 0x02
 7d4:	0e 94 60 05 	call	0xac0	; 0xac0 <__cmpdi2>
 7d8:	a0 f4       	brcc	.+40     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
   {
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
 7da:	a1 e0       	ldi	r26, 0x01	; 1
 7dc:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__adddi3_s8>
 7e0:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <Gu32_T0CurrentOVCount>
 7e4:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <Gu32_T0CurrentOVCount+0x1>
 7e8:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <Gu32_T0CurrentOVCount+0x2>
 7ec:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <Gu32_T0CurrentOVCount+0x3>
 7f0:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <Gu32_T0CurrentOVCount+0x4>
 7f4:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <Gu32_T0CurrentOVCount+0x5>
 7f8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Gu32_T0CurrentOVCount+0x6>
 7fc:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <Gu32_T0CurrentOVCount+0x7>
 800:	52 c0       	rjmp	.+164    	; 0x8a6 <__stack+0x47>
   }
   //if the current overflow value equals the calculated total overflows value
   else if (Gu32_T0CurrentOVCount == Gu32_T0MaxOVCount)
 802:	28 2d       	mov	r18, r8
 804:	39 2d       	mov	r19, r9
 806:	4c 81       	ldd	r20, Y+4	; 0x04
 808:	5b 81       	ldd	r21, Y+3	; 0x03
 80a:	6b 2f       	mov	r22, r27
 80c:	7a 2f       	mov	r23, r26
 80e:	8f 2f       	mov	r24, r31
 810:	9e 2f       	mov	r25, r30
 812:	a2 2c       	mov	r10, r2
 814:	b3 2c       	mov	r11, r3
 816:	c4 2c       	mov	r12, r4
 818:	d5 2c       	mov	r13, r5
 81a:	e6 2c       	mov	r14, r6
 81c:	f7 2c       	mov	r15, r7
 81e:	09 81       	ldd	r16, Y+1	; 0x01
 820:	1a 81       	ldd	r17, Y+2	; 0x02
 822:	0e 94 60 05 	call	0xac0	; 0xac0 <__cmpdi2>
 826:	41 f5       	brne	.+80     	; 0x878 <__stack+0x19>
   {
      //set the timer value to the remaining timing
      TCNT0_R=((T0_TICKS-1)-Gu32_T0LastOVTicks);
 828:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Gu32_T0LastOVTicks>
 82c:	80 95       	com	r24
 82e:	82 bf       	out	0x32, r24	; 50
      //increase the overflow counter
      Gu32_T0CurrentOVCount++;
 830:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <Gu32_T0CurrentOVCount>
 834:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <Gu32_T0CurrentOVCount+0x1>
 838:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <Gu32_T0CurrentOVCount+0x2>
 83c:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <Gu32_T0CurrentOVCount+0x3>
 840:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <Gu32_T0CurrentOVCount+0x4>
 844:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <Gu32_T0CurrentOVCount+0x5>
 848:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <Gu32_T0CurrentOVCount+0x6>
 84c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <Gu32_T0CurrentOVCount+0x7>
 850:	a1 e0       	ldi	r26, 0x01	; 1
 852:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__adddi3_s8>
 856:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <Gu32_T0CurrentOVCount>
 85a:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <Gu32_T0CurrentOVCount+0x1>
 85e:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <Gu32_T0CurrentOVCount+0x2>
 862:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <Gu32_T0CurrentOVCount+0x3>
 866:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <Gu32_T0CurrentOVCount+0x4>
 86a:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <Gu32_T0CurrentOVCount+0x5>
 86e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Gu32_T0CurrentOVCount+0x6>
 872:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <Gu32_T0CurrentOVCount+0x7>
 876:	17 c0       	rjmp	.+46     	; 0x8a6 <__stack+0x47>
   }
   //if the time is up
   else
   {
      //reset the overflow counter
      Gu32_T0CurrentOVCount=0;
 878:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Gu32_T0CurrentOVCount>
 87c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Gu32_T0CurrentOVCount+0x1>
 880:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Gu32_T0CurrentOVCount+0x2>
 884:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Gu32_T0CurrentOVCount+0x3>
 888:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Gu32_T0CurrentOVCount+0x4>
 88c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <Gu32_T0CurrentOVCount+0x5>
 890:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <Gu32_T0CurrentOVCount+0x6>
 894:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <Gu32_T0CurrentOVCount+0x7>
      //check if the global pointer to function holds a valid function address
      if (G_fptr != NULLPTR)
 898:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <G_fptr>
 89c:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <G_fptr+0x1>
 8a0:	30 97       	sbiw	r30, 0x00	; 0
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__stack+0x47>
      {
         //call the function
         G_fptr();
 8a4:	09 95       	icall
      }
   }      
}
 8a6:	0f 90       	pop	r0
 8a8:	0f 90       	pop	r0
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	df 91       	pop	r29
 8b0:	cf 91       	pop	r28
 8b2:	ff 91       	pop	r31
 8b4:	ef 91       	pop	r30
 8b6:	bf 91       	pop	r27
 8b8:	af 91       	pop	r26
 8ba:	9f 91       	pop	r25
 8bc:	8f 91       	pop	r24
 8be:	7f 91       	pop	r23
 8c0:	6f 91       	pop	r22
 8c2:	5f 91       	pop	r21
 8c4:	4f 91       	pop	r20
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	1f 91       	pop	r17
 8cc:	0f 91       	pop	r16
 8ce:	ff 90       	pop	r15
 8d0:	ef 90       	pop	r14
 8d2:	df 90       	pop	r13
 8d4:	cf 90       	pop	r12
 8d6:	bf 90       	pop	r11
 8d8:	af 90       	pop	r10
 8da:	9f 90       	pop	r9
 8dc:	8f 90       	pop	r8
 8de:	7f 90       	pop	r7
 8e0:	6f 90       	pop	r6
 8e2:	5f 90       	pop	r5
 8e4:	4f 90       	pop	r4
 8e6:	3f 90       	pop	r3
 8e8:	2f 90       	pop	r2
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <__udivmodsi4>:
 8f4:	a1 e2       	ldi	r26, 0x21	; 33
 8f6:	1a 2e       	mov	r1, r26
 8f8:	aa 1b       	sub	r26, r26
 8fa:	bb 1b       	sub	r27, r27
 8fc:	fd 01       	movw	r30, r26
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <__udivmodsi4_ep>

00000900 <__udivmodsi4_loop>:
 900:	aa 1f       	adc	r26, r26
 902:	bb 1f       	adc	r27, r27
 904:	ee 1f       	adc	r30, r30
 906:	ff 1f       	adc	r31, r31
 908:	a2 17       	cp	r26, r18
 90a:	b3 07       	cpc	r27, r19
 90c:	e4 07       	cpc	r30, r20
 90e:	f5 07       	cpc	r31, r21
 910:	20 f0       	brcs	.+8      	; 0x91a <__udivmodsi4_ep>
 912:	a2 1b       	sub	r26, r18
 914:	b3 0b       	sbc	r27, r19
 916:	e4 0b       	sbc	r30, r20
 918:	f5 0b       	sbc	r31, r21

0000091a <__udivmodsi4_ep>:
 91a:	66 1f       	adc	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	1a 94       	dec	r1
 924:	69 f7       	brne	.-38     	; 0x900 <__udivmodsi4_loop>
 926:	60 95       	com	r22
 928:	70 95       	com	r23
 92a:	80 95       	com	r24
 92c:	90 95       	com	r25
 92e:	9b 01       	movw	r18, r22
 930:	ac 01       	movw	r20, r24
 932:	bd 01       	movw	r22, r26
 934:	cf 01       	movw	r24, r30
 936:	08 95       	ret

00000938 <__muldi3>:
 938:	df 93       	push	r29
 93a:	cf 93       	push	r28
 93c:	1f 93       	push	r17
 93e:	0f 93       	push	r16
 940:	9a 9d       	mul	r25, r10
 942:	f0 2d       	mov	r31, r0
 944:	21 9f       	mul	r18, r17
 946:	f0 0d       	add	r31, r0
 948:	8b 9d       	mul	r24, r11
 94a:	f0 0d       	add	r31, r0
 94c:	8a 9d       	mul	r24, r10
 94e:	e0 2d       	mov	r30, r0
 950:	f1 0d       	add	r31, r1
 952:	03 9f       	mul	r16, r19
 954:	f0 0d       	add	r31, r0
 956:	02 9f       	mul	r16, r18
 958:	e0 0d       	add	r30, r0
 95a:	f1 1d       	adc	r31, r1
 95c:	4e 9d       	mul	r20, r14
 95e:	e0 0d       	add	r30, r0
 960:	f1 1d       	adc	r31, r1
 962:	5e 9d       	mul	r21, r14
 964:	f0 0d       	add	r31, r0
 966:	4f 9d       	mul	r20, r15
 968:	f0 0d       	add	r31, r0
 96a:	7f 93       	push	r23
 96c:	6f 93       	push	r22
 96e:	bf 92       	push	r11
 970:	af 92       	push	r10
 972:	5f 93       	push	r21
 974:	4f 93       	push	r20
 976:	d5 01       	movw	r26, r10
 978:	0e 94 75 05 	call	0xaea	; 0xaea <__umulhisi3>
 97c:	8b 01       	movw	r16, r22
 97e:	ac 01       	movw	r20, r24
 980:	d7 01       	movw	r26, r14
 982:	0e 94 75 05 	call	0xaea	; 0xaea <__umulhisi3>
 986:	eb 01       	movw	r28, r22
 988:	e8 0f       	add	r30, r24
 98a:	f9 1f       	adc	r31, r25
 98c:	d6 01       	movw	r26, r12
 98e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__muldi3_6>
 992:	2f 91       	pop	r18
 994:	3f 91       	pop	r19
 996:	d6 01       	movw	r26, r12
 998:	0e 94 75 05 	call	0xaea	; 0xaea <__umulhisi3>
 99c:	c6 0f       	add	r28, r22
 99e:	d7 1f       	adc	r29, r23
 9a0:	e8 1f       	adc	r30, r24
 9a2:	f9 1f       	adc	r31, r25
 9a4:	af 91       	pop	r26
 9a6:	bf 91       	pop	r27
 9a8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__muldi3_6>
 9ac:	2f 91       	pop	r18
 9ae:	3f 91       	pop	r19
 9b0:	0e 94 75 05 	call	0xaea	; 0xaea <__umulhisi3>
 9b4:	c6 0f       	add	r28, r22
 9b6:	d7 1f       	adc	r29, r23
 9b8:	e8 1f       	adc	r30, r24
 9ba:	f9 1f       	adc	r31, r25
 9bc:	d6 01       	movw	r26, r12
 9be:	0e 94 75 05 	call	0xaea	; 0xaea <__umulhisi3>
 9c2:	e6 0f       	add	r30, r22
 9c4:	f7 1f       	adc	r31, r23
 9c6:	98 01       	movw	r18, r16
 9c8:	be 01       	movw	r22, r28
 9ca:	cf 01       	movw	r24, r30
 9cc:	11 24       	eor	r1, r1
 9ce:	0f 91       	pop	r16
 9d0:	1f 91       	pop	r17
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	08 95       	ret

000009d8 <__muldi3_6>:
 9d8:	0e 94 75 05 	call	0xaea	; 0xaea <__umulhisi3>
 9dc:	46 0f       	add	r20, r22
 9de:	57 1f       	adc	r21, r23
 9e0:	c8 1f       	adc	r28, r24
 9e2:	d9 1f       	adc	r29, r25
 9e4:	08 f4       	brcc	.+2      	; 0x9e8 <__muldi3_6+0x10>
 9e6:	31 96       	adiw	r30, 0x01	; 1
 9e8:	08 95       	ret

000009ea <__umoddi3>:
 9ea:	68 94       	set
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <__udivdi3_umoddi3>

000009ee <__udivdi3>:
 9ee:	e8 94       	clt

000009f0 <__udivdi3_umoddi3>:
 9f0:	8f 92       	push	r8
 9f2:	9f 92       	push	r9
 9f4:	cf 93       	push	r28
 9f6:	df 93       	push	r29
 9f8:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmod64>
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	9f 90       	pop	r9
 a02:	8f 90       	pop	r8
 a04:	08 95       	ret

00000a06 <__udivmod64>:
 a06:	88 24       	eor	r8, r8
 a08:	99 24       	eor	r9, r9
 a0a:	f4 01       	movw	r30, r8
 a0c:	e4 01       	movw	r28, r8
 a0e:	b0 e4       	ldi	r27, 0x40	; 64
 a10:	9f 93       	push	r25
 a12:	aa 27       	eor	r26, r26
 a14:	9a 15       	cp	r25, r10
 a16:	8b 04       	cpc	r8, r11
 a18:	9c 04       	cpc	r9, r12
 a1a:	ed 05       	cpc	r30, r13
 a1c:	fe 05       	cpc	r31, r14
 a1e:	cf 05       	cpc	r28, r15
 a20:	d0 07       	cpc	r29, r16
 a22:	a1 07       	cpc	r26, r17
 a24:	98 f4       	brcc	.+38     	; 0xa4c <__udivmod64+0x46>
 a26:	ad 2f       	mov	r26, r29
 a28:	dc 2f       	mov	r29, r28
 a2a:	cf 2f       	mov	r28, r31
 a2c:	fe 2f       	mov	r31, r30
 a2e:	e9 2d       	mov	r30, r9
 a30:	98 2c       	mov	r9, r8
 a32:	89 2e       	mov	r8, r25
 a34:	98 2f       	mov	r25, r24
 a36:	87 2f       	mov	r24, r23
 a38:	76 2f       	mov	r23, r22
 a3a:	65 2f       	mov	r22, r21
 a3c:	54 2f       	mov	r21, r20
 a3e:	43 2f       	mov	r20, r19
 a40:	32 2f       	mov	r19, r18
 a42:	22 27       	eor	r18, r18
 a44:	b8 50       	subi	r27, 0x08	; 8
 a46:	31 f7       	brne	.-52     	; 0xa14 <__udivmod64+0xe>
 a48:	bf 91       	pop	r27
 a4a:	27 c0       	rjmp	.+78     	; 0xa9a <__udivmod64+0x94>
 a4c:	1b 2e       	mov	r1, r27
 a4e:	bf 91       	pop	r27
 a50:	bb 27       	eor	r27, r27
 a52:	22 0f       	add	r18, r18
 a54:	33 1f       	adc	r19, r19
 a56:	44 1f       	adc	r20, r20
 a58:	55 1f       	adc	r21, r21
 a5a:	66 1f       	adc	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	99 1f       	adc	r25, r25
 a62:	88 1c       	adc	r8, r8
 a64:	99 1c       	adc	r9, r9
 a66:	ee 1f       	adc	r30, r30
 a68:	ff 1f       	adc	r31, r31
 a6a:	cc 1f       	adc	r28, r28
 a6c:	dd 1f       	adc	r29, r29
 a6e:	aa 1f       	adc	r26, r26
 a70:	bb 1f       	adc	r27, r27
 a72:	8a 14       	cp	r8, r10
 a74:	9b 04       	cpc	r9, r11
 a76:	ec 05       	cpc	r30, r12
 a78:	fd 05       	cpc	r31, r13
 a7a:	ce 05       	cpc	r28, r14
 a7c:	df 05       	cpc	r29, r15
 a7e:	a0 07       	cpc	r26, r16
 a80:	b1 07       	cpc	r27, r17
 a82:	48 f0       	brcs	.+18     	; 0xa96 <__udivmod64+0x90>
 a84:	8a 18       	sub	r8, r10
 a86:	9b 08       	sbc	r9, r11
 a88:	ec 09       	sbc	r30, r12
 a8a:	fd 09       	sbc	r31, r13
 a8c:	ce 09       	sbc	r28, r14
 a8e:	df 09       	sbc	r29, r15
 a90:	a0 0b       	sbc	r26, r16
 a92:	b1 0b       	sbc	r27, r17
 a94:	21 60       	ori	r18, 0x01	; 1
 a96:	1a 94       	dec	r1
 a98:	e1 f6       	brne	.-72     	; 0xa52 <__udivmod64+0x4c>
 a9a:	2e f4       	brtc	.+10     	; 0xaa6 <__udivmod64+0xa0>
 a9c:	94 01       	movw	r18, r8
 a9e:	af 01       	movw	r20, r30
 aa0:	be 01       	movw	r22, r28
 aa2:	cd 01       	movw	r24, r26
 aa4:	00 0c       	add	r0, r0
 aa6:	08 95       	ret

00000aa8 <__adddi3_s8>:
 aa8:	00 24       	eor	r0, r0
 aaa:	a7 fd       	sbrc	r26, 7
 aac:	00 94       	com	r0
 aae:	2a 0f       	add	r18, r26
 ab0:	30 1d       	adc	r19, r0
 ab2:	40 1d       	adc	r20, r0
 ab4:	50 1d       	adc	r21, r0
 ab6:	60 1d       	adc	r22, r0
 ab8:	70 1d       	adc	r23, r0
 aba:	80 1d       	adc	r24, r0
 abc:	90 1d       	adc	r25, r0
 abe:	08 95       	ret

00000ac0 <__cmpdi2>:
 ac0:	2a 15       	cp	r18, r10
 ac2:	3b 05       	cpc	r19, r11
 ac4:	4c 05       	cpc	r20, r12
 ac6:	5d 05       	cpc	r21, r13
 ac8:	6e 05       	cpc	r22, r14
 aca:	7f 05       	cpc	r23, r15
 acc:	80 07       	cpc	r24, r16
 ace:	91 07       	cpc	r25, r17
 ad0:	08 95       	ret

00000ad2 <__cmpdi2_s8>:
 ad2:	00 24       	eor	r0, r0
 ad4:	a7 fd       	sbrc	r26, 7
 ad6:	00 94       	com	r0
 ad8:	2a 17       	cp	r18, r26
 ada:	30 05       	cpc	r19, r0
 adc:	40 05       	cpc	r20, r0
 ade:	50 05       	cpc	r21, r0
 ae0:	60 05       	cpc	r22, r0
 ae2:	70 05       	cpc	r23, r0
 ae4:	80 05       	cpc	r24, r0
 ae6:	90 05       	cpc	r25, r0
 ae8:	08 95       	ret

00000aea <__umulhisi3>:
 aea:	a2 9f       	mul	r26, r18
 aec:	b0 01       	movw	r22, r0
 aee:	b3 9f       	mul	r27, r19
 af0:	c0 01       	movw	r24, r0
 af2:	a3 9f       	mul	r26, r19
 af4:	70 0d       	add	r23, r0
 af6:	81 1d       	adc	r24, r1
 af8:	11 24       	eor	r1, r1
 afa:	91 1d       	adc	r25, r1
 afc:	b2 9f       	mul	r27, r18
 afe:	70 0d       	add	r23, r0
 b00:	81 1d       	adc	r24, r1
 b02:	11 24       	eor	r1, r1
 b04:	91 1d       	adc	r25, r1
 b06:	08 95       	ret

00000b08 <_exit>:
 b08:	f8 94       	cli

00000b0a <__stop_program>:
 b0a:	ff cf       	rjmp	.-2      	; 0xb0a <__stop_program>
