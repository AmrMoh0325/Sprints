
SPI_UART_Chat_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000049a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000049a  0000050e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001043  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097d  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000879  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  000028c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c8  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b3  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00003937  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 4b 02 	jmp	0x496	; 0x496 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "DataTypes.h"
#include "MCAL/SPI/SPI.h"
#include "MCAL/UART/UART.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	cf 5f       	subi	r28, 0xFF	; 255
  8c:	d1 09       	sbc	r29, r1
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
   uint8_t Send_Buffer[255]={0};
  98:	fe 01       	movw	r30, r28
  9a:	31 96       	adiw	r30, 0x01	; 1
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	df 01       	movw	r26, r30
  a0:	1d 92       	st	X+, r1
  a2:	8a 95       	dec	r24
  a4:	e9 f7       	brne	.-6      	; 0xa0 <main+0x1e>
   UART_Init();
  a6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_Init>
   SPI_Init();
  aa:	0e 94 b6 01 	call	0x36c	; 0x36c <SPI_Init>
    /* Replace with your application code */
    while (1) 
    {
       UART_ReceiveString(Send_Buffer,255);
  ae:	6f ef       	ldi	r22, 0xFF	; 255
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 20 02 	call	0x440	; 0x440 <UART_ReceiveString>
       SPI_SendString(Send_Buffer);
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <SPI_SendString>
  c0:	f6 cf       	rjmp	.-20     	; 0xae <main+0x2c>

000000c2 <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	cc c0       	rjmp	.+408    	; 0x25e <DIO_Init+0x19c>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
  c6:	84 2f       	mov	r24, r20
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e8 0f       	add	r30, r24
  d2:	f9 1f       	adc	r31, r25
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	20 81       	ld	r18, Z
  da:	32 2f       	mov	r19, r18
  dc:	36 95       	lsr	r19
  de:	36 95       	lsr	r19
  e0:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
  e2:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
  e4:	34 30       	cpi	r19, 0x04	; 4
  e6:	08 f0       	brcs	.+2      	; 0xea <DIO_Init+0x28>
  e8:	bf c0       	rjmp	.+382    	; 0x268 <DIO_Init+0x1a6>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
  ea:	31 30       	cpi	r19, 0x01	; 1
  ec:	a1 f1       	breq	.+104    	; 0x156 <DIO_Init+0x94>
  ee:	38 f0       	brcs	.+14     	; 0xfe <DIO_Init+0x3c>
  f0:	32 30       	cpi	r19, 0x02	; 2
  f2:	09 f4       	brne	.+2      	; 0xf6 <DIO_Init+0x34>
  f4:	5c c0       	rjmp	.+184    	; 0x1ae <DIO_Init+0xec>
  f6:	33 30       	cpi	r19, 0x03	; 3
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_Init+0x3a>
  fa:	84 c0       	rjmp	.+264    	; 0x204 <DIO_Init+0x142>
  fc:	af c0       	rjmp	.+350    	; 0x25c <DIO_Init+0x19a>
      {
         case M_PORTA:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRA_R,u8pin);
  fe:	3a b3       	in	r19, 0x1a	; 26
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_Init+0x48>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	2a 95       	dec	r18
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_Init+0x44>
 10e:	26 2f       	mov	r18, r22
 110:	20 95       	com	r18
 112:	32 23       	and	r19, r18
 114:	3a bb       	out	0x1a, r19	; 26
         CLR_BIT(PORTA_R,u8pin);
 116:	3b b3       	in	r19, 0x1b	; 27
 118:	23 23       	and	r18, r19
 11a:	2b bb       	out	0x1b, r18	; 27
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 11c:	fc 01       	movw	r30, r24
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e8 0f       	add	r30, r24
 124:	f9 1f       	adc	r31, r25
 126:	e0 5a       	subi	r30, 0xA0	; 160
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	21 81       	ldd	r18, Z+1	; 0x01
 12c:	22 23       	and	r18, r18
 12e:	19 f0       	breq	.+6      	; 0x136 <DIO_Init+0x74>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRA_R,u8pin);
 130:	2a b3       	in	r18, 0x1a	; 26
 132:	26 2b       	or	r18, r22
 134:	2a bb       	out	0x1a, r18	; 26
         }

         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 136:	fc 01       	movw	r30, r24
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	8e 0f       	add	r24, r30
 13e:	9f 1f       	adc	r25, r31
 140:	fc 01       	movw	r30, r24
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	88 23       	and	r24, r24
 14a:	09 f4       	brne	.+2      	; 0x14e <DIO_Init+0x8c>
 14c:	87 c0       	rjmp	.+270    	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTA_R,u8pin);
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	68 2b       	or	r22, r24
 152:	6b bb       	out	0x1b, r22	; 27
 154:	83 c0       	rjmp	.+262    	; 0x25c <DIO_Init+0x19a>
         }
         break;

         case M_PORTB:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRB_R,u8pin);
 156:	37 b3       	in	r19, 0x17	; 23
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_Init+0xa0>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	2a 95       	dec	r18
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_Init+0x9c>
 166:	26 2f       	mov	r18, r22
 168:	20 95       	com	r18
 16a:	32 23       	and	r19, r18
 16c:	37 bb       	out	0x17, r19	; 23
         CLR_BIT(PORTB_R,u8pin);
 16e:	38 b3       	in	r19, 0x18	; 24
 170:	23 23       	and	r18, r19
 172:	28 bb       	out	0x18, r18	; 24
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 174:	fc 01       	movw	r30, r24
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	e0 5a       	subi	r30, 0xA0	; 160
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	21 81       	ldd	r18, Z+1	; 0x01
 184:	22 23       	and	r18, r18
 186:	19 f0       	breq	.+6      	; 0x18e <DIO_Init+0xcc>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRB_R,u8pin);
 188:	27 b3       	in	r18, 0x17	; 23
 18a:	26 2b       	or	r18, r22
 18c:	27 bb       	out	0x17, r18	; 23
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 18e:	fc 01       	movw	r30, r24
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	8e 0f       	add	r24, r30
 196:	9f 1f       	adc	r25, r31
 198:	fc 01       	movw	r30, r24
 19a:	e0 5a       	subi	r30, 0xA0	; 160
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	82 81       	ldd	r24, Z+2	; 0x02
 1a0:	88 23       	and	r24, r24
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <DIO_Init+0xe4>
 1a4:	5b c0       	rjmp	.+182    	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTB_R,u8pin);
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	68 2b       	or	r22, r24
 1aa:	68 bb       	out	0x18, r22	; 24
 1ac:	57 c0       	rjmp	.+174    	; 0x25c <DIO_Init+0x19a>
         }
         break;

         case M_PORTC:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRC_R,u8pin);
 1ae:	34 b3       	in	r19, 0x14	; 20
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_Init+0xf8>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_Init+0xf4>
 1be:	26 2f       	mov	r18, r22
 1c0:	20 95       	com	r18
 1c2:	32 23       	and	r19, r18
 1c4:	34 bb       	out	0x14, r19	; 20
         CLR_BIT(PORTC_R,u8pin);
 1c6:	35 b3       	in	r19, 0x15	; 21
 1c8:	23 23       	and	r18, r19
 1ca:	25 bb       	out	0x15, r18	; 21
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 1cc:	fc 01       	movw	r30, r24
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e8 0f       	add	r30, r24
 1d4:	f9 1f       	adc	r31, r25
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	21 81       	ldd	r18, Z+1	; 0x01
 1dc:	22 23       	and	r18, r18
 1de:	19 f0       	breq	.+6      	; 0x1e6 <DIO_Init+0x124>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRC_R,u8pin);
 1e0:	24 b3       	in	r18, 0x14	; 20
 1e2:	26 2b       	or	r18, r22
 1e4:	24 bb       	out	0x14, r18	; 20
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 1e6:	fc 01       	movw	r30, r24
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	8e 0f       	add	r24, r30
 1ee:	9f 1f       	adc	r25, r31
 1f0:	fc 01       	movw	r30, r24
 1f2:	e0 5a       	subi	r30, 0xA0	; 160
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	88 23       	and	r24, r24
 1fa:	81 f1       	breq	.+96     	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTC_R,u8pin);
 1fc:	85 b3       	in	r24, 0x15	; 21
 1fe:	68 2b       	or	r22, r24
 200:	65 bb       	out	0x15, r22	; 21
 202:	2c c0       	rjmp	.+88     	; 0x25c <DIO_Init+0x19a>
         }
         break;

         case M_PORTD:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRD_R,u8pin);
 204:	61 b3       	in	r22, 0x11	; 17
 206:	e1 e0       	ldi	r30, 0x01	; 1
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	df 01       	movw	r26, r30
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_Init+0x150>
 20e:	aa 0f       	add	r26, r26
 210:	bb 1f       	adc	r27, r27
 212:	2a 95       	dec	r18
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_Init+0x14c>
 216:	9d 01       	movw	r18, r26
 218:	5a 2f       	mov	r21, r26
 21a:	50 95       	com	r21
 21c:	65 23       	and	r22, r21
 21e:	61 bb       	out	0x11, r22	; 17
         CLR_BIT(PORTD_R,u8pin);
 220:	62 b3       	in	r22, 0x12	; 18
 222:	56 23       	and	r21, r22
 224:	52 bb       	out	0x12, r21	; 18
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 226:	fc 01       	movw	r30, r24
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e8 0f       	add	r30, r24
 22e:	f9 1f       	adc	r31, r25
 230:	e0 5a       	subi	r30, 0xA0	; 160
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	51 81       	ldd	r21, Z+1	; 0x01
 236:	55 23       	and	r21, r21
 238:	19 f0       	breq	.+6      	; 0x240 <DIO_Init+0x17e>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRD_R,u8pin);
 23a:	51 b3       	in	r21, 0x11	; 17
 23c:	5a 2b       	or	r21, r26
 23e:	51 bb       	out	0x11, r21	; 17
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 240:	fc 01       	movw	r30, r24
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	8e 0f       	add	r24, r30
 248:	9f 1f       	adc	r25, r31
 24a:	fc 01       	movw	r30, r24
 24c:	e0 5a       	subi	r30, 0xA0	; 160
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	82 81       	ldd	r24, Z+2	; 0x02
 252:	88 23       	and	r24, r24
 254:	19 f0       	breq	.+6      	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTD_R,u8pin);
 256:	82 b3       	in	r24, 0x12	; 18
 258:	28 2b       	or	r18, r24
 25a:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	44 30       	cpi	r20, 0x04	; 4
 260:	08 f4       	brcc	.+2      	; 0x264 <DIO_Init+0x1a2>
 262:	31 cf       	rjmp	.-414    	; 0xc6 <DIO_Init+0x4>
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 268:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
   }
   //return success status
   return SUCCESS;
}
 26a:	08 95       	ret

0000026c <DIO_Write>:
************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8GroupId, uint8_t u8Data)
{
   uint8_t u8port,u8pin;
   //calculate the port and pin number of the selected object
   u8port=astrDIOConfigParameters[u8GroupId].enuPinNo / DIO_PINS_NO;
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	ee 0f       	add	r30, r30
 272:	ff 1f       	adc	r31, r31
 274:	e8 0f       	add	r30, r24
 276:	f9 1f       	adc	r31, r25
 278:	e0 5a       	subi	r30, 0xA0	; 160
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	20 81       	ld	r18, Z
 27e:	32 2f       	mov	r19, r18
 280:	36 95       	lsr	r19
 282:	36 95       	lsr	r19
 284:	36 95       	lsr	r19
   u8pin =astrDIOConfigParameters[u8GroupId].enuPinNo % DIO_PINS_NO;
 286:	27 70       	andi	r18, 0x07	; 7
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
 288:	34 30       	cpi	r19, 0x04	; 4
 28a:	08 f0       	brcs	.+2      	; 0x28e <DIO_Write+0x22>
 28c:	61 c0       	rjmp	.+194    	; 0x350 <DIO_Write+0xe4>
 28e:	fc 01       	movw	r30, r24
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	8e 0f       	add	r24, r30
 296:	9f 1f       	adc	r25, r31
 298:	fc 01       	movw	r30, r24
 29a:	e0 5a       	subi	r30, 0xA0	; 160
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	81 81       	ldd	r24, Z+1	; 0x01
 2a0:	88 23       	and	r24, r24
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_Write+0x3a>
 2a4:	57 c0       	rjmp	.+174    	; 0x354 <DIO_Write+0xe8>
   }
   
   else
   {
      //select the calculated port
      switch(u8port)
 2a6:	31 30       	cpi	r19, 0x01	; 1
 2a8:	d1 f0       	breq	.+52     	; 0x2de <DIO_Write+0x72>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_Write+0x4a>
 2ac:	32 30       	cpi	r19, 0x02	; 2
 2ae:	51 f1       	breq	.+84     	; 0x304 <DIO_Write+0x98>
 2b0:	33 30       	cpi	r19, 0x03	; 3
 2b2:	d9 f1       	breq	.+118    	; 0x32a <DIO_Write+0xbe>
 2b4:	51 c0       	rjmp	.+162    	; 0x358 <DIO_Write+0xec>
      {
         case M_PORTA:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTA_R,u8pin);
 2b6:	3b b3       	in	r19, 0x1b	; 27
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_Write+0x56>
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	2a 95       	dec	r18
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_Write+0x52>
 2c6:	28 2f       	mov	r18, r24
 2c8:	20 95       	com	r18
 2ca:	23 23       	and	r18, r19
 2cc:	2b bb       	out	0x1b, r18	; 27
         //if we want to apply 5V to the pin
         if (u8Data)
 2ce:	66 23       	and	r22, r22
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <DIO_Write+0x68>
 2d2:	44 c0       	rjmp	.+136    	; 0x35c <DIO_Write+0xf0>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTA_R,u8pin);
 2d4:	9b b3       	in	r25, 0x1b	; 27
 2d6:	89 2b       	or	r24, r25
 2d8:	8b bb       	out	0x1b, r24	; 27
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	08 95       	ret
         }
         break;

         case M_PORTB:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTB_R,u8pin);
 2de:	38 b3       	in	r19, 0x18	; 24
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_Write+0x7e>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	2a 95       	dec	r18
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_Write+0x7a>
 2ee:	28 2f       	mov	r18, r24
 2f0:	20 95       	com	r18
 2f2:	23 23       	and	r18, r19
 2f4:	28 bb       	out	0x18, r18	; 24
         //if we want to apply 5V to the pin
         if (u8Data)
 2f6:	66 23       	and	r22, r22
 2f8:	99 f1       	breq	.+102    	; 0x360 <DIO_Write+0xf4>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTB_R,u8pin);
 2fa:	98 b3       	in	r25, 0x18	; 24
 2fc:	89 2b       	or	r24, r25
 2fe:	88 bb       	out	0x18, r24	; 24
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	08 95       	ret
         }
         break;

         case M_PORTC:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTC_R,u8pin);
 304:	35 b3       	in	r19, 0x15	; 21
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_Write+0xa4>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	2a 95       	dec	r18
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_Write+0xa0>
 314:	28 2f       	mov	r18, r24
 316:	20 95       	com	r18
 318:	23 23       	and	r18, r19
 31a:	25 bb       	out	0x15, r18	; 21
         //if we want to apply 5V to the pin
         if (u8Data)
 31c:	66 23       	and	r22, r22
 31e:	11 f1       	breq	.+68     	; 0x364 <DIO_Write+0xf8>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTC_R,u8pin);
 320:	95 b3       	in	r25, 0x15	; 21
 322:	89 2b       	or	r24, r25
 324:	85 bb       	out	0x15, r24	; 21
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	08 95       	ret
         }
         break;

         case M_PORTD:
         //clear the pin's equivalent bit in the PORTx Register
         CLR_BIT(PORTD_R,u8pin);
 32a:	32 b3       	in	r19, 0x12	; 18
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_Write+0xca>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	2a 95       	dec	r18
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_Write+0xc6>
 33a:	28 2f       	mov	r18, r24
 33c:	20 95       	com	r18
 33e:	23 23       	and	r18, r19
 340:	22 bb       	out	0x12, r18	; 18
         //if we want to apply 5V to the pin
         if (u8Data)
 342:	66 23       	and	r22, r22
 344:	89 f0       	breq	.+34     	; 0x368 <DIO_Write+0xfc>
         {
            //set the pin's equivalent bit in the PORTx Register
            SET_BIT(PORTD_R,u8pin);
 346:	92 b3       	in	r25, 0x12	; 18
 348:	89 2b       	or	r24, r25
 34a:	82 bb       	out	0x12, r24	; 18
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret
   
   //if port number is invalid or the pin is set as input
   if(u8port >= DIO_PORT_NO || astrDIOConfigParameters[u8GroupId].enuPinDir == INPUT)
   {
      //return error status
      return ERROR;
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	08 95       	ret
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	08 95       	ret
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	08 95       	ret
 368:	81 e0       	ldi	r24, 0x01	; 1
}
 36a:	08 95       	ret

0000036c <SPI_Init>:
   SPDR_R= *pu8Data;
   while (!GET_BIT(SPSR_R,SPIF_B));
   *pu8Data=SPDR_R;
   DIO_Write(SPI_SS0,HIGH);
   return SUCCESS;
}
 36c:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_Init>
 370:	8d b1       	in	r24, 0x0d	; 13
 372:	80 61       	ori	r24, 0x10	; 16
 374:	8d b9       	out	0x0d, r24	; 13
 376:	8d b1       	in	r24, 0x0d	; 13
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	8d b9       	out	0x0d, r24	; 13
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	08 95       	ret

00000380 <SPI_SendData>:
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_Write>
 38c:	cf b9       	out	0x0f, r28	; 15
 38e:	77 9b       	sbis	0x0e, 7	; 14
 390:	fe cf       	rjmp	.-4      	; 0x38e <SPI_SendData+0xe>
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_Write>
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	cf 91       	pop	r28
 39e:	08 95       	ret

000003a0 <SPI_SendString>:
}

#endif

 enuErrorStatus_t SPI_SendString(uint8_t *pu8Data)
 {
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	8c 01       	movw	r16, r24
     uint8_t u8i;
     //loop on the string
     for (u8i=0;pu8Data[u8i];u8i++)
 3a8:	c0 e0       	ldi	r28, 0x00	; 0
 3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <SPI_SendString+0x12>
     {
        //send each character independently
        SPI_SendData(*(pu8Data+u8i));
 3ac:	0e 94 c0 01 	call	0x380	; 0x380 <SPI_SendData>

 enuErrorStatus_t SPI_SendString(uint8_t *pu8Data)
 {
     uint8_t u8i;
     //loop on the string
     for (u8i=0;pu8Data[u8i];u8i++)
 3b0:	cf 5f       	subi	r28, 0xFF	; 255
 3b2:	f8 01       	movw	r30, r16
 3b4:	ec 0f       	add	r30, r28
 3b6:	f1 1d       	adc	r31, r1
 3b8:	80 81       	ld	r24, Z
 3ba:	81 11       	cpse	r24, r1
 3bc:	f7 cf       	rjmp	.-18     	; 0x3ac <SPI_SendString+0xc>
     {
        //send each character independently
        SPI_SendData(*(pu8Data+u8i));
     }
     //send termination characters when done
     SPI_SendData(0);
 3be:	0e 94 c0 01 	call	0x380	; 0x380 <SPI_SendData>
     
     return SUCCESS;
 }
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret

000003cc <UART_Init>:
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	1f 92       	push	r1
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	19 82       	std	Y+1, r1	; 0x01
 3d8:	10 bc       	out	0x20, r1	; 32
 3da:	83 e3       	ldi	r24, 0x33	; 51
 3dc:	89 b9       	out	0x09, r24	; 9
 3de:	8a b1       	in	r24, 0x0a	; 10
 3e0:	88 60       	ori	r24, 0x08	; 8
 3e2:	8a b9       	out	0x0a, r24	; 10
 3e4:	8a b1       	in	r24, 0x0a	; 10
 3e6:	80 61       	ori	r24, 0x10	; 16
 3e8:	8a b9       	out	0x0a, r24	; 10
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	82 60       	ori	r24, 0x02	; 2
 3ee:	89 83       	std	Y+1, r24	; 0x01
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	84 60       	ori	r24, 0x04	; 4
 3f4:	89 83       	std	Y+1, r24	; 0x01
 3f6:	8a b1       	in	r24, 0x0a	; 10
 3f8:	8b 7f       	andi	r24, 0xFB	; 251
 3fa:	8a b9       	out	0x0a, r24	; 10
 3fc:	89 81       	ldd	r24, Y+1	; 0x01
 3fe:	80 62       	ori	r24, 0x20	; 32
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	80 b5       	in	r24, 0x20	; 32
 404:	80 68       	ori	r24, 0x80	; 128
 406:	80 bd       	out	0x20, r24	; 32
 408:	99 81       	ldd	r25, Y+1	; 0x01
 40a:	80 b5       	in	r24, 0x20	; 32
 40c:	89 2b       	or	r24, r25
 40e:	80 bd       	out	0x20, r24	; 32
 410:	80 b5       	in	r24, 0x20	; 32
 412:	8f 77       	andi	r24, 0x7F	; 127
 414:	80 bd       	out	0x20, r24	; 32
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	0f 90       	pop	r0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <UART_ReceiveData>:
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	61 f0       	breq	.+24     	; 0x43c <UART_ReceiveData+0x1c>
 424:	fc 01       	movw	r30, r24
 426:	11 82       	std	Z+1, r1	; 0x01
 428:	10 82       	st	Z, r1
 42a:	5f 9b       	sbis	0x0b, 7	; 11
 42c:	fe cf       	rjmp	.-4      	; 0x42a <UART_ReceiveData+0xa>
 42e:	2c b1       	in	r18, 0x0c	; 12
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	fc 01       	movw	r30, r24
 434:	31 83       	std	Z+1, r19	; 0x01
 436:	20 83       	st	Z, r18
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	08 95       	ret
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	08 95       	ret

00000440 <UART_ReceiveString>:
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	8c 01       	movw	r16, r24
 44e:	d6 2f       	mov	r29, r22
 450:	c0 e0       	ldi	r28, 0x00	; 0
 452:	0d c0       	rjmp	.+26     	; 0x46e <UART_ReceiveString+0x2e>
 454:	78 01       	movw	r14, r16
 456:	ec 0e       	add	r14, r28
 458:	f1 1c       	adc	r15, r1
 45a:	c7 01       	movw	r24, r14
 45c:	0e 94 10 02 	call	0x420	; 0x420 <UART_ReceiveData>
 460:	f7 01       	movw	r30, r14
 462:	80 81       	ld	r24, Z
 464:	8d 30       	cpi	r24, 0x0D	; 13
 466:	59 f0       	breq	.+22     	; 0x47e <UART_ReceiveString+0x3e>
 468:	8a 30       	cpi	r24, 0x0A	; 10
 46a:	49 f0       	breq	.+18     	; 0x47e <UART_ReceiveString+0x3e>
 46c:	cf 5f       	subi	r28, 0xFF	; 255
 46e:	2c 2f       	mov	r18, r28
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	8d 2f       	mov	r24, r29
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	28 17       	cp	r18, r24
 47a:	39 07       	cpc	r19, r25
 47c:	5c f3       	brlt	.-42     	; 0x454 <UART_ReceiveString+0x14>
 47e:	f8 01       	movw	r30, r16
 480:	ec 0f       	add	r30, r28
 482:	f1 1d       	adc	r31, r1
 484:	10 82       	st	Z, r1
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	1f 91       	pop	r17
 48e:	0f 91       	pop	r16
 490:	ff 90       	pop	r15
 492:	ef 90       	pop	r14
 494:	08 95       	ret

00000496 <_exit>:
 496:	f8 94       	cli

00000498 <__stop_program>:
 498:	ff cf       	rjmp	.-2      	; 0x498 <__stop_program>
