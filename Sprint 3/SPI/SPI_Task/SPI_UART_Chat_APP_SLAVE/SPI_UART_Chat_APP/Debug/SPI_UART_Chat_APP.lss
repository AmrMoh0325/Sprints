
SPI_UART_Chat_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000036e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb3  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000970  00000000  00000000  0000150f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084a  00000000  00000000  00001e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  000026cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000556  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000847  00000000  00000000  00002e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000364d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "DataTypes.h"
#include "MCAL/SPI/SPI.h"
#include "MCAL/UART/UART.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	cf 5f       	subi	r28, 0xFF	; 255
  8c:	d1 09       	sbc	r29, r1
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
   uint8_t Send_Buffer[255]={0};
  98:	fe 01       	movw	r30, r28
  9a:	31 96       	adiw	r30, 0x01	; 1
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	df 01       	movw	r26, r30
  a0:	1d 92       	st	X+, r1
  a2:	8a 95       	dec	r24
  a4:	e9 f7       	brne	.-6      	; 0xa0 <main+0x1e>
   UART_Init();
  a6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <UART_Init>
   SPI_Init();
  aa:	0e 94 36 01 	call	0x26c	; 0x26c <SPI_Init>
    /* Replace with your application code */
    while (1) 
    {
       SPI_ReceiveString(Send_Buffer,255);
  ae:	6f ef       	ldi	r22, 0xFF	; 255
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 44 01 	call	0x288	; 0x288 <SPI_ReceiveString>
       UART_SendString(Send_Buffer);
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 98 01 	call	0x330	; 0x330 <UART_SendString>
  c0:	f6 cf       	rjmp	.-20     	; 0xae <main+0x2c>

000000c2 <DIO_Init>:
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	cc c0       	rjmp	.+408    	; 0x25e <DIO_Init+0x19c>
   {
      //calculate the port and pin number for each pin
      u8port=astrDIOConfigParameters[u8i].enuPinNo / DIO_PINS_NO;
  c6:	84 2f       	mov	r24, r20
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e8 0f       	add	r30, r24
  d2:	f9 1f       	adc	r31, r25
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	20 81       	ld	r18, Z
  da:	32 2f       	mov	r19, r18
  dc:	36 95       	lsr	r19
  de:	36 95       	lsr	r19
  e0:	36 95       	lsr	r19
      u8pin=astrDIOConfigParameters[u8i].enuPinNo  % DIO_PINS_NO;
  e2:	27 70       	andi	r18, 0x07	; 7
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
  e4:	34 30       	cpi	r19, 0x04	; 4
  e6:	08 f0       	brcs	.+2      	; 0xea <DIO_Init+0x28>
  e8:	bf c0       	rjmp	.+382    	; 0x268 <DIO_Init+0x1a6>
         //return FAIL
         return 0;
      }
      
      //decide which port are we working with
      switch (u8port)
  ea:	31 30       	cpi	r19, 0x01	; 1
  ec:	a1 f1       	breq	.+104    	; 0x156 <DIO_Init+0x94>
  ee:	38 f0       	brcs	.+14     	; 0xfe <DIO_Init+0x3c>
  f0:	32 30       	cpi	r19, 0x02	; 2
  f2:	09 f4       	brne	.+2      	; 0xf6 <DIO_Init+0x34>
  f4:	5c c0       	rjmp	.+184    	; 0x1ae <DIO_Init+0xec>
  f6:	33 30       	cpi	r19, 0x03	; 3
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_Init+0x3a>
  fa:	84 c0       	rjmp	.+264    	; 0x204 <DIO_Init+0x142>
  fc:	af c0       	rjmp	.+350    	; 0x25c <DIO_Init+0x19a>
      {
         case M_PORTA:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRA_R,u8pin);
  fe:	3a b3       	in	r19, 0x1a	; 26
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_Init+0x48>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	2a 95       	dec	r18
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_Init+0x44>
 10e:	26 2f       	mov	r18, r22
 110:	20 95       	com	r18
 112:	32 23       	and	r19, r18
 114:	3a bb       	out	0x1a, r19	; 26
         CLR_BIT(PORTA_R,u8pin);
 116:	3b b3       	in	r19, 0x1b	; 27
 118:	23 23       	and	r18, r19
 11a:	2b bb       	out	0x1b, r18	; 27
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 11c:	fc 01       	movw	r30, r24
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	e8 0f       	add	r30, r24
 124:	f9 1f       	adc	r31, r25
 126:	e0 5a       	subi	r30, 0xA0	; 160
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	21 81       	ldd	r18, Z+1	; 0x01
 12c:	22 23       	and	r18, r18
 12e:	19 f0       	breq	.+6      	; 0x136 <DIO_Init+0x74>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRA_R,u8pin);
 130:	2a b3       	in	r18, 0x1a	; 26
 132:	26 2b       	or	r18, r22
 134:	2a bb       	out	0x1a, r18	; 26
         }

         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 136:	fc 01       	movw	r30, r24
 138:	ee 0f       	add	r30, r30
 13a:	ff 1f       	adc	r31, r31
 13c:	8e 0f       	add	r24, r30
 13e:	9f 1f       	adc	r25, r31
 140:	fc 01       	movw	r30, r24
 142:	e0 5a       	subi	r30, 0xA0	; 160
 144:	ff 4f       	sbci	r31, 0xFF	; 255
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	88 23       	and	r24, r24
 14a:	09 f4       	brne	.+2      	; 0x14e <DIO_Init+0x8c>
 14c:	87 c0       	rjmp	.+270    	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTA_R,u8pin);
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	68 2b       	or	r22, r24
 152:	6b bb       	out	0x1b, r22	; 27
 154:	83 c0       	rjmp	.+262    	; 0x25c <DIO_Init+0x19a>
         }
         break;

         case M_PORTB:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRB_R,u8pin);
 156:	37 b3       	in	r19, 0x17	; 23
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_Init+0xa0>
 15e:	66 0f       	add	r22, r22
 160:	77 1f       	adc	r23, r23
 162:	2a 95       	dec	r18
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_Init+0x9c>
 166:	26 2f       	mov	r18, r22
 168:	20 95       	com	r18
 16a:	32 23       	and	r19, r18
 16c:	37 bb       	out	0x17, r19	; 23
         CLR_BIT(PORTB_R,u8pin);
 16e:	38 b3       	in	r19, 0x18	; 24
 170:	23 23       	and	r18, r19
 172:	28 bb       	out	0x18, r18	; 24
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 174:	fc 01       	movw	r30, r24
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	e8 0f       	add	r30, r24
 17c:	f9 1f       	adc	r31, r25
 17e:	e0 5a       	subi	r30, 0xA0	; 160
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	21 81       	ldd	r18, Z+1	; 0x01
 184:	22 23       	and	r18, r18
 186:	19 f0       	breq	.+6      	; 0x18e <DIO_Init+0xcc>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRB_R,u8pin);
 188:	27 b3       	in	r18, 0x17	; 23
 18a:	26 2b       	or	r18, r22
 18c:	27 bb       	out	0x17, r18	; 23
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 18e:	fc 01       	movw	r30, r24
 190:	ee 0f       	add	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	8e 0f       	add	r24, r30
 196:	9f 1f       	adc	r25, r31
 198:	fc 01       	movw	r30, r24
 19a:	e0 5a       	subi	r30, 0xA0	; 160
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	82 81       	ldd	r24, Z+2	; 0x02
 1a0:	88 23       	and	r24, r24
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <DIO_Init+0xe4>
 1a4:	5b c0       	rjmp	.+182    	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTB_R,u8pin);
 1a6:	88 b3       	in	r24, 0x18	; 24
 1a8:	68 2b       	or	r22, r24
 1aa:	68 bb       	out	0x18, r22	; 24
 1ac:	57 c0       	rjmp	.+174    	; 0x25c <DIO_Init+0x19a>
         }
         break;

         case M_PORTC:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRC_R,u8pin);
 1ae:	34 b3       	in	r19, 0x14	; 20
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_Init+0xf8>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	2a 95       	dec	r18
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_Init+0xf4>
 1be:	26 2f       	mov	r18, r22
 1c0:	20 95       	com	r18
 1c2:	32 23       	and	r19, r18
 1c4:	34 bb       	out	0x14, r19	; 20
         CLR_BIT(PORTC_R,u8pin);
 1c6:	35 b3       	in	r19, 0x15	; 21
 1c8:	23 23       	and	r18, r19
 1ca:	25 bb       	out	0x15, r18	; 21
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 1cc:	fc 01       	movw	r30, r24
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e8 0f       	add	r30, r24
 1d4:	f9 1f       	adc	r31, r25
 1d6:	e0 5a       	subi	r30, 0xA0	; 160
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	21 81       	ldd	r18, Z+1	; 0x01
 1dc:	22 23       	and	r18, r18
 1de:	19 f0       	breq	.+6      	; 0x1e6 <DIO_Init+0x124>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRC_R,u8pin);
 1e0:	24 b3       	in	r18, 0x14	; 20
 1e2:	26 2b       	or	r18, r22
 1e4:	24 bb       	out	0x14, r18	; 20
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 1e6:	fc 01       	movw	r30, r24
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	8e 0f       	add	r24, r30
 1ee:	9f 1f       	adc	r25, r31
 1f0:	fc 01       	movw	r30, r24
 1f2:	e0 5a       	subi	r30, 0xA0	; 160
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	88 23       	and	r24, r24
 1fa:	81 f1       	breq	.+96     	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTC_R,u8pin);
 1fc:	85 b3       	in	r24, 0x15	; 21
 1fe:	68 2b       	or	r22, r24
 200:	65 bb       	out	0x15, r22	; 21
 202:	2c c0       	rjmp	.+88     	; 0x25c <DIO_Init+0x19a>
         }
         break;

         case M_PORTD:
         //clear the pin bit in the DDRx and PORTx registers of each port
         CLR_BIT(DDRD_R,u8pin);
 204:	61 b3       	in	r22, 0x11	; 17
 206:	e1 e0       	ldi	r30, 0x01	; 1
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	df 01       	movw	r26, r30
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_Init+0x150>
 20e:	aa 0f       	add	r26, r26
 210:	bb 1f       	adc	r27, r27
 212:	2a 95       	dec	r18
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_Init+0x14c>
 216:	9d 01       	movw	r18, r26
 218:	5a 2f       	mov	r21, r26
 21a:	50 95       	com	r21
 21c:	65 23       	and	r22, r21
 21e:	61 bb       	out	0x11, r22	; 17
         CLR_BIT(PORTD_R,u8pin);
 220:	62 b3       	in	r22, 0x12	; 18
 222:	56 23       	and	r21, r22
 224:	52 bb       	out	0x12, r21	; 18
         //if the pin is set as output
         if(astrDIOConfigParameters[u8i].enuPinDir)
 226:	fc 01       	movw	r30, r24
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	e8 0f       	add	r30, r24
 22e:	f9 1f       	adc	r31, r25
 230:	e0 5a       	subi	r30, 0xA0	; 160
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	51 81       	ldd	r21, Z+1	; 0x01
 236:	55 23       	and	r21, r21
 238:	19 f0       	breq	.+6      	; 0x240 <DIO_Init+0x17e>
         {
            //set its equivalent bit in the DDRx register
            SET_BIT(DDRD_R,u8pin);
 23a:	51 b3       	in	r21, 0x11	; 17
 23c:	5a 2b       	or	r21, r26
 23e:	51 bb       	out	0x11, r21	; 17
         }
         // check if the pins pullup resistor will be used
         if (astrDIOConfigParameters[u8i].enuPullupResEn)
 240:	fc 01       	movw	r30, r24
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	8e 0f       	add	r24, r30
 248:	9f 1f       	adc	r25, r31
 24a:	fc 01       	movw	r30, r24
 24c:	e0 5a       	subi	r30, 0xA0	; 160
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	82 81       	ldd	r24, Z+2	; 0x02
 252:	88 23       	and	r24, r24
 254:	19 f0       	breq	.+6      	; 0x25c <DIO_Init+0x19a>
         {
            //if so, set it's equivalent bit in the PORTx register
            SET_BIT(PORTD_R,u8pin);
 256:	82 b3       	in	r24, 0x12	; 18
 258:	28 2b       	or	r18, r24
 25a:	22 bb       	out	0x12, r18	; 18
enuErrorStatus_t DIO_Init(void)
{
   uint8_t u8i;
   uint8_t u8port,u8pin;
   //traverse the array of pins the user have used
   for (u8i=0;u8i<DIO_GROUPS_NO;u8i++)
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	44 30       	cpi	r20, 0x04	; 4
 260:	08 f4       	brcc	.+2      	; 0x264 <DIO_Init+0x1a2>
 262:	31 cf       	rjmp	.-414    	; 0xc6 <DIO_Init+0x4>
         }
         break;
      }
   }
   //return success status
   return SUCCESS;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
      
      //if port number is invalid
      if (u8port>=DIO_PORT_NO)
      {
         //return FAIL
         return 0;
 268:	80 e0       	ldi	r24, 0x00	; 0
         break;
      }
   }
   //return success status
   return SUCCESS;
}
 26a:	08 95       	ret

0000026c <SPI_Init>:
   }
   //send termination characters when done
   SPI_SendData(0);
   
   return SUCCESS;
}
 26c:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_Init>
 270:	8d b1       	in	r24, 0x0d	; 13
 272:	80 64       	ori	r24, 0x40	; 64
 274:	8d b9       	out	0x0d, r24	; 13
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	08 95       	ret

0000027a <SPI_ReceiveData>:
 27a:	77 9b       	sbis	0x0e, 7	; 14
 27c:	fe cf       	rjmp	.-4      	; 0x27a <SPI_ReceiveData>
 27e:	2f b1       	in	r18, 0x0f	; 15
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret

00000288 <SPI_ReceiveString>:

enuErrorStatus_t SPI_ReceiveString(uint8_t *pu8Data,uint8_t u8bufferMaxSize)
{
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	8c 01       	movw	r16, r24
 296:	d6 2f       	mov	r29, r22
   uint8_t u8i;
   //traverse the string
   for (u8i=0; u8i<u8bufferMaxSize-1;u8i++)
 298:	c0 e0       	ldi	r28, 0x00	; 0
 29a:	0b c0       	rjmp	.+22     	; 0x2b2 <SPI_ReceiveString+0x2a>
   {
      //receive each character stored in the UDR and store it in the appropriate place in the string
      SPI_ReceiveData((pu8Data+u8i));
 29c:	78 01       	movw	r14, r16
 29e:	ec 0e       	add	r14, r28
 2a0:	f1 1c       	adc	r15, r1
 2a2:	c7 01       	movw	r24, r14
 2a4:	0e 94 3d 01 	call	0x27a	; 0x27a <SPI_ReceiveData>
      //if termination characters are detected end the communication
      if (*(pu8Data+u8i)==0)
 2a8:	f7 01       	movw	r30, r14
 2aa:	80 81       	ld	r24, Z
 2ac:	88 23       	and	r24, r24
 2ae:	49 f0       	breq	.+18     	; 0x2c2 <SPI_ReceiveString+0x3a>

enuErrorStatus_t SPI_ReceiveString(uint8_t *pu8Data,uint8_t u8bufferMaxSize)
{
   uint8_t u8i;
   //traverse the string
   for (u8i=0; u8i<u8bufferMaxSize-1;u8i++)
 2b0:	cf 5f       	subi	r28, 0xFF	; 255
 2b2:	2c 2f       	mov	r18, r28
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	8d 2f       	mov	r24, r29
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	28 17       	cp	r18, r24
 2be:	39 07       	cpc	r19, r25
 2c0:	6c f3       	brlt	.-38     	; 0x29c <SPI_ReceiveString+0x14>
         break;
      }
   }
   //end the string with null
   return SUCCESS;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	08 95       	ret

000002d2 <UART_Init>:
   }
   //end the string with null
   *(pu8String+u8i)=0;
   return SUCCESS;
   
}
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	1f 92       	push	r1
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	19 82       	std	Y+1, r1	; 0x01
 2de:	10 bc       	out	0x20, r1	; 32
 2e0:	83 e3       	ldi	r24, 0x33	; 51
 2e2:	89 b9       	out	0x09, r24	; 9
 2e4:	8a b1       	in	r24, 0x0a	; 10
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	8a b9       	out	0x0a, r24	; 10
 2ea:	8a b1       	in	r24, 0x0a	; 10
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	8a b9       	out	0x0a, r24	; 10
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	84 60       	ori	r24, 0x04	; 4
 2fa:	89 83       	std	Y+1, r24	; 0x01
 2fc:	8a b1       	in	r24, 0x0a	; 10
 2fe:	8b 7f       	andi	r24, 0xFB	; 251
 300:	8a b9       	out	0x0a, r24	; 10
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	80 62       	ori	r24, 0x20	; 32
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	80 b5       	in	r24, 0x20	; 32
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	80 bd       	out	0x20, r24	; 32
 30e:	99 81       	ldd	r25, Y+1	; 0x01
 310:	80 b5       	in	r24, 0x20	; 32
 312:	89 2b       	or	r24, r25
 314:	80 bd       	out	0x20, r24	; 32
 316:	80 b5       	in	r24, 0x20	; 32
 318:	8f 77       	andi	r24, 0x7F	; 127
 31a:	80 bd       	out	0x20, r24	; 32
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	0f 90       	pop	r0
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <UART_SendData>:
 326:	5d 9b       	sbis	0x0b, 5	; 11
 328:	fe cf       	rjmp	.-4      	; 0x326 <UART_SendData>
 32a:	8c b9       	out	0x0c, r24	; 12
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret

00000330 <UART_SendString>:
* Parameters (out): enuErrorStatus_t
* Return value: 1=SUCCESS or 0=FAIL
* Description: A function to send a string using uart
************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	8c 01       	movw	r16, r24
   uint8_t u8i;
   //loop on the string
   for (u8i=0;pu8String[u8i];u8i++)
 338:	c0 e0       	ldi	r28, 0x00	; 0
 33a:	04 c0       	rjmp	.+8      	; 0x344 <UART_SendString+0x14>
   {
      //send each character independently
      UART_SendData(*(pu8String+u8i));
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 93 01 	call	0x326	; 0x326 <UART_SendData>
************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
   uint8_t u8i;
   //loop on the string
   for (u8i=0;pu8String[u8i];u8i++)
 342:	cf 5f       	subi	r28, 0xFF	; 255
 344:	f8 01       	movw	r30, r16
 346:	ec 0f       	add	r30, r28
 348:	f1 1d       	adc	r31, r1
 34a:	80 81       	ld	r24, Z
 34c:	81 11       	cpse	r24, r1
 34e:	f6 cf       	rjmp	.-20     	; 0x33c <UART_SendString+0xc>
   {
      //send each character independently
      UART_SendData(*(pu8String+u8i));
   }
   //send termination characters when done
   UART_SendData('\r');
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 93 01 	call	0x326	; 0x326 <UART_SendData>
   UART_SendData('\n');
 358:	8a e0       	ldi	r24, 0x0A	; 10
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 93 01 	call	0x326	; 0x326 <UART_SendData>
   
   return SUCCESS;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	0f 91       	pop	r16
 368:	08 95       	ret

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
