
Terminal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002be  00800060  000023ca  0000245e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000435  0080031e  0080031e  0000271c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e92  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000149f  00000000  00000000  00007a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002689  00000000  00000000  00008ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b20  00000000  00000000  0000b558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001664  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f34  00000000  00000000  0000d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_1>
       8:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__vector_2>
       c:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_3>
      10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      14:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      34:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__vector_13>
      38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      3c:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__vector_15>
      40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      48:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      4c:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__vector_19>
      50:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      54:	66 06       	cpc	r6, r22
      56:	86 06       	cpc	r8, r22
      58:	68 06       	cpc	r6, r24
      5a:	6a 06       	cpc	r6, r26
      5c:	6e 06       	cpc	r6, r30
      5e:	70 06       	cpc	r7, r16
      60:	72 06       	cpc	r7, r18
      62:	76 06       	cpc	r7, r22
      64:	78 06       	cpc	r7, r24
      66:	7a 06       	cpc	r7, r26
      68:	7e 06       	cpc	r7, r30
      6a:	80 06       	cpc	r8, r16
      6c:	82 06       	cpc	r8, r18

0000006e <__trampolines_end>:
      6e:	4e 41       	sbci	r20, 0x1E	; 30
      70:	4e 49       	Address 0x00000070 is out of bounds.
.word	0xffff	; ????

00000071 <pstr_inity>:
      71:	49 4e 49 54 59                                      INITY

00000076 <pstr_inf>:
      76:	49 4e 46                                            INF

00000079 <pwr_m10>:
      79:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      89:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000091 <pwr_p10>:
      91:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      a1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	13 e0       	ldi	r17, 0x03	; 3
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	ea ec       	ldi	r30, 0xCA	; 202
      be:	f3 e2       	ldi	r31, 0x23	; 35
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ae 31       	cpi	r26, 0x1E	; 30
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	ae e1       	ldi	r26, 0x1E	; 30
      d0:	b3 e0       	ldi	r27, 0x03	; 3
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a3 35       	cpi	r26, 0x53	; 83
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
      dc:	0e 94 2f 09 	call	0x125e	; 0x125e <main>
      e0:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <_exit>

000000e4 <__bad_interrupt>:
      e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e8 <String_compare>:
* Parameters (out): sint8_t
* Return value: 0= if strings are identical -- 1=str1>str2 -- -1=str1<str2
* Description: A function to compare two strings
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2,uint16_t num)
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	dc 01       	movw	r26, r24
      ee:	ea 01       	movw	r28, r20
   uint16_t u16i;
   //Traverse both strings
   for(u16i=0;((str1[u16i] || str2[u16i]) && (u16i<num));u16i++)
      f0:	20 e0       	ldi	r18, 0x00	; 0
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	0a c0       	rjmp	.+20     	; 0x10a <String_compare+0x22>
   {
      // look for any difference
      if      (str1[u16i] < str2[u16i])     return -1;
      f6:	fb 01       	movw	r30, r22
      f8:	e2 0f       	add	r30, r18
      fa:	f3 1f       	adc	r31, r19
      fc:	50 81       	ld	r21, Z
      fe:	95 17       	cp	r25, r21
     100:	a8 f0       	brcs	.+42     	; 0x12c <String_compare+0x44>
      else if (str1[u16i] > str2[u16i])     return 1;
     102:	59 17       	cp	r21, r25
     104:	a8 f0       	brcs	.+42     	; 0x130 <String_compare+0x48>
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2,uint16_t num)
{
   uint16_t u16i;
   //Traverse both strings
   for(u16i=0;((str1[u16i] || str2[u16i]) && (u16i<num));u16i++)
     106:	2f 5f       	subi	r18, 0xFF	; 255
     108:	3f 4f       	sbci	r19, 0xFF	; 255
     10a:	fd 01       	movw	r30, r26
     10c:	e2 0f       	add	r30, r18
     10e:	f3 1f       	adc	r31, r19
     110:	90 81       	ld	r25, Z
     112:	91 11       	cpse	r25, r1
     114:	06 c0       	rjmp	.+12     	; 0x122 <String_compare+0x3a>
     116:	fb 01       	movw	r30, r22
     118:	e2 0f       	add	r30, r18
     11a:	f3 1f       	adc	r31, r19
     11c:	80 81       	ld	r24, Z
     11e:	88 23       	and	r24, r24
     120:	49 f0       	breq	.+18     	; 0x134 <String_compare+0x4c>
     122:	2c 17       	cp	r18, r28
     124:	3d 07       	cpc	r19, r29
     126:	38 f3       	brcs	.-50     	; 0xf6 <String_compare+0xe>
   {
      // look for any difference
      if      (str1[u16i] < str2[u16i])     return -1;
      else if (str1[u16i] > str2[u16i])     return 1;
   }
   return 0;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	05 c0       	rjmp	.+10     	; 0x136 <String_compare+0x4e>
   uint16_t u16i;
   //Traverse both strings
   for(u16i=0;((str1[u16i] || str2[u16i]) && (u16i<num));u16i++)
   {
      // look for any difference
      if      (str1[u16i] < str2[u16i])     return -1;
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	03 c0       	rjmp	.+6      	; 0x136 <String_compare+0x4e>
      else if (str1[u16i] > str2[u16i])     return 1;
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	01 c0       	rjmp	.+2      	; 0x136 <String_compare+0x4e>
   }
   return 0;
     134:	80 e0       	ldi	r24, 0x00	; 0
}
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <APP_Delay>:
	}
}


static void APP_Delay(void)
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	00 d0       	rcall	.+0      	; 0x142 <APP_Delay+0x6>
     142:	00 d0       	rcall	.+0      	; 0x144 <APP_Delay+0x8>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32DelayValue;
	for(u32DelayValue = 0; u32DelayValue < 250000; u32DelayValue++);
     148:	19 82       	std	Y+1, r1	; 0x01
     14a:	1a 82       	std	Y+2, r1	; 0x02
     14c:	1b 82       	std	Y+3, r1	; 0x03
     14e:	1c 82       	std	Y+4, r1	; 0x04
     150:	0b c0       	rjmp	.+22     	; 0x168 <APP_Delay+0x2c>
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	ab 81       	ldd	r26, Y+3	; 0x03
     158:	bc 81       	ldd	r27, Y+4	; 0x04
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	a1 1d       	adc	r26, r1
     15e:	b1 1d       	adc	r27, r1
     160:	89 83       	std	Y+1, r24	; 0x01
     162:	9a 83       	std	Y+2, r25	; 0x02
     164:	ab 83       	std	Y+3, r26	; 0x03
     166:	bc 83       	std	Y+4, r27	; 0x04
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	ab 81       	ldd	r26, Y+3	; 0x03
     16e:	bc 81       	ldd	r27, Y+4	; 0x04
     170:	80 39       	cpi	r24, 0x90	; 144
     172:	90 4d       	sbci	r25, 0xD0	; 208
     174:	a3 40       	sbci	r26, 0x03	; 3
     176:	b1 05       	cpc	r27, r1
     178:	60 f3       	brcs	.-40     	; 0x152 <APP_Delay+0x16>
}
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <doubletostr>:

static void doubletostr (double num,char *str, int precision)
{
     188:	2f 92       	push	r2
     18a:	3f 92       	push	r3
     18c:	4f 92       	push	r4
     18e:	5f 92       	push	r5
     190:	6f 92       	push	r6
     192:	7f 92       	push	r7
     194:	8f 92       	push	r8
     196:	9f 92       	push	r9
     198:	af 92       	push	r10
     19a:	bf 92       	push	r11
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	2b 01       	movw	r4, r22
     1ae:	3c 01       	movw	r6, r24
     1b0:	6a 01       	movw	r12, r20
     1b2:	79 01       	movw	r14, r18
    int int_exponent=1,frac_exponent=1;

    for (int temp=num/10;temp;temp/=10)
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	40 e2       	ldi	r20, 0x20	; 32
     1ba:	51 e4       	ldi	r21, 0x41	; 65
     1bc:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__divsf3>
     1c0:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fixsfsi>
	for(u32DelayValue = 0; u32DelayValue < 250000; u32DelayValue++);
}

static void doubletostr (double num,char *str, int precision)
{
    int int_exponent=1,frac_exponent=1;
     1c4:	c1 e0       	ldi	r28, 0x01	; 1
     1c6:	d0 e0       	ldi	r29, 0x00	; 0

    for (int temp=num/10;temp;temp/=10)
     1c8:	10 c0       	rjmp	.+32     	; 0x1ea <doubletostr+0x62>
    {
        int_exponent*=10;
     1ca:	ce 01       	movw	r24, r28
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	cc 0f       	add	r28, r28
     1d2:	dd 1f       	adc	r29, r29
     1d4:	cc 0f       	add	r28, r28
     1d6:	dd 1f       	adc	r29, r29
     1d8:	cc 0f       	add	r28, r28
     1da:	dd 1f       	adc	r29, r29
     1dc:	c8 0f       	add	r28, r24
     1de:	d9 1f       	adc	r29, r25

static void doubletostr (double num,char *str, int precision)
{
    int int_exponent=1,frac_exponent=1;

    for (int temp=num/10;temp;temp/=10)
     1e0:	cb 01       	movw	r24, r22
     1e2:	6a e0       	ldi	r22, 0x0A	; 10
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__divmodhi4>
     1ea:	61 15       	cp	r22, r1
     1ec:	71 05       	cpc	r23, r1
     1ee:	69 f7       	brne	.-38     	; 0x1ca <doubletostr+0x42>
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	01 e0       	ldi	r16, 0x01	; 1
     1f6:	10 e0       	ldi	r17, 0x00	; 0
     1f8:	0c c0       	rjmp	.+24     	; 0x212 <doubletostr+0x8a>
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
    {
        frac_exponent*=10;
     1fa:	98 01       	movw	r18, r16
     1fc:	22 0f       	add	r18, r18
     1fe:	33 1f       	adc	r19, r19
     200:	00 0f       	add	r16, r16
     202:	11 1f       	adc	r17, r17
     204:	00 0f       	add	r16, r16
     206:	11 1f       	adc	r17, r17
     208:	00 0f       	add	r16, r16
     20a:	11 1f       	adc	r17, r17
     20c:	02 0f       	add	r16, r18
     20e:	13 1f       	adc	r17, r19

    for (int temp=num/10;temp;temp/=10)
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	8e 15       	cp	r24, r14
     214:	9f 05       	cpc	r25, r15
     216:	8c f3       	brlt	.-30     	; 0x1fa <doubletostr+0x72>
    {
        frac_exponent*=10;
    }
    long int integer=num;
     218:	c3 01       	movw	r24, r6
     21a:	b2 01       	movw	r22, r4
     21c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fixsfsi>
     220:	4b 01       	movw	r8, r22
     222:	5c 01       	movw	r10, r24
    long int fraction=(num-integer)*frac_exponent;
     224:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__floatsisf>
     228:	9b 01       	movw	r18, r22
     22a:	ac 01       	movw	r20, r24
     22c:	c3 01       	movw	r24, r6
     22e:	b2 01       	movw	r22, r4
     230:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
     234:	2b 01       	movw	r4, r22
     236:	3c 01       	movw	r6, r24
     238:	b8 01       	movw	r22, r16
     23a:	01 2e       	mov	r0, r17
     23c:	00 0c       	add	r0, r0
     23e:	88 0b       	sbc	r24, r24
     240:	99 0b       	sbc	r25, r25
     242:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__floatsisf>
     246:	a3 01       	movw	r20, r6
     248:	92 01       	movw	r18, r4
     24a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__mulsf3>
     24e:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <__fixsfsi>
     252:	2b 01       	movw	r4, r22
     254:	3c 01       	movw	r6, r24
    int i=0;
    for(i=0;int_exponent;i++)
     256:	e1 2c       	mov	r14, r1
     258:	f1 2c       	mov	r15, r1
     25a:	20 c0       	rjmp	.+64     	; 0x29c <doubletostr+0x114>
    {
        str[i]=((integer/int_exponent)%10)+'0';
     25c:	16 01       	movw	r2, r12
     25e:	2e 0c       	add	r2, r14
     260:	3f 1c       	adc	r3, r15
     262:	9e 01       	movw	r18, r28
     264:	0d 2e       	mov	r0, r29
     266:	00 0c       	add	r0, r0
     268:	44 0b       	sbc	r20, r20
     26a:	55 0b       	sbc	r21, r21
     26c:	c5 01       	movw	r24, r10
     26e:	b4 01       	movw	r22, r8
     270:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__divmodsi4>
     274:	ca 01       	movw	r24, r20
     276:	b9 01       	movw	r22, r18
     278:	2a e0       	ldi	r18, 0x0A	; 10
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__divmodsi4>
     284:	60 5d       	subi	r22, 0xD0	; 208
     286:	f1 01       	movw	r30, r2
     288:	60 83       	st	Z, r22
        int_exponent/=10;
     28a:	ce 01       	movw	r24, r28
     28c:	6a e0       	ldi	r22, 0x0A	; 10
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__divmodhi4>
     294:	eb 01       	movw	r28, r22
        frac_exponent*=10;
    }
    long int integer=num;
    long int fraction=(num-integer)*frac_exponent;
    int i=0;
    for(i=0;int_exponent;i++)
     296:	ff ef       	ldi	r31, 0xFF	; 255
     298:	ef 1a       	sub	r14, r31
     29a:	ff 0a       	sbc	r15, r31
     29c:	20 97       	sbiw	r28, 0x00	; 0
     29e:	f1 f6       	brne	.-68     	; 0x25c <doubletostr+0xd4>
    {
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
     2a0:	e7 01       	movw	r28, r14
     2a2:	21 96       	adiw	r28, 0x01	; 1
     2a4:	f6 01       	movw	r30, r12
     2a6:	ee 0d       	add	r30, r14
     2a8:	ff 1d       	adc	r31, r15
     2aa:	8e e2       	ldi	r24, 0x2E	; 46
     2ac:	80 83       	st	Z, r24
    frac_exponent/=10;
     2ae:	c8 01       	movw	r24, r16
     2b0:	6a e0       	ldi	r22, 0x0A	; 10
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__divmodhi4>
     2b8:	8b 01       	movw	r16, r22
    for(;frac_exponent;i++)
     2ba:	1e c0       	rjmp	.+60     	; 0x2f8 <doubletostr+0x170>
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
     2bc:	76 01       	movw	r14, r12
     2be:	ec 0e       	add	r14, r28
     2c0:	fd 1e       	adc	r15, r29
     2c2:	98 01       	movw	r18, r16
     2c4:	01 2e       	mov	r0, r17
     2c6:	00 0c       	add	r0, r0
     2c8:	44 0b       	sbc	r20, r20
     2ca:	55 0b       	sbc	r21, r21
     2cc:	c3 01       	movw	r24, r6
     2ce:	b2 01       	movw	r22, r4
     2d0:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__divmodsi4>
     2d4:	ca 01       	movw	r24, r20
     2d6:	b9 01       	movw	r22, r18
     2d8:	2a e0       	ldi	r18, 0x0A	; 10
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__divmodsi4>
     2e4:	60 5d       	subi	r22, 0xD0	; 208
     2e6:	f7 01       	movw	r30, r14
     2e8:	60 83       	st	Z, r22
        frac_exponent/=10;
     2ea:	c8 01       	movw	r24, r16
     2ec:	6a e0       	ldi	r22, 0x0A	; 10
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <__divmodhi4>
     2f4:	8b 01       	movw	r16, r22
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
    frac_exponent/=10;
    for(;frac_exponent;i++)
     2f6:	21 96       	adiw	r28, 0x01	; 1
     2f8:	01 15       	cp	r16, r1
     2fa:	11 05       	cpc	r17, r1
     2fc:	f9 f6       	brne	.-66     	; 0x2bc <doubletostr+0x134>
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
        frac_exponent/=10;
    }
    str[i++]=0;
     2fe:	cc 0d       	add	r28, r12
     300:	dd 1d       	adc	r29, r13
     302:	18 82       	st	Y, r1
}
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	bf 90       	pop	r11
     316:	af 90       	pop	r10
     318:	9f 90       	pop	r9
     31a:	8f 90       	pop	r8
     31c:	7f 90       	pop	r7
     31e:	6f 90       	pop	r6
     320:	5f 90       	pop	r5
     322:	4f 90       	pop	r4
     324:	3f 90       	pop	r3
     326:	2f 90       	pop	r2
     328:	08 95       	ret

0000032a <Card>:
   }
   return 0;
}

static void Card(void)
{
     32a:	4f 92       	push	r4
     32c:	5f 92       	push	r5
     32e:	6f 92       	push	r6
     330:	7f 92       	push	r7
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	e5 97       	sbiw	r28, 0x35	; 53
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	f8 94       	cli
     354:	de bf       	out	0x3e, r29	; 62
     356:	0f be       	out	0x3f, r0	; 63
     358:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8LoopIndex;
	static uint8_t u8Flag = LOW;
	static uint8_t u8CardsNo=0;

	//admin mode and button is pressed
	if(gu8BTNFlag==1)
     35a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	d9 f4       	brne	.+54     	; 0x398 <Card+0x6e>
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     362:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
		/* Displaying "ADMIN MODE" on the LCD screen */
		LCD_SetCursorPosition(0, 0);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Card not allowed");
     36e:	81 e6       	ldi	r24, 0x61	; 97
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
		LCD_SetCursorPosition(0, 1);
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"in ADMIN mode");
     37e:	82 e7       	ldi	r24, 0x72	; 114
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
		APP_Delay();
     386:	0e 94 9e 00 	call	0x13c	; 0x13c <APP_Delay>
		/* Clearing the LCD screen */
		LCD_Clear();
     38a:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
		/* Displaying "ADMIN MODE" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ADMIN MODE");
     38e:	80 e8       	ldi	r24, 0x80	; 128
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
     396:	76 c1       	rjmp	.+748    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
	}
	//user mode and button is pressed (card is inserted)
	else if(gu8BTNFlag==0)
     398:	81 11       	cpse	r24, r1
     39a:	52 c1       	rjmp	.+676    	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
	{
		gu8BTNFlag=2;
     39c:	82 e0       	ldi	r24, 0x02	; 2
     39e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		{
			/* Clearing the SS pin to start reception */
			DIO_PinWrite(PB4, LOW);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	8c e0       	ldi	r24, 0x0C	; 12
     3a6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
			/* Reading from the CARD slave the card data */
			SPI_receiveString(au8CardData, 15);
     3aa:	6f e0       	ldi	r22, 0x0F	; 15
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <SPI_receiveString>
			/* Clearing the SS pin to stop reception */
			DIO_PinWrite(PB4, HIGH);
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	8c e0       	ldi	r24, 0x0C	; 12
     3b8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
			EEPROM_ReadByte(0x020, &u8CardsNo);
     3bc:	60 e2       	ldi	r22, 0x20	; 32
     3be:	73 e0       	ldi	r23, 0x03	; 3
     3c0:	80 e2       	ldi	r24, 0x20	; 32
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 a8 05 	call	0xb50	; 0xb50 <EEPROM_ReadByte>
			/**/
			for(u8LoopIndex = 0; u8LoopIndex < u8CardsNo; u8LoopIndex++)
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	1c c0       	rjmp	.+56     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			{

				/* Reading the stored PAN from EEPROM */
				EEPROM_ReadString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
     3cc:	80 2f       	mov	r24, r16
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	40 96       	adiw	r24, 0x10	; 16
     3d2:	ae 01       	movw	r20, r28
     3d4:	4f 5e       	subi	r20, 0xEF	; 239
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
     3d8:	69 e0       	ldi	r22, 0x09	; 9
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	82 95       	swap	r24
     3de:	92 95       	swap	r25
     3e0:	90 7f       	andi	r25, 0xF0	; 240
     3e2:	98 27       	eor	r25, r24
     3e4:	80 7f       	andi	r24, 0xF0	; 240
     3e6:	98 27       	eor	r25, r24
     3e8:	0e 94 0a 06 	call	0xc14	; 0xc14 <EEPROM_ReadString>
				/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
				if(!String_compare(au8CardData,au8PAN,9))
     3ec:	49 e0       	ldi	r20, 0x09	; 9
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	be 01       	movw	r22, r28
     3f2:	6f 5e       	subi	r22, 0xEF	; 239
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	0e 94 74 00 	call	0xe8	; 0xe8 <String_compare>
     3fe:	88 23       	and	r24, r24
     400:	29 f0       	breq	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			SPI_receiveString(au8CardData, 15);
			/* Clearing the SS pin to stop reception */
			DIO_PinWrite(PB4, HIGH);
			EEPROM_ReadByte(0x020, &u8CardsNo);
			/**/
			for(u8LoopIndex = 0; u8LoopIndex < u8CardsNo; u8LoopIndex++)
     402:	0f 5f       	subi	r16, 0xFF	; 255
     404:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <u8CardsNo.2090>
     408:	08 17       	cp	r16, r24
     40a:	00 f3       	brcs	.-64     	; 0x3cc <Card+0xa2>
				else
				{
				}
			}
			/* Checking if the card is present or not */
			if(u8LoopIndex < u8CardsNo)
     40c:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <u8CardsNo.2090>
     410:	08 17       	cp	r16, r24
     412:	08 f0       	brcs	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	00 c1       	rjmp	.+512    	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
			{
			/**/
				/* Clearing the LCD screen */
				LCD_Clear();
     416:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
				/* Displaying "Enter PIN:" on the LCD screen */
				LCD_DisplayString((uint8_t*)"Enter PIN:");
     41a:	8e e8       	ldi	r24, 0x8E	; 142
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     422:	61 e0       	ldi	r22, 0x01	; 1
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
				/* Getting the first PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[0]);
     42a:	ce 01       	movw	r24, r28
     42c:	c2 96       	adiw	r24, 0x32	; 50
     42e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     432:	8a e2       	ldi	r24, 0x2A	; 42
     434:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
				/* Getting the second PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[1]);
     438:	ce 01       	movw	r24, r28
     43a:	c3 96       	adiw	r24, 0x33	; 51
     43c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     440:	8a e2       	ldi	r24, 0x2A	; 42
     442:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
				/* Getting the third PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[2]);
     446:	ce 01       	movw	r24, r28
     448:	c4 96       	adiw	r24, 0x34	; 52
     44a:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     44e:	8a e2       	ldi	r24, 0x2A	; 42
     450:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
				/* Getting the forth PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[3]);
     454:	ce 01       	movw	r24, r28
     456:	c5 96       	adiw	r24, 0x35	; 53
     458:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     45c:	8a e2       	ldi	r24, 0x2A	; 42
     45e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
				/* Checking if the PIN of the card is similar to the entered PIN from the keypad */
				if(!String_compare(au8CardData+10,au8KeypadPIN,4))
     462:	44 e0       	ldi	r20, 0x04	; 4
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	be 01       	movw	r22, r28
     468:	6e 5c       	subi	r22, 0xCE	; 206
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	ce 01       	movw	r24, r28
     46e:	0b 96       	adiw	r24, 0x0b	; 11
     470:	0e 94 74 00 	call	0xe8	; 0xe8 <String_compare>
     474:	81 11       	cpse	r24, r1
     476:	be c0       	rjmp	.+380    	; 0x5f4 <__EEPROM_REGION_LENGTH__+0x1f4>
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     478:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
					/* Displaying "Enter amount:" on the LCD screen */
					LCD_DisplayString((uint8_t*)"Enter amount:");
     47c:	89 e9       	ldi	r24, 0x99	; 153
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
					/* Getting the thousands amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[0]);
     48c:	ce 01       	movw	r24, r28
     48e:	8b 96       	adiw	r24, 0x2b	; 43
     490:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
					/* Displaying the thousands amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[0]);
     494:	8b a5       	ldd	r24, Y+43	; 0x2b
     496:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
					/* Getting the hundreds amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[1]);
     49a:	ce 01       	movw	r24, r28
     49c:	8c 96       	adiw	r24, 0x2c	; 44
     49e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
					/* Displaying the hundreds amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[1]);
     4a2:	8c a5       	ldd	r24, Y+44	; 0x2c
     4a4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
					/* Getting the tens amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[2]);
     4a8:	ce 01       	movw	r24, r28
     4aa:	8d 96       	adiw	r24, 0x2d	; 45
     4ac:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
					/* Displaying the tens amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[2]);
     4b0:	8d a5       	ldd	r24, Y+45	; 0x2d
     4b2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
					/* Getting the units amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[3]);
     4b6:	ce 01       	movw	r24, r28
     4b8:	8e 96       	adiw	r24, 0x2e	; 46
     4ba:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
					/* Displaying the units amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[3]);
     4be:	8e a5       	ldd	r24, Y+46	; 0x2e
     4c0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
					/* Displaying the decimal point of amount value on the LCD screen */
					au8KeypadAmount[4]='.';
     4c4:	8e e2       	ldi	r24, 0x2E	; 46
     4c6:	8f a7       	std	Y+47, r24	; 0x2f
					/* Displaying the decimal point on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[4]);
     4c8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
					/* Getting the tenths amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[5]);
     4cc:	ce 01       	movw	r24, r28
     4ce:	c0 96       	adiw	r24, 0x30	; 48
     4d0:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
					/* Displaying the tenths amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[5]);
     4d4:	88 a9       	ldd	r24, Y+48	; 0x30
     4d6:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
					/* Getting the hundredths amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[6]);
     4da:	ce 01       	movw	r24, r28
     4dc:	c1 96       	adiw	r24, 0x31	; 49
     4de:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
					/* Displaying the hundredths amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[6]);
     4e2:	89 a9       	ldd	r24, Y+49	; 0x31
     4e4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_DisplayChar>
					/* Converting the entered amount value from ASCII characters to double */
					dKeypadAmount = atof((char*)au8KeypadAmount);
     4e8:	ce 01       	movw	r24, r28
     4ea:	8b 96       	adiw	r24, 0x2b	; 43
     4ec:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <atof>
     4f0:	4b 01       	movw	r8, r22
     4f2:	5c 01       	movw	r10, r24
					/* Reading the stored maximum amount value from EEPROM */
					EEPROM_ReadString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
     4f4:	ae 01       	movw	r20, r28
     4f6:	4d 5d       	subi	r20, 0xDD	; 221
     4f8:	5f 4f       	sbci	r21, 0xFF	; 255
     4fa:	67 e0       	ldi	r22, 0x07	; 7
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e3       	ldi	r24, 0x30	; 48
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 0a 06 	call	0xc14	; 0xc14 <EEPROM_ReadString>
					/* Converting the stored maximum amount value from ASCII characters to double */
					dMaxAmount = atof((char*)au8MaxAmount);
     506:	ce 01       	movw	r24, r28
     508:	83 96       	adiw	r24, 0x23	; 35
     50a:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <atof>
     50e:	6b 01       	movw	r12, r22
     510:	7c 01       	movw	r14, r24
					/* Reading the stored balance value from EEPROM */
					EEPROM_ReadString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
     512:	10 e0       	ldi	r17, 0x00	; 0
     514:	00 5b       	subi	r16, 0xB0	; 176
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	02 95       	swap	r16
     51a:	12 95       	swap	r17
     51c:	10 7f       	andi	r17, 0xF0	; 240
     51e:	10 27       	eor	r17, r16
     520:	00 7f       	andi	r16, 0xF0	; 240
     522:	10 27       	eor	r17, r16
     524:	ae 01       	movw	r20, r28
     526:	45 5e       	subi	r20, 0xE5	; 229
     528:	5f 4f       	sbci	r21, 0xFF	; 255
     52a:	67 e0       	ldi	r22, 0x07	; 7
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	c8 01       	movw	r24, r16
     530:	0e 94 0a 06 	call	0xc14	; 0xc14 <EEPROM_ReadString>
					/* Converting the stored balance value from ASCII characters to double */
					dBalance = atof((char*)au8Balance);
     534:	ce 01       	movw	r24, r28
     536:	4b 96       	adiw	r24, 0x1b	; 27
     538:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <atof>
     53c:	2b 01       	movw	r4, r22
     53e:	3c 01       	movw	r6, r24
					/* Clearing the LCD screen */
					LCD_Clear();
     540:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
					/* Checking if the entered amount is greater than the stored maximum amount */
					if(dKeypadAmount > dMaxAmount)
     544:	a7 01       	movw	r20, r14
     546:	96 01       	movw	r18, r12
     548:	c5 01       	movw	r24, r10
     54a:	b4 01       	movw	r22, r8
     54c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__gesf2>
     550:	18 16       	cp	r1, r24
     552:	7c f4       	brge	.+30     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
					{
						/* Displaying "Maximum Amount" on the LCD screen */
						LCD_DisplayString((uint8_t*)" Maximum Amount");
     554:	87 ea       	ldi	r24, 0xA7	; 167
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     55c:	61 e0       	ldi	r22, 0x01	; 1
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
						/* Displaying "Exceeded" on the LCD screen */
						LCD_DisplayString((uint8_t*)"    Exceeded");
     564:	87 eb       	ldi	r24, 0xB7	; 183
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Giving a sufficient time delay to show the message on the LCD screen */
						APP_Delay();
     56c:	0e 94 9e 00 	call	0x13c	; 0x13c <APP_Delay>
     570:	89 c0       	rjmp	.+274    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
						u8Flag = LOW;
					}
					/* Checking if the entered amount is greater than the stored balance */
					else if(dKeypadAmount > dBalance)
     572:	a3 01       	movw	r20, r6
     574:	92 01       	movw	r18, r4
     576:	c5 01       	movw	r24, r10
     578:	b4 01       	movw	r22, r8
     57a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__gesf2>
     57e:	18 16       	cp	r1, r24
     580:	7c f4       	brge	.+30     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
					{
						/* Displaying "Insufficient" on the LCD screen */
						LCD_DisplayString((uint8_t*)"  Insufficient");
     582:	84 ec       	ldi	r24, 0xC4	; 196
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
						/* Displaying "Fund" on the LCD screen */
						LCD_DisplayString((uint8_t*)"      Fund");
     592:	83 ed       	ldi	r24, 0xD3	; 211
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Giving a sufficient time delay to show the message on the LCD screen */
						APP_Delay();
     59a:	0e 94 9e 00 	call	0x13c	; 0x13c <APP_Delay>
     59e:	72 c0       	rjmp	.+228    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
						u8Flag = LOW;
					}
					else
					{
						/* Displaying "Transaction" on the LCD screen */
						LCD_DisplayString((uint8_t*)"  Transaction");
     5a0:	8e ed       	ldi	r24, 0xDE	; 222
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
						/* Displaying "APPROVED" on the LCD screen */
						LCD_DisplayString((uint8_t*)"    Approved");
     5b0:	8c ee       	ldi	r24, 0xEC	; 236
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Subtracting the withdrawn money after the transaction has successfully completed */
						dBalance -= dKeypadAmount;
     5b8:	a5 01       	movw	r20, r10
     5ba:	94 01       	movw	r18, r8
     5bc:	c3 01       	movw	r24, r6
     5be:	b2 01       	movw	r22, r4
     5c0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__subsf3>
						/* Converting the balance from double to ASCII characters */
						doubletostr(dBalance, (char*)au8Balance, 2);
     5c4:	22 e0       	ldi	r18, 0x02	; 2
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	ae 01       	movw	r20, r28
     5ca:	45 5e       	subi	r20, 0xE5	; 229
     5cc:	5f 4f       	sbci	r21, 0xFF	; 255
     5ce:	0e 94 c4 00 	call	0x188	; 0x188 <doubletostr>
						/* Writing the balance inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_BALANCE_ADDRESS(u8LoopIndex), 9, au8Balance);
     5d2:	ae 01       	movw	r20, r28
     5d4:	45 5e       	subi	r20, 0xE5	; 229
     5d6:	5f 4f       	sbci	r21, 0xFF	; 255
     5d8:	69 e0       	ldi	r22, 0x09	; 9
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	c8 01       	movw	r24, r16
     5de:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_WriteString>
						/* Starting the DC fan to run */
						DCFan_Start(PB1);
     5e2:	89 e0       	ldi	r24, 0x09	; 9
     5e4:	0e 94 6d 05 	call	0xada	; 0xada <DCFan_Start>
						/* Giving a sufficient time delay to make the DC fan run */
						APP_Delay();
     5e8:	0e 94 9e 00 	call	0x13c	; 0x13c <APP_Delay>
						/* Stopping the DC Fan */
						DCFan_Stop(PB1);
     5ec:	89 e0       	ldi	r24, 0x09	; 9
     5ee:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <DCFan_Stop>
     5f2:	48 c0       	rjmp	.+144    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
					}
				}
				else
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     5f4:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
					/* Displaying "Incorrect PIN" on the LCD screen */
					LCD_DisplayString((uint8_t*)" Incorrect PIN");
     5f8:	89 ef       	ldi	r24, 0xF9	; 249
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
					/* Displaying "Card is ejected" on the LCD screen */
					LCD_DisplayString((uint8_t*)"Card is ejected");
     608:	88 e0       	ldi	r24, 0x08	; 8
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
					/* Giving a sufficient time delay to show the message on the LCD screen */
					APP_Delay();
     610:	0e 94 9e 00 	call	0x13c	; 0x13c <APP_Delay>
     614:	37 c0       	rjmp	.+110    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
					u8Flag = LOW;
				}
			}
			else if (gu8BTNFlag==2)
     616:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     61a:	82 30       	cpi	r24, 0x02	; 2
     61c:	99 f5       	brne	.+102    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
			{
				/* Clearing the LCD screen */
				LCD_Clear();
     61e:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
				/* Displaying "Invalid Card" on the LCD screen */
				LCD_DisplayString((uint8_t*)"  Invalid Card");
     622:	88 e1       	ldi	r24, 0x18	; 24
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
				/* Displaying "Card is ejected" on the LCD screen */
				LCD_DisplayString((uint8_t*)"Card is ejected");
     632:	88 e0       	ldi	r24, 0x08	; 8
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
				/* Giving a sufficient time delay to show the message on the LCD screen */
				APP_Delay();
     63a:	0e 94 9e 00 	call	0x13c	; 0x13c <APP_Delay>
     63e:	22 c0       	rjmp	.+68     	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
	}
	//in case no mode is entered and button pressed
	else
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     640:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
		LCD_SetCursorPosition(0, 0);
     644:	60 e0       	ldi	r22, 0x00	; 0
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Card ejected");
     64c:	87 e2       	ldi	r24, 0x27	; 39
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
		LCD_SetCursorPosition(0, 1);
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Pls choose mode");
     65c:	84 e3       	ldi	r24, 0x34	; 52
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
		APP_Delay();
     664:	0e 94 9e 00 	call	0x13c	; 0x13c <APP_Delay>
		/* Clearing the LCD screen */
		LCD_Clear();
     668:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
		/* Displaying "Welcome to" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   Welcome to");
     66c:	84 e4       	ldi	r24, 0x44	; 68
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
		/* Setting the position of the cursor at the second row of the LCD screen */
		LCD_SetCursorPosition(0, 1);
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
		/* Displaying "ATM System" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ATM System");
     67c:	82 e5       	ldi	r24, 0x52	; 82
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
	}
}
     684:	e5 96       	adiw	r28, 0x35	; 53
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	ff 90       	pop	r15
     69a:	ef 90       	pop	r14
     69c:	df 90       	pop	r13
     69e:	cf 90       	pop	r12
     6a0:	bf 90       	pop	r11
     6a2:	af 90       	pop	r10
     6a4:	9f 90       	pop	r9
     6a6:	8f 90       	pop	r8
     6a8:	7f 90       	pop	r7
     6aa:	6f 90       	pop	r6
     6ac:	5f 90       	pop	r5
     6ae:	4f 90       	pop	r4
     6b0:	08 95       	ret

000006b2 <APP_Init>:
* Description     : A function to initialize the application
*************************************************************************************************/
void APP_Init(void)
{
	/* Initializing the UART MCAL driver */
	UART_Init();
     6b2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <UART_Init>
	/* Initializing the SPI MCAL driver */
	SPI_init();
     6b6:	0e 94 34 0c 	call	0x1868	; 0x1868 <SPI_init>
	/* Initializing the LCD ECUAL driver */
	LCD_Init(LCD_DATA_FOUR_BIT_MODE, LCD_CURSOR_OFF);
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	84 e0       	ldi	r24, 0x04	; 4
     6be:	0e 94 52 08 	call	0x10a4	; 0x10a4 <LCD_Init>
	/* Initializing the Keypad ECUAL driver */
	Keypad_Init(KEYPAD_4X3);
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Keypad_Init>
	/* Initializing the Button ECUAL driver */
	Button_Init(PB2, BUTTON_ACTIVE_HIGH);
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	8a e0       	ldi	r24, 0x0A	; 10
     6cc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <Button_Init>
	/* Initializing the DC Fan ECUAL driver */
	DCFan_Init(PB1);
     6d0:	89 e0       	ldi	r24, 0x09	; 9
     6d2:	0e 94 5b 05 	call	0xab6	; 0xab6 <DCFan_Init>
	/* Initializing the LM35 ECUAL driver */
	LM35_Init();
     6d6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LM35_Init>
	/* Initializing the EEPROM ECUAL driver */
	EEPROM_Init();
     6da:	0e 94 89 05 	call	0xb12	; 0xb12 <EEPROM_Init>
	/* Initializing the EXT interrupt MCUAL driver */
	EXTINT_Init(EXTINT_INT2);
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 29 0a 	call	0x1452	; 0x1452 <EXTINT_Init>
	EXTINT_SetSenseMode(EXT_RAISING_MODE, EXTINT_INT2);
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	0e 94 3f 0a 	call	0x147e	; 0x147e <EXTINT_SetSenseMode>

	/* Setting the SS pin to stop any incoming transmission/reception process */
	DIO_PinWrite(PB4, HIGH);
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	8c e0       	ldi	r24, 0x0C	; 12
     6f0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	/* Writing "admin" inside the EEPROM */
	EEPROM_WriteString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, (uint8_t*)"admin");
     6f4:	40 e6       	ldi	r20, 0x60	; 96
     6f6:	51 e0       	ldi	r21, 0x01	; 1
     6f8:	65 e0       	ldi	r22, 0x05	; 5
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	80 e1       	ldi	r24, 0x10	; 16
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_WriteString>

	/* Setting callBack function for the EXT interrupt MCUAL driver */
	EXTINT_SetCallBack(Card, EXTINT_INT2);
     704:	62 e0       	ldi	r22, 0x02	; 2
     706:	85 e9       	ldi	r24, 0x95	; 149
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <EXTINT_SetCallBack>
     70e:	08 95       	ret

00000710 <APP_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void APP_Update()
{
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	e0 97       	sbiw	r28, 0x30	; 48
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8Mode[6];
	uint8_t au8AdminPassword[6];
	uint8_t au8EEPROMAdminPassword[6];
	uint8_t au8Temperature[2];
	uint8_t u8KeypadChar;
	uint8_t u8Temperature = 0;
     72a:	18 aa       	std	Y+48, r1	; 0x30
	uint8_t u8LoopIndex;
	static uint8_t u8Flag = LOW;
	static uint8_t u8CardsNo=0;
	/* Checking if the system is blocked or not */
	if(u8Flag == LOW)
     72c:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <u8Flag.2109>
     730:	81 11       	cpse	r24, r1
     732:	77 c1       	rjmp	.+750    	; 0xa22 <__stack+0x1c3>
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     734:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
		/* Displaying "Welcome to" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   Welcome to");
     738:	84 e4       	ldi	r24, 0x44	; 68
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
		/* Setting the position of the cursor at the second row of the LCD screen */
		LCD_SetCursorPosition(0, 1);
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
		/* Displaying "ATM System" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ATM System");
     748:	82 e5       	ldi	r24, 0x52	; 82
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
		/* Sending "Enter the used mode (ADMIN - USER):" on the terminal by UART */
		UART_SendString((uint8_t*)"Enter the used mode (ADMIN - USER):\r");
     750:	86 e6       	ldi	r24, 0x66	; 102
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
		/* Receiving the entered mode from the terminal by UART */
		UART_ReceiveString(au8Mode, MAX_LEN);
     758:	6f ef       	ldi	r22, 0xFF	; 255
     75a:	ce 01       	movw	r24, r28
     75c:	4b 96       	adiw	r24, 0x1b	; 27
     75e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <UART_ReceiveString>
		/* Sending new line on the terminal by UART */
		UART_SendData((uint8_t)'\r');
     762:	8d e0       	ldi	r24, 0x0D	; 13
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
		/* Checking if the received mode is ADMIN mode */
		if(!String_compare(au8Mode,(uint8_t *)"ADMIN",5))
     76a:	45 e0       	ldi	r20, 0x05	; 5
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	6b e8       	ldi	r22, 0x8B	; 139
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	ce 01       	movw	r24, r28
     774:	4b 96       	adiw	r24, 0x1b	; 27
     776:	0e 94 74 00 	call	0xe8	; 0xe8 <String_compare>
     77a:	81 11       	cpse	r24, r1
     77c:	c3 c0       	rjmp	.+390    	; 0x904 <__stack+0xa5>
		{
			gu8BTNFlag=1;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			/* Clearing the LCD screen */
			LCD_Clear();
     784:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
			/* Displaying "ADMIN MODE" on the LCD screen */
			LCD_DisplayString((uint8_t*)"   ADMIN MODE");
     788:	80 e8       	ldi	r24, 0x80	; 128
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
			/* Sending "Enter Password:" on the terminal by UART */
			UART_SendString((uint8_t*)"Enter Password:\r");
     790:	81 e9       	ldi	r24, 0x91	; 145
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
			/* Receiving the entered admin password from the terminal by UART */
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
     798:	6f ef       	ldi	r22, 0xFF	; 255
     79a:	ce 01       	movw	r24, r28
     79c:	81 96       	adiw	r24, 0x21	; 33
     79e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <UART_ReceiveString>
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
     7a2:	ae 01       	movw	r20, r28
     7a4:	49 5d       	subi	r20, 0xD9	; 217
     7a6:	5f 4f       	sbci	r21, 0xFF	; 255
     7a8:	65 e0       	ldi	r22, 0x05	; 5
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	80 e1       	ldi	r24, 0x10	; 16
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 0a 06 	call	0xc14	; 0xc14 <EEPROM_ReadString>
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
     7b4:	99 a1       	ldd	r25, Y+33	; 0x21
     7b6:	8f a1       	ldd	r24, Y+39	; 0x27
     7b8:	98 13       	cpse	r25, r24
     7ba:	99 c0       	rjmp	.+306    	; 0x8ee <__stack+0x8f>
     7bc:	9a a1       	ldd	r25, Y+34	; 0x22
     7be:	88 a5       	ldd	r24, Y+40	; 0x28
     7c0:	98 13       	cpse	r25, r24
     7c2:	95 c0       	rjmp	.+298    	; 0x8ee <__stack+0x8f>
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7c4:	9b a1       	ldd	r25, Y+35	; 0x23
     7c6:	89 a5       	ldd	r24, Y+41	; 0x29
			/* Receiving the entered admin password from the terminal by UART */
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
     7c8:	98 13       	cpse	r25, r24
     7ca:	91 c0       	rjmp	.+290    	; 0x8ee <__stack+0x8f>
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7cc:	9c a1       	ldd	r25, Y+36	; 0x24
     7ce:	8a a5       	ldd	r24, Y+42	; 0x2a
     7d0:	98 13       	cpse	r25, r24
     7d2:	8d c0       	rjmp	.+282    	; 0x8ee <__stack+0x8f>
			   (au8AdminPassword[4] == au8EEPROMAdminPassword[4]))
     7d4:	9d a1       	ldd	r25, Y+37	; 0x25
     7d6:	8b a5       	ldd	r24, Y+43	; 0x2b
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7d8:	98 13       	cpse	r25, r24
     7da:	89 c0       	rjmp	.+274    	; 0x8ee <__stack+0x8f>
			{
				/* Breaking the loop process if Exit (3) is inserted */
				do
				{
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
     7dc:	8d e0       	ldi	r24, 0x0D	; 13
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
					/* Sending "Please select one of the following:" on the terminal by UART */
					UART_SendString((uint8_t*)"Please select one of the following:\r");
     7e4:	82 ea       	ldi	r24, 0xA2	; 162
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
					/* Sending "1- Customer Data" on the terminal by UART */
					UART_SendString((uint8_t*)"1- Customer Data\r");
     7ec:	87 ec       	ldi	r24, 0xC7	; 199
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
					/* Sending "2- Maximum Amount" on the terminal by UART */
					UART_SendString((uint8_t*)"2- Maximum Amount\r");
     7f4:	89 ed       	ldi	r24, 0xD9	; 217
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
					/* Sending "3- Exit\r" on the terminal by UART */
					UART_SendString((uint8_t*)"3- Exit\r");
     7fc:	8c ee       	ldi	r24, 0xEC	; 236
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
     804:	8d e0       	ldi	r24, 0x0D	; 13
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
					/* Getting the selected mode from the keypad */
					Keypad_GetChar(&u8KeypadChar);
     80c:	ce 01       	movw	r24, r28
     80e:	8f 96       	adiw	r24, 0x2f	; 47
     810:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
					/* Checking if the selected mode is "Customer Data" */
					if(u8KeypadChar == '1')
     814:	8f a5       	ldd	r24, Y+47	; 0x2f
     816:	81 33       	cpi	r24, 0x31	; 49
     818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	50 c0       	rjmp	.+160    	; 0x8bc <__stack+0x5d>
					{
						UART_SendString((uint8_t*)"Pls enter number of cards: ");
     81c:	85 ef       	ldi	r24, 0xF5	; 245
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
						UART_ReceiveData((uint16_t*)&u8CardsNo);
     824:	8e e1       	ldi	r24, 0x1E	; 30
     826:	93 e0       	ldi	r25, 0x03	; 3
     828:	0e 94 85 0c 	call	0x190a	; 0x190a <UART_ReceiveData>
						u8CardsNo=u8CardsNo-'0';
     82c:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <__data_end>
     830:	60 53       	subi	r22, 0x30	; 48
     832:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <__data_end>
						EEPROM_WriteByte(0x020, u8CardsNo);
     836:	80 e2       	ldi	r24, 0x20	; 32
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <EEPROM_WriteByte>
						UART_SendData('\r');
     83e:	8d e0       	ldi	r24, 0x0D	; 13
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
						for(u8LoopIndex=0;u8LoopIndex<u8CardsNo;u8LoopIndex++)
     846:	10 e0       	ldi	r17, 0x00	; 0
     848:	34 c0       	rjmp	.+104    	; 0x8b2 <__stack+0x53>
						{
							/* Sending "Please enter PAN:" on the terminal by UART */
							UART_SendString((uint8_t*)"Please enter PAN:\r");
     84a:	81 e1       	ldi	r24, 0x11	; 17
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
							/* Receiving the entered PAN from the terminal by UART */
							UART_ReceiveString(au8PAN, MAX_LEN);
     852:	6f ef       	ldi	r22, 0xFF	; 255
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	0e 94 bc 0c 	call	0x1978	; 0x1978 <UART_ReceiveString>
							/**/
							/* Writing the PAN inside the EEPROM */
							EEPROM_WriteString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
     85c:	e1 2e       	mov	r14, r17
     85e:	f1 2c       	mov	r15, r1
     860:	c7 01       	movw	r24, r14
     862:	40 96       	adiw	r24, 0x10	; 16
     864:	ae 01       	movw	r20, r28
     866:	4f 5f       	subi	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	69 e0       	ldi	r22, 0x09	; 9
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	82 95       	swap	r24
     870:	92 95       	swap	r25
     872:	90 7f       	andi	r25, 0xF0	; 240
     874:	98 27       	eor	r25, r24
     876:	80 7f       	andi	r24, 0xF0	; 240
     878:	98 27       	eor	r25, r24
     87a:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_WriteString>
							/* Sending "Please enter balance:" on the terminal by UART */
							UART_SendString((uint8_t*)"Please enter balance:\r");
     87e:	84 e2       	ldi	r24, 0x24	; 36
     880:	92 e0       	ldi	r25, 0x02	; 2
     882:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
							/* Receiving the entered balance from the terminal by UART */
							UART_ReceiveString(au8Balance, MAX_LEN);
     886:	6f ef       	ldi	r22, 0xFF	; 255
     888:	ce 01       	movw	r24, r28
     88a:	0b 96       	adiw	r24, 0x0b	; 11
     88c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <UART_ReceiveString>
							/* Writing the balance inside the EEPROM */
							EEPROM_WriteString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
     890:	c7 01       	movw	r24, r14
     892:	80 5b       	subi	r24, 0xB0	; 176
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	ae 01       	movw	r20, r28
     898:	45 5f       	subi	r20, 0xF5	; 245
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
     89c:	67 e0       	ldi	r22, 0x07	; 7
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	82 95       	swap	r24
     8a2:	92 95       	swap	r25
     8a4:	90 7f       	andi	r25, 0xF0	; 240
     8a6:	98 27       	eor	r25, r24
     8a8:	80 7f       	andi	r24, 0xF0	; 240
     8aa:	98 27       	eor	r25, r24
     8ac:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_WriteString>
						UART_SendString((uint8_t*)"Pls enter number of cards: ");
						UART_ReceiveData((uint16_t*)&u8CardsNo);
						u8CardsNo=u8CardsNo-'0';
						EEPROM_WriteByte(0x020, u8CardsNo);
						UART_SendData('\r');
						for(u8LoopIndex=0;u8LoopIndex<u8CardsNo;u8LoopIndex++)
     8b0:	1f 5f       	subi	r17, 0xFF	; 255
     8b2:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <__data_end>
     8b6:	18 17       	cp	r17, r24
     8b8:	40 f2       	brcs	.-112    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <__stack+0x85>
							/* Writing the balance inside the EEPROM */
							EEPROM_WriteString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
						}
					}
					/* Checking if the selected mode is "Maximum Amount" */
					else if(u8KeypadChar == '2')
     8bc:	82 33       	cpi	r24, 0x32	; 50
     8be:	91 f4       	brne	.+36     	; 0x8e4 <__stack+0x85>
					{
						/* Sending "Please enter maximum amount:" on the terminal by UART */
						UART_SendString((uint8_t*)"Please enter maximum amount:\r");
     8c0:	8b e3       	ldi	r24, 0x3B	; 59
     8c2:	92 e0       	ldi	r25, 0x02	; 2
     8c4:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
						/* Receiving the entered maximmum amount from the terminal by UART */
						UART_ReceiveString(au8MaxAmount, MAX_LEN);
     8c8:	6f ef       	ldi	r22, 0xFF	; 255
     8ca:	ce 01       	movw	r24, r28
     8cc:	43 96       	adiw	r24, 0x13	; 19
     8ce:	0e 94 bc 0c 	call	0x1978	; 0x1978 <UART_ReceiveString>
						/* Writing the maximum amount inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
     8d2:	ae 01       	movw	r20, r28
     8d4:	4d 5e       	subi	r20, 0xED	; 237
     8d6:	5f 4f       	sbci	r21, 0xFF	; 255
     8d8:	67 e0       	ldi	r22, 0x07	; 7
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e3       	ldi	r24, 0x30	; 48
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_WriteString>
					}
					else
					{
					}
				} while(u8KeypadChar != '3');
     8e4:	8f a5       	ldd	r24, Y+47	; 0x2f
     8e6:	83 33       	cpi	r24, 0x33	; 51
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	78 cf       	rjmp	.-272    	; 0x7dc <APP_Update+0xcc>
     8ec:	08 c0       	rjmp	.+16     	; 0x8fe <__stack+0x9f>
			}
			else
			{
				/* Sending "Invalid Password" on the terminal by UART if wrong admin password is inserted */
				UART_SendString((uint8_t*)"Invalid Password\r");
     8ee:	89 e5       	ldi	r24, 0x59	; 89
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
				/* Sending new line on the terminal by UART */
				UART_SendData((uint8_t)'\r');
     8f6:	8d e0       	ldi	r24, 0x0D	; 13
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
			}
			u8Flag = LOW;
     8fe:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2109>
     902:	8f c0       	rjmp	.+286    	; 0xa22 <__stack+0x1c3>
		}
		/* Checking if the received mode is USER mode */
		else if(!String_compare(au8Mode,(uint8_t *)"USER",4))
     904:	44 e0       	ldi	r20, 0x04	; 4
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	6b e6       	ldi	r22, 0x6B	; 107
     90a:	72 e0       	ldi	r23, 0x02	; 2
     90c:	ce 01       	movw	r24, r28
     90e:	4b 96       	adiw	r24, 0x1b	; 27
     910:	0e 94 74 00 	call	0xe8	; 0xe8 <String_compare>
     914:	81 11       	cpse	r24, r1
     916:	7d c0       	rjmp	.+250    	; 0xa12 <__stack+0x1b3>
		{
			gu8BTNFlag=2;
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			u8Flag = LOW;
     91e:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2109>
			while(u8Flag == LOW)
     922:	71 c0       	rjmp	.+226    	; 0xa06 <__stack+0x1a7>
			{
				/* Clearing the LCD screen */
				LCD_Clear();
     924:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
				/* Displaying "1- Insert a Card" on the LCD screen */
				LCD_DisplayString((uint8_t*)"1- Insert a Card");
     928:	80 e7       	ldi	r24, 0x70	; 112
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     930:	61 e0       	ldi	r22, 0x01	; 1
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
				/* Displaying "2- Display Temp" on the LCD screen */
				LCD_DisplayString((uint8_t*)"2- Display Temp");
     938:	81 e8       	ldi	r24, 0x81	; 129
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
				/* Getting the selected mode from the keypad */
				Keypad_GetChar(&u8KeypadChar);
     940:	ce 01       	movw	r24, r28
     942:	8f 96       	adiw	r24, 0x2f	; 47
     944:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
				/* Checking if the selected mode is to use the ATM */
				if(u8KeypadChar == '1')
     948:	8f a5       	ldd	r24, Y+47	; 0x2f
     94a:	81 33       	cpi	r24, 0x31	; 49
     94c:	d9 f4       	brne	.+54     	; 0x984 <__stack+0x125>
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     94e:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
					/* Displaying "Please Enter" on the LCD screen */
					LCD_DisplayString((uint8_t*)"  Please Enter");
     952:	81 e9       	ldi	r24, 0x91	; 145
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
					/* Displaying "Your Card!" on the LCD screen */
					LCD_DisplayString((uint8_t*)"   Your Card!");
     962:	80 ea       	ldi	r24, 0xA0	; 160
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
					gu8BTNFlag=0;
     96a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
               UART_SendData(gu8BTNFlag);
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
					while(gu8BTNFlag!=2);
     976:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	e1 f7       	brne	.-8      	; 0x976 <__stack+0x117>
					u8Flag = LOW;
     97e:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2109>
     982:	41 c0       	rjmp	.+130    	; 0xa06 <__stack+0x1a7>
				}
				/* Checking if the selected mode is to display the temperature */
				else if(u8KeypadChar == '2')
     984:	82 33       	cpi	r24, 0x32	; 50
     986:	e9 f5       	brne	.+122    	; 0xa02 <__stack+0x1a3>
				{
					u8Flag=HIGH;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <u8Flag.2109>
					/* Reading the current temperature of the LM35 sensor */
					LM35_ReadTemperature(&u8Temperature);
     98e:	ce 01       	movw	r24, r28
     990:	c0 96       	adiw	r24, 0x30	; 48
     992:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <LM35_ReadTemperature>
					/* Clearing the LCD screen */
					LCD_Clear();
     996:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
					/* Displaying "Current Temp: " on the LCD screen */
					LCD_DisplayString((uint8_t*)"Current Temp: ");
     99a:	8e ea       	ldi	r24, 0xAE	; 174
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
					/* Converting the temperature read from the LM35 sensor from integer to array of ASCII characters */
					itoa(u8Temperature, (char*)au8Temperature, 10);
     9a2:	88 a9       	ldd	r24, Y+48	; 0x30
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9a4:	4a e0       	ldi	r20, 0x0A	; 10
     9a6:	be 01       	movw	r22, r28
     9a8:	63 5d       	subi	r22, 0xD3	; 211
     9aa:	7f 4f       	sbci	r23, 0xFF	; 255
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__itoa_ncheck>
					/* Displaying the temperature read from the LM35 sensor on the LCD screen */
					LCD_DisplayString(au8Temperature);
     9b2:	ce 01       	movw	r24, r28
     9b4:	8d 96       	adiw	r24, 0x2d	; 45
     9b6:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
					/* Checking if the temperature read from the LM35 sensor is greater than 50 */
					if(u8Temperature > 50)
     9ba:	88 a9       	ldd	r24, Y+48	; 0x30
     9bc:	83 33       	cpi	r24, 0x33	; 51
     9be:	90 f0       	brcs	.+36     	; 0x9e4 <__stack+0x185>
					{
						/* Clearing the LCD screen */
						LCD_Clear();
     9c0:	0e 94 b2 08 	call	0x1164	; 0x1164 <LCD_Clear>
						/* Displaying "System blocked!" on the LCD screen */
						LCD_DisplayString((uint8_t*)"System blocked!");
     9c4:	8d eb       	ldi	r24, 0xBD	; 189
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
						/* Displaying "Temp is above 50" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Temp is above 50");
     9d4:	8d ec       	ldi	r24, 0xCD	; 205
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Setting the system block flag to one to block the whole system */
						u8Flag = HIGH;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <u8Flag.2109>
     9e2:	11 c0       	rjmp	.+34     	; 0xa06 <__stack+0x1a7>
					}
					else
					{
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_SetCursorPosition>
						/* Displaying "Press any key" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Press any key");
     9ec:	8e ed       	ldi	r24, 0xDE	; 222
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_DisplayString>
						/* Waiting for any key to be pressed from the keypad */
						Keypad_GetChar(&u8KeypadChar);
     9f4:	ce 01       	movw	r24, r28
     9f6:	8f 96       	adiw	r24, 0x2f	; 47
     9f8:	0e 94 c7 06 	call	0xd8e	; 0xd8e <Keypad_GetChar>
						u8Flag = LOW;
     9fc:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2109>
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x1a7>
					}
				}
				else
				{
					/* Invalid keypad input, 1 or 2 must be inserted */
					u8Flag = LOW;
     a02:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2109>
		/* Checking if the received mode is USER mode */
		else if(!String_compare(au8Mode,(uint8_t *)"USER",4))
		{
			gu8BTNFlag=2;
			u8Flag = LOW;
			while(u8Flag == LOW)
     a06:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <u8Flag.2109>
     a0a:	88 23       	and	r24, r24
     a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x1b1>
     a0e:	8a cf       	rjmp	.-236    	; 0x924 <__stack+0xc5>
     a10:	08 c0       	rjmp	.+16     	; 0xa22 <__stack+0x1c3>
			}
		}
		else
		{
			/* Sending "Invalid mode is inserted" on the terminal by UART */
			UART_SendString((uint8_t*)"Invalid mode is inserted\r");
     a12:	8c ee       	ldi	r24, 0xEC	; 236
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_SendString>
			/* Sending new line on the terminal by UART */
			UART_SendData((uint8_t)'\r');
     a1a:	8d e0       	ldi	r24, 0x0D	; 13
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
	}
	else
	{
		/* System is blocked */
	}
}
     a22:	e0 96       	adiw	r28, 0x30	; 48
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	1f 91       	pop	r17
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	08 95       	ret

00000a3a <Button_Init>:
* Parameters	: enuDIOPinNo, enuButtonConnectionType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the button according to the configuration
*************************************************************************************************/
enuErrorStatus_t Button_Init(enuDIOPinNo_t enuDIOPinNo, enuButtonConnectionType_t enuButtonConnectionType)
{
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	1f 92       	push	r1
     a44:	cd b7       	in	r28, 0x3d	; 61
     a46:	de b7       	in	r29, 0x3e	; 62
   enuErrorStatus_t enuRetVar;
   uint8_t u8Data;
   
	if((enuButtonConnectionType > BUTTON_CONNECTION_TYPE_MIN_VALUE) && (enuButtonConnectionType < BUTTON_CONNECTION_TYPE_MAX_VALUE))
     a48:	62 30       	cpi	r22, 0x02	; 2
     a4a:	70 f5       	brcc	.+92     	; 0xaa8 <Button_Init+0x6e>
     a4c:	06 2f       	mov	r16, r22
     a4e:	18 2f       	mov	r17, r24
	{
		/* Initialize the button with the connected DIO pin */
		DIO_PinInit(enuDIOPinNo, INPUT, enuButtonConnectionType);
     a50:	46 2f       	mov	r20, r22
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
		/* Reading the current state of the button */
		DIO_PinRead(enuDIOPinNo, &u8Data);
     a58:	be 01       	movw	r22, r28
     a5a:	6f 5f       	subi	r22, 0xFF	; 255
     a5c:	7f 4f       	sbci	r23, 0xFF	; 255
     a5e:	81 2f       	mov	r24, r17
     a60:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_PinRead>
		/* Checking if the current state of the button according to the configuration is true */
		if(((u8Data == LOW) && (enuButtonConnectionType == BUTTON_ACTIVE_HIGH)) || ((u8Data == HIGH) && (enuButtonConnectionType == BUTTON_ACTIVE_LOW)))
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	81 11       	cpse	r24, r1
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <Button_Init+0x34>
     a6a:	00 23       	and	r16, r16
     a6c:	21 f0       	breq	.+8      	; 0xa76 <Button_Init+0x3c>
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	41 f4       	brne	.+16     	; 0xa82 <Button_Init+0x48>
     a72:	01 30       	cpi	r16, 0x01	; 1
     a74:	31 f4       	brne	.+12     	; 0xa82 <Button_Init+0x48>
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_OFF;
     a76:	e1 2f       	mov	r30, r17
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	e0 5e       	subi	r30, 0xE0	; 224
     a7c:	fb 4f       	sbci	r31, 0xFB	; 251
     a7e:	10 82       	st	Z, r1
     a80:	06 c0       	rjmp	.+12     	; 0xa8e <Button_Init+0x54>
		}
		else
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_ON;
     a82:	e1 2f       	mov	r30, r17
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	e0 5e       	subi	r30, 0xE0	; 224
     a88:	fb 4f       	sbci	r31, 0xFB	; 251
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	80 83       	st	Z, r24
		}
		enuButtonConnectionTypeState[enuDIOPinNo] = enuButtonConnectionType;
     a8e:	81 2f       	mov	r24, r17
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	fc 01       	movw	r30, r24
     a94:	ef 5d       	subi	r30, 0xDF	; 223
     a96:	fc 4f       	sbci	r31, 0xFC	; 252
     a98:	00 83       	st	Z, r16
		enuButtonState[enuDIOPinNo] = BUTTON_INIT_DONE;
     a9a:	fc 01       	movw	r30, r24
     a9c:	e1 5e       	subi	r30, 0xE1	; 225
     a9e:	fa 4f       	sbci	r31, 0xFA	; 250
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	20 83       	st	Z, r18
		enuRetVar = E_OK;		
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <Button_Init+0x70>
	}	
	else
	{
		enuRetVar = E_ERROR;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
	}
   return enuRetVar;	
}
     aaa:	0f 90       	pop	r0
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	08 95       	ret

00000ab6 <DCFan_Init>:
* Parameters	: enuDIOPinNo
* Return Value	: void
* Description  : Initialize the DC Fan data pin
*************************************************************************************************/
void DCFan_Init(enuDIOPinNo_t enuDIOPinNo)
{	
     ab6:	cf 93       	push	r28
     ab8:	c8 2f       	mov	r28, r24
	/* Initializing the DC Fan data pin as output */
	DIO_PinInit(enuDIOPinNo, OUTPUT, NO_CONNECTION);
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
	/* Stopping the DC Fan before the system starts */
	DIO_PinWrite(enuDIOPinNo, LOW);
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	8c 2f       	mov	r24, r28
     ac6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	enuDCFanState[enuDIOPinNo] = DCFAN_INIT_DONE;
     aca:	ec 2f       	mov	r30, r28
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	e2 5e       	subi	r30, 0xE2	; 226
     ad0:	f9 4f       	sbci	r31, 0xF9	; 249
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 83       	st	Z, r24
}
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <DCFan_Start>:
*************************************************************************************************/
enuErrorStatus_t DCFan_Start(enuDIOPinNo_t enuDIOPinNo)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
     ada:	e8 2f       	mov	r30, r24
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	e2 5e       	subi	r30, 0xE2	; 226
     ae0:	f9 4f       	sbci	r31, 0xF9	; 249
     ae2:	90 81       	ld	r25, Z
     ae4:	91 30       	cpi	r25, 0x01	; 1
     ae6:	29 f4       	brne	.+10     	; 0xaf2 <DCFan_Start+0x18>
	{
		/* Starting the DC Fan */
		DIO_PinWrite(enuDIOPinNo, HIGH);
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		enuRetVar = E_OK;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     af2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
     af4:	08 95       	ret

00000af6 <DCFan_Stop>:
*************************************************************************************************/
enuErrorStatus_t DCFan_Stop(enuDIOPinNo_t enuDIOPinNo)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
     af6:	e8 2f       	mov	r30, r24
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	e2 5e       	subi	r30, 0xE2	; 226
     afc:	f9 4f       	sbci	r31, 0xF9	; 249
     afe:	90 81       	ld	r25, Z
     b00:	91 30       	cpi	r25, 0x01	; 1
     b02:	29 f4       	brne	.+10     	; 0xb0e <DCFan_Stop+0x18>
	{
		/* Stopping the DC Fan */
		DIO_PinWrite(enuDIOPinNo, LOW);
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		enuRetVar = E_OK;
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
     b10:	08 95       	ret

00000b12 <EEPROM_Init>:
* Description: A function to initialize EEPROM device
************************************************************************************/
enuErrorStatus_t EEPROM_Init      (void)
{
   //initialize I2C Bus
   I2C_Init();
     b12:	0e 94 36 0b 	call	0x166c	; 0x166c <I2C_Init>
   return E_OK;
}
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	08 95       	ret

00000b1a <EEPROM_WriteByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a byte in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteByte (uint16_t u16ByteAddress,uint8_t u8Data)
{
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	18 2f       	mov	r17, r24
     b22:	d6 2f       	mov	r29, r22
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     b24:	97 70       	andi	r25, 0x07	; 7
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     b26:	c9 2f       	mov	r28, r25
     b28:	c0 65       	ori	r28, 0x50	; 80
   
   //send a start condition
   I2C_Start();
     b2a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	8c 2f       	mov	r24, r28
     b32:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
     b36:	81 2f       	mov	r24, r17
     b38:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_SendDataFrame>
   //send the data
   I2C_SendDataFrame(u8Data);
     b3c:	8d 2f       	mov	r24, r29
     b3e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_SendDataFrame>
   //send a stop bit
   I2C_Stop();
     b42:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <I2C_Stop>
   return E_OK;
}
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	08 95       	ret

00000b50 <EEPROM_ReadByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a byte from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadByte  (uint16_t u16ByteAddress,uint8_t *pu8Data)
{
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	d8 2f       	mov	r29, r24
     b5a:	8b 01       	movw	r16, r22
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     b5c:	97 70       	andi	r25, 0x07	; 7
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     b5e:	c9 2f       	mov	r28, r25
     b60:	c0 65       	ori	r28, 0x50	; 80
   
   //send a start condition
   I2C_Start();
     b62:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	8c 2f       	mov	r24, r28
     b6a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
     b6e:	8d 2f       	mov	r24, r29
     b70:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_SendDataFrame>
   //send a repeated start condition
   I2C_Repeated_Start();
     b74:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <I2C_Repeated_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Read);
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	8c 2f       	mov	r24, r28
     b7c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_SendAddressFrame>
   //receive the data from the EEPROM and send a NACK condition
   I2C_RecieveDataFrame(pu8Data,NACK);
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	c8 01       	movw	r24, r16
     b84:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2C_RecieveDataFrame>
   //send a stop bit
   I2C_Stop();
     b88:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <I2C_Stop>
   
   
   return E_OK;
}
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	08 95       	ret

00000b98 <EEPROM_WriteString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a string in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteString (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
     b98:	cf 92       	push	r12
     b9a:	df 92       	push	r13
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
	if (pu8Data==NULLPTR)		return E_ERROR;
     ba8:	41 15       	cp	r20, r1
     baa:	51 05       	cpc	r21, r1
     bac:	39 f1       	breq	.+78     	; 0xbfc <EEPROM_WriteString+0x64>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     bae:	29 2f       	mov	r18, r25
     bb0:	27 70       	andi	r18, 0x07	; 7
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     bb2:	c2 2f       	mov	r28, r18
     bb4:	c0 65       	ori	r28, 0x50	; 80
	
	if (u16ByteAddress+u16ByteCount>2047)
     bb6:	9c 01       	movw	r18, r24
     bb8:	26 0f       	add	r18, r22
     bba:	37 1f       	adc	r19, r23
     bbc:	21 15       	cp	r18, r1
     bbe:	38 40       	sbci	r19, 0x08	; 8
     bc0:	f8 f4       	brcc	.+62     	; 0xc00 <EEPROM_WriteString+0x68>
     bc2:	7a 01       	movw	r14, r20
     bc4:	8b 01       	movw	r16, r22
     bc6:	6c 01       	movw	r12, r24
	{
		return E_ERROR;
	}
	//send a start condition
	I2C_Start();
     bc8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	8c 2f       	mov	r24, r28
     bd0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
     bd4:	8c 2d       	mov	r24, r12
     bd6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_SendDataFrame>
	
	for (uint16_t i=0;i<u16ByteCount;i++)
     bda:	c0 e0       	ldi	r28, 0x00	; 0
     bdc:	d0 e0       	ldi	r29, 0x00	; 0
     bde:	07 c0       	rjmp	.+14     	; 0xbee <EEPROM_WriteString+0x56>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
     be0:	f7 01       	movw	r30, r14
     be2:	ec 0f       	add	r30, r28
     be4:	fd 1f       	adc	r31, r29
     be6:	80 81       	ld	r24, Z
     be8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_SendDataFrame>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
	
	for (uint16_t i=0;i<u16ByteCount;i++)
     bec:	21 96       	adiw	r28, 0x01	; 1
     bee:	c0 17       	cp	r28, r16
     bf0:	d1 07       	cpc	r29, r17
     bf2:	b0 f3       	brcs	.-20     	; 0xbe0 <EEPROM_WriteString+0x48>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
	}
	//send a stop bit
	I2C_Stop();
     bf4:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <I2C_Stop>
	return E_OK;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <EEPROM_WriteString+0x6a>
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a string in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteString (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
	if (pu8Data==NULLPTR)		return E_ERROR;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <EEPROM_WriteString+0x6a>
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
	
	if (u16ByteAddress+u16ByteCount>2047)
	{
		return E_ERROR;
     c00:	80 e0       	ldi	r24, 0x00	; 0
		I2C_SendDataFrame(pu8Data[i]);
	}
	//send a stop bit
	I2C_Stop();
	return E_OK;
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	08 95       	ret

00000c14 <EEPROM_ReadString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a string from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadString  (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
	if (pu8Data==NULLPTR)		return E_ERROR;
     c22:	41 15       	cp	r20, r1
     c24:	51 05       	cpc	r21, r1
     c26:	a9 f1       	breq	.+106    	; 0xc92 <EEPROM_ReadString+0x7e>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     c28:	29 2f       	mov	r18, r25
     c2a:	27 70       	andi	r18, 0x07	; 7
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     c2c:	c2 2f       	mov	r28, r18
     c2e:	c0 65       	ori	r28, 0x50	; 80
	
	if (u16ByteAddress+u16ByteCount>2047)
     c30:	9c 01       	movw	r18, r24
     c32:	26 0f       	add	r18, r22
     c34:	37 1f       	adc	r19, r23
     c36:	21 15       	cp	r18, r1
     c38:	38 40       	sbci	r19, 0x08	; 8
     c3a:	68 f5       	brcc	.+90     	; 0xc96 <EEPROM_ReadString+0x82>
     c3c:	8a 01       	movw	r16, r20
     c3e:	7b 01       	movw	r14, r22
     c40:	6c 01       	movw	r12, r24
	{
		return E_ERROR;
	}
	
	//send a start condition
	I2C_Start();
     c42:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	8c 2f       	mov	r24, r28
     c4a:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
     c4e:	8c 2d       	mov	r24, r12
     c50:	0e 94 a4 0b 	call	0x1748	; 0x1748 <I2C_SendDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
     c54:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <I2C_Repeated_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	8c 2f       	mov	r24, r28
     c5c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_SendAddressFrame>
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
     c60:	c0 e0       	ldi	r28, 0x00	; 0
     c62:	06 c0       	rjmp	.+12     	; 0xc70 <EEPROM_ReadString+0x5c>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	80 0f       	add	r24, r16
     c68:	91 1f       	adc	r25, r17
     c6a:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2C_RecieveDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
     c6e:	cf 5f       	subi	r28, 0xFF	; 255
     c70:	8c 2f       	mov	r24, r28
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	97 01       	movw	r18, r14
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	31 09       	sbc	r19, r1
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	90 f3       	brcs	.-28     	; 0xc64 <EEPROM_ReadString+0x50>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
	}	
	//receive the data from the EEPROM and send a NACK condition
	I2C_RecieveDataFrame(&pu8Data[i],NACK);
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	80 0f       	add	r24, r16
     c84:	91 1f       	adc	r25, r17
     c86:	0e 94 bd 0b 	call	0x177a	; 0x177a <I2C_RecieveDataFrame>
	//send a stop bit
	I2C_Stop();
     c8a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <I2C_Stop>
	return E_OK;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <EEPROM_ReadString+0x84>
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a string from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadString  (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
	if (pu8Data==NULLPTR)		return E_ERROR;
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <EEPROM_ReadString+0x84>
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
	
	if (u16ByteAddress+u16ByteCount>2047)
	{
		return E_ERROR;
     c96:	80 e0       	ldi	r24, 0x00	; 0
	I2C_RecieveDataFrame(&pu8Data[i],NACK);
	//send a stop bit
	I2C_Stop();
	return E_OK;

}
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	08 95       	ret

00000ca8 <Keypad_CharMapping>:
{
    uint8_t u8OutChar;
	 
    /* Calculating the value the corresponds the current row and column indexes         *
     * e.g: If 8 is pressed (Row = 2, Col = 1) -> Char = (1 + 1) + (3 * 2) = 2 + 6 = 8  */
    switch(KEYPAD_CALCULATE_CORRESPONDING_KEY_VALUE(u8ColIndex, u8RowIndex))
     ca8:	70 e0       	ldi	r23, 0x00	; 0
     caa:	61 50       	subi	r22, 0x01	; 1
     cac:	71 09       	sbc	r23, r1
     cae:	fb 01       	movw	r30, r22
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	e6 0f       	add	r30, r22
     cb6:	f7 1f       	adc	r31, r23
     cb8:	e8 0f       	add	r30, r24
     cba:	f1 1d       	adc	r31, r1
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	ed 30       	cpi	r30, 0x0D	; 13
     cc0:	f1 05       	cpc	r31, r1
     cc2:	10 f5       	brcc	.+68     	; 0xd08 <Keypad_CharMapping+0x60>
     cc4:	e6 5d       	subi	r30, 0xD6	; 214
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__tablejump2__>
    {
        case 1:     u8OutChar = '1';
     ccc:	81 e3       	ldi	r24, 0x31	; 49
     cce:	08 95       	ret
                    break;
        case 2:     u8OutChar = '2';
                    break;
        case 3:     u8OutChar = '3';
     cd0:	83 e3       	ldi	r24, 0x33	; 51
                    break;
     cd2:	08 95       	ret
        case 4:     (u8ColIndex == 1) ? (u8OutChar = '4') : (u8OutChar = 'A');
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	e1 f4       	brne	.+56     	; 0xd10 <Keypad_CharMapping+0x68>
     cd8:	84 e3       	ldi	r24, 0x34	; 52
     cda:	08 95       	ret
                    break;
        case 5:     u8OutChar = '5';
     cdc:	85 e3       	ldi	r24, 0x35	; 53
                    break;
     cde:	08 95       	ret
        case 6:     u8OutChar = '6';
     ce0:	86 e3       	ldi	r24, 0x36	; 54
                    break;
     ce2:	08 95       	ret
        case 7:     (u8ColIndex == 1) ? (u8OutChar = '7') : (u8OutChar = 'B');
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	b1 f4       	brne	.+44     	; 0xd14 <Keypad_CharMapping+0x6c>
     ce8:	87 e3       	ldi	r24, 0x37	; 55
     cea:	08 95       	ret
                    break;
        case 8:     u8OutChar = '8';
     cec:	88 e3       	ldi	r24, 0x38	; 56
                    break;
     cee:	08 95       	ret
        case 9:     u8OutChar = '9';
     cf0:	89 e3       	ldi	r24, 0x39	; 57
                    break;
     cf2:	08 95       	ret
        case 10:    (u8ColIndex == 1) ? (u8OutChar = '*') : (u8OutChar = 'C');
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	81 f4       	brne	.+32     	; 0xd18 <Keypad_CharMapping+0x70>
     cf8:	8a e2       	ldi	r24, 0x2A	; 42
     cfa:	08 95       	ret
                    break;
        case 11:    u8OutChar = '0';
     cfc:	80 e3       	ldi	r24, 0x30	; 48
                    break;
     cfe:	08 95       	ret
        case 12:    u8OutChar = '#';
     d00:	83 e2       	ldi	r24, 0x23	; 35
                    break;
     d02:	08 95       	ret
        case 13:    u8OutChar = 'D';
     d04:	84 e4       	ldi	r24, 0x44	; 68
                    break;
     d06:	08 95       	ret
        default:    u8OutChar = ' ';
     d08:	80 e2       	ldi	r24, 0x20	; 32
     d0a:	08 95       	ret
     * e.g: If 8 is pressed (Row = 2, Col = 1) -> Char = (1 + 1) + (3 * 2) = 2 + 6 = 8  */
    switch(KEYPAD_CALCULATE_CORRESPONDING_KEY_VALUE(u8ColIndex, u8RowIndex))
    {
        case 1:     u8OutChar = '1';
                    break;
        case 2:     u8OutChar = '2';
     d0c:	82 e3       	ldi	r24, 0x32	; 50
     d0e:	08 95       	ret
                    break;
        case 3:     u8OutChar = '3';
                    break;
        case 4:     (u8ColIndex == 1) ? (u8OutChar = '4') : (u8OutChar = 'A');
     d10:	81 e4       	ldi	r24, 0x41	; 65
     d12:	08 95       	ret
                    break;
        case 5:     u8OutChar = '5';
                    break;
        case 6:     u8OutChar = '6';
                    break;
        case 7:     (u8ColIndex == 1) ? (u8OutChar = '7') : (u8OutChar = 'B');
     d14:	82 e4       	ldi	r24, 0x42	; 66
     d16:	08 95       	ret
                    break;
        case 8:     u8OutChar = '8';
                    break;
        case 9:     u8OutChar = '9';
                    break;
        case 10:    (u8ColIndex == 1) ? (u8OutChar = '*') : (u8OutChar = 'C');
     d18:	83 e4       	ldi	r24, 0x43	; 67
        case 13:    u8OutChar = 'D';
                    break;
        default:    u8OutChar = ' ';
    }
    return u8OutChar;
}
     d1a:	08 95       	ret

00000d1c <Keypad_Init>:
* Parameters	: enuKeypadType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the Keypad according to the configuration
*************************************************************************************************/
enuErrorStatus_t Keypad_Init(enuKeypadType_t enuKeypadType)
{
     d1c:	1f 93       	push	r17
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
     d22:	82 30       	cpi	r24, 0x02	; 2
     d24:	68 f0       	brcs	.+26     	; 0xd40 <Keypad_Init+0x24>
		enuKeypadState = KEYPAD_INIT_DONE;
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	2e c0       	rjmp	.+92     	; 0xd86 <Keypad_Init+0x6a>
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
     d2a:	ec 2f       	mov	r30, r28
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	ea 5f       	subi	r30, 0xFA	; 250
     d30:	fc 4f       	sbci	r31, 0xFC	; 252
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
     d3c:	cf 5f       	subi	r28, 0xFF	; 255
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <Keypad_Init+0x28>
     d40:	d8 2f       	mov	r29, r24
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	4c 2f       	mov	r20, r28
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	24 e0       	ldi	r18, 0x04	; 4
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	2d 1b       	sub	r18, r29
     d4e:	31 09       	sbc	r19, r1
     d50:	42 17       	cp	r20, r18
     d52:	53 07       	cpc	r21, r19
     d54:	50 f3       	brcs	.-44     	; 0xd2a <Keypad_Init+0xe>
     d56:	c0 e0       	ldi	r28, 0x00	; 0
     d58:	0f c0       	rjmp	.+30     	; 0xd78 <Keypad_Init+0x5c>
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
		{
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
     d5a:	ec 2f       	mov	r30, r28
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	e6 5f       	subi	r30, 0xF6	; 246
     d60:	fc 4f       	sbci	r31, 0xFC	; 252
     d62:	10 81       	ld	r17, Z
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	81 2f       	mov	r24, r17
     d6a:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
     d6e:	61 e0       	ldi	r22, 0x01	; 1
     d70:	81 2f       	mov	r24, r17
     d72:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
     d76:	cf 5f       	subi	r28, 0xFF	; 255
     d78:	c4 30       	cpi	r28, 0x04	; 4
     d7a:	78 f3       	brcs	.-34     	; 0xd5a <Keypad_Init+0x3e>
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
		}
		enuKeypadTypeState = enuKeypadType;
     d7c:	d0 93 1d 07 	sts	0x071D, r29	; 0x80071d <enuKeypadTypeState>
		enuKeypadState = KEYPAD_INIT_DONE;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <enuKeypadState>
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	08 95       	ret

00000d8e <Keypad_GetChar>:
* Parameters	: pu8Data
* Return Value	: enuErrorStatus_t
* Description  : Get the current character of the pressed key from the Keypad
*************************************************************************************************/
enuErrorStatus_t Keypad_GetChar(uint8_t* pu8Data)
{
     d8e:	8f 92       	push	r8
     d90:	9f 92       	push	r9
     d92:	bf 92       	push	r11
     d94:	cf 92       	push	r12
     d96:	df 92       	push	r13
     d98:	ef 92       	push	r14
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	1f 92       	push	r1
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	enuDigitalStates_t enuDigitalState;
	enuDigitalStates_t u8Flag = LOW;
	uint8_t u8RowIndex = 0;
	uint8_t u8ColIndex = 0;
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
     daa:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <enuKeypadState>
     dae:	21 30       	cpi	r18, 0x01	; 1
     db0:	09 f4       	brne	.+2      	; 0xdb4 <Keypad_GetChar+0x26>
     db2:	49 c0       	rjmp	.+146    	; 0xe46 <Keypad_GetChar+0xb8>
		*pu8Data = Keypad_CharMapping(u8ColIndex, u8RowIndex);
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	54 c0       	rjmp	.+168    	; 0xe60 <Keypad_GetChar+0xd2>
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
     db8:	ec 2c       	mov	r14, r12
     dba:	f1 2c       	mov	r15, r1
     dbc:	f7 01       	movw	r30, r14
     dbe:	e6 5f       	subi	r30, 0xF6	; 246
     dc0:	fc 4f       	sbci	r31, 0xFC	; 252
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
     dca:	d1 2c       	mov	r13, r1
     dcc:	1e c0       	rjmp	.+60     	; 0xe0a <Keypad_GetChar+0x7c>
				{
					/* Reading the value of the current column */
					DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);
     dce:	0d 2d       	mov	r16, r13
     dd0:	10 e0       	ldi	r17, 0x00	; 0
     dd2:	f8 01       	movw	r30, r16
     dd4:	ea 5f       	subi	r30, 0xFA	; 250
     dd6:	fc 4f       	sbci	r31, 0xFC	; 252
     dd8:	be 01       	movw	r22, r28
     dda:	6f 5f       	subi	r22, 0xFF	; 255
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	80 81       	ld	r24, Z
     de0:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_PinRead>
					/* Checking if a column is attached to a row / key is pressed to raise a flag and break the loop */
					if(enuDigitalState == LOW)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	88 23       	and	r24, r24
     de8:	51 f0       	breq	.+20     	; 0xdfe <Keypad_GetChar+0x70>
     dea:	0e c0       	rjmp	.+28     	; 0xe08 <Keypad_GetChar+0x7a>
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
						{
							DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);						
     dec:	be 01       	movw	r22, r28
     dee:	6f 5f       	subi	r22, 0xFF	; 255
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	f8 01       	movw	r30, r16
     df4:	ea 5f       	subi	r30, 0xFA	; 250
     df6:	fc 4f       	sbci	r31, 0xFC	; 252
     df8:	80 81       	ld	r24, Z
     dfa:	0e 94 9a 09 	call	0x1334	; 0x1334 <DIO_PinRead>
					if(enuDigitalState == LOW)
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	88 23       	and	r24, r24
     e02:	a1 f3       	breq	.-24     	; 0xdec <Keypad_GetChar+0x5e>
					DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);
					/* Checking if a column is attached to a row / key is pressed to raise a flag and break the loop */
					if(enuDigitalState == LOW)
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
     e04:	bb 24       	eor	r11, r11
     e06:	b3 94       	inc	r11
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
     e08:	d3 94       	inc	r13
     e0a:	2d 2d       	mov	r18, r13
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 91 1d 07 	lds	r20, 0x071D	; 0x80071d <enuKeypadTypeState>
     e12:	84 e0       	ldi	r24, 0x04	; 4
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	84 1b       	sub	r24, r20
     e18:	91 09       	sbc	r25, r1
     e1a:	28 17       	cp	r18, r24
     e1c:	39 07       	cpc	r19, r25
     e1e:	10 f4       	brcc	.+4      	; 0xe24 <Keypad_GetChar+0x96>
     e20:	bb 20       	and	r11, r11
     e22:	a9 f2       	breq	.-86     	; 0xdce <Keypad_GetChar+0x40>
					else
					{
					}					
				}
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
     e24:	f7 01       	movw	r30, r14
     e26:	e6 5f       	subi	r30, 0xF6	; 246
     e28:	fc 4f       	sbci	r31, 0xFC	; 252
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	80 81       	ld	r24, Z
     e2e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
     e32:	c3 94       	inc	r12
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <Keypad_GetChar+0xaa>
     e36:	c1 2c       	mov	r12, r1
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	8c 15       	cp	r24, r12
     e3c:	40 f0       	brcs	.+16     	; 0xe4e <Keypad_GetChar+0xc0>
     e3e:	bb 20       	and	r11, r11
     e40:	09 f4       	brne	.+2      	; 0xe44 <Keypad_GetChar+0xb6>
     e42:	ba cf       	rjmp	.-140    	; 0xdb8 <Keypad_GetChar+0x2a>
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <Keypad_GetChar+0xc0>
     e46:	4c 01       	movw	r8, r24
     e48:	d1 2c       	mov	r13, r1
     e4a:	c1 2c       	mov	r12, r1
     e4c:	b1 2c       	mov	r11, r1
	uint8_t u8ColIndex = 0;
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
     e4e:	bb 20       	and	r11, r11
     e50:	91 f3       	breq	.-28     	; 0xe36 <Keypad_GetChar+0xa8>
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
			}
		}
		/* Mapping the pressed key to get its corresponding value */
		*pu8Data = Keypad_CharMapping(u8ColIndex, u8RowIndex);
     e52:	6c 2d       	mov	r22, r12
     e54:	8d 2d       	mov	r24, r13
     e56:	0e 94 54 06 	call	0xca8	; 0xca8 <Keypad_CharMapping>
     e5a:	f4 01       	movw	r30, r8
     e5c:	80 83       	st	Z, r24
		enuRetVar = E_OK;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
     e60:	0f 90       	pop	r0
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	df 90       	pop	r13
     e70:	cf 90       	pop	r12
     e72:	bf 90       	pop	r11
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	08 95       	ret

00000e7a <LCD_Delay>:
* Parameters	: u8DelayValue
* Return Value	: void
* Description  : Give the LCD controller sufficient time to receive commands
*************************************************************************************************/
static void LCD_Delay(uint16_t u16DelayValue)
{
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	00 d0       	rcall	.+0      	; 0xe84 <LCD_Delay+0xa>
     e84:	00 d0       	rcall	.+0      	; 0xe86 <LCD_Delay+0xc>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32LoopIndex;
	for(u32LoopIndex = 0; (u32LoopIndex < (u16DelayValue * 4)); u32LoopIndex++);
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	1a 82       	std	Y+2, r1	; 0x02
     e8e:	1b 82       	std	Y+3, r1	; 0x03
     e90:	1c 82       	std	Y+4, r1	; 0x04
     e92:	0c c0       	rjmp	.+24     	; 0xeac <LCD_Delay+0x32>
     e94:	49 81       	ldd	r20, Y+1	; 0x01
     e96:	5a 81       	ldd	r21, Y+2	; 0x02
     e98:	6b 81       	ldd	r22, Y+3	; 0x03
     e9a:	7c 81       	ldd	r23, Y+4	; 0x04
     e9c:	4f 5f       	subi	r20, 0xFF	; 255
     e9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ea0:	6f 4f       	sbci	r22, 0xFF	; 255
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	49 83       	std	Y+1, r20	; 0x01
     ea6:	5a 83       	std	Y+2, r21	; 0x02
     ea8:	6b 83       	std	Y+3, r22	; 0x03
     eaa:	7c 83       	std	Y+4, r23	; 0x04
     eac:	ac 01       	movw	r20, r24
     eae:	44 0f       	add	r20, r20
     eb0:	55 1f       	adc	r21, r21
     eb2:	44 0f       	add	r20, r20
     eb4:	55 1f       	adc	r21, r21
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	09 81       	ldd	r16, Y+1	; 0x01
     ebc:	1a 81       	ldd	r17, Y+2	; 0x02
     ebe:	2b 81       	ldd	r18, Y+3	; 0x03
     ec0:	3c 81       	ldd	r19, Y+4	; 0x04
     ec2:	04 17       	cp	r16, r20
     ec4:	15 07       	cpc	r17, r21
     ec6:	26 07       	cpc	r18, r22
     ec8:	37 07       	cpc	r19, r23
     eca:	20 f3       	brcs	.-56     	; 0xe94 <LCD_Delay+0x1a>
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <LCD_SendCommand>:
* Parameters	: u8CommandId
* Return Value	: void
* Description  : Send a given Command to the LCD controller
*************************************************************************************************/
static void LCD_SendCommand(uint8_t u8CommandId)
{
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	c8 2f       	mov	r28, r24
	uint8_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

    /* Sending a LOW value on RS to select the u8Command mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, LOW);
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	85 e1       	ldi	r24, 0x15	; 21
     eea:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	86 e1       	ldi	r24, 0x16	; 22
     ef2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
     ef6:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     efa:	88 30       	cpi	r24, 0x08	; 8
     efc:	e1 f4       	brne	.+56     	; 0xf36 <LCD_SendCommand+0x58>
     efe:	0d c0       	rjmp	.+26     	; 0xf1a <LCD_SendCommand+0x3c>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
		{
			/* Getting the LSB of u8CommandId */
         u8DIOData = u8CommandId & 0x01;
     f00:	6c 2f       	mov	r22, r28
     f02:	61 70       	andi	r22, 0x01	; 1
         /* Converting from binary value into 8-bit value to be used in DIO_PinWrite() API *
          * e.g: u8DIOData = 0x01 -> u8DIOData = 0xFE + 1 = 0xFF (HIGH)                    *
          *      u8DIOData = 0x00 -> u8DIOData = 0xFF + 1 = 0x00 (LOW)                     */
			u8DIOData = (~u8DIOData)+ 1;
     f04:	61 95       	neg	r22
         /* Shifting the u8CommandId variable by one for the next loop iteration */
			u8CommandId = u8CommandId >> 1;
     f06:	c6 95       	lsr	r28
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
     f08:	ed 2f       	mov	r30, r29
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	ee 5e       	subi	r30, 0xEE	; 238
     f0e:	fc 4f       	sbci	r31, 0xFC	; 252
     f10:	80 81       	ld	r24, Z
     f12:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f16:	df 5f       	subi	r29, 0xFF	; 255
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <LCD_SendCommand+0x3e>
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
     f1c:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     f20:	d8 17       	cp	r29, r24
     f22:	70 f3       	brcs	.-36     	; 0xf00 <LCD_SendCommand+0x22>
			u8CommandId = u8CommandId >> 1;
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	87 e1       	ldi	r24, 0x17	; 23
     f28:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	87 e1       	ldi	r24, 0x17	; 23
     f30:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
     f34:	3e c0       	rjmp	.+124    	; 0xfb2 <LCD_SendCommand+0xd4>
	}
   /* Sending the 8-bit u8Command on the 4 data pins twice */
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
     f36:	84 30       	cpi	r24, 0x04	; 4
     f38:	e1 f5       	brne	.+120    	; 0xfb2 <LCD_SendCommand+0xd4>
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
     f3a:	1c 2f       	mov	r17, r28
     f3c:	12 95       	swap	r17
     f3e:	1f 70       	andi	r17, 0x0F	; 15
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f40:	d0 e0       	ldi	r29, 0x00	; 0
     f42:	0c c0       	rjmp	.+24     	; 0xf5c <LCD_SendCommand+0x7e>
		{
			u8DIOData = u8Command & 0x01;
     f44:	61 2f       	mov	r22, r17
     f46:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     f48:	61 95       	neg	r22
			u8Command = u8Command >> 1;
     f4a:	16 95       	lsr	r17
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
     f4c:	ed 2f       	mov	r30, r29
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	e2 5f       	subi	r30, 0xF2	; 242
     f52:	fc 4f       	sbci	r31, 0xFC	; 252
     f54:	80 81       	ld	r24, Z
     f56:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f5a:	df 5f       	subi	r29, 0xFF	; 255
     f5c:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     f60:	d8 17       	cp	r29, r24
     f62:	80 f3       	brcs	.-32     	; 0xf44 <LCD_SendCommand+0x66>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the MSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	87 e1       	ldi	r24, 0x17	; 23
     f68:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	87 e1       	ldi	r24, 0x17	; 23
     f70:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
     f74:	cf 70       	andi	r28, 0x0F	; 15
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f76:	d0 e0       	ldi	r29, 0x00	; 0
     f78:	0c c0       	rjmp	.+24     	; 0xf92 <LCD_SendCommand+0xb4>
		{
			u8DIOData = u8Command & 0x01;
     f7a:	6c 2f       	mov	r22, r28
     f7c:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     f7e:	61 95       	neg	r22
			u8Command = u8Command >> 1;
     f80:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
     f82:	ed 2f       	mov	r30, r29
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	e2 5f       	subi	r30, 0xF2	; 242
     f88:	fc 4f       	sbci	r31, 0xFC	; 252
     f8a:	80 81       	ld	r24, Z
     f8c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f90:	df 5f       	subi	r29, 0xFF	; 255
     f92:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     f96:	d8 17       	cp	r29, r24
     f98:	80 f3       	brcs	.-32     	; 0xf7a <LCD_SendCommand+0x9c>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
        /* Triggering a falling edge on EN pin to send the LSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	87 e1       	ldi	r24, 0x17	; 23
     f9e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	87 e1       	ldi	r24, 0x17	; 23
     fa6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		LCD_Delay(200);
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Delay>
	}
	else
	{
	}
}
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	08 95       	ret

00000fba <LCD_SendData>:
* Parameters	: u8DataId
* Return Value	: void
* Description  : Send a given Data to the LCD controller
*************************************************************************************************/
static void LCD_SendData(uint8_t u8DataId)
{
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	c8 2f       	mov	r28, r24
	uint16_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	85 e1       	ldi	r24, 0x15	; 21
     fc8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	86 e1       	ldi	r24, 0x16	; 22
     fd0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
     fd4:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     fd8:	88 30       	cpi	r24, 0x08	; 8
     fda:	f9 f4       	brne	.+62     	; 0x101a <LCD_SendData+0x60>
     fdc:	0d c0       	rjmp	.+26     	; 0xff8 <LCD_SendData+0x3e>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
		{
			u8DIOData = u8DataId & 0x01;
     fde:	6c 2f       	mov	r22, r28
     fe0:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     fe2:	61 95       	neg	r22
			u8DataId = u8DataId >> 1;
     fe4:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
     fe6:	f8 01       	movw	r30, r16
     fe8:	ee 5e       	subi	r30, 0xEE	; 238
     fea:	fc 4f       	sbci	r31, 0xFC	; 252
     fec:	80 81       	ld	r24, Z
     fee:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     ff2:	0f 5f       	subi	r16, 0xFF	; 255
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <LCD_SendData+0x42>
     ff8:	00 e0       	ldi	r16, 0x00	; 0
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	08 17       	cp	r16, r24
    1004:	19 07       	cpc	r17, r25
    1006:	58 f3       	brcs	.-42     	; 0xfde <LCD_SendData+0x24>
			u8DIOData = u8DataId & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8DataId = u8DataId >> 1;
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	87 e1       	ldi	r24, 0x17	; 23
    100c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	87 e1       	ldi	r24, 0x17	; 23
    1014:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
    1018:	40 c0       	rjmp	.+128    	; 0x109a <LCD_SendData+0xe0>
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	f1 f5       	brne	.+124    	; 0x109a <LCD_SendData+0xe0>
	{
		u8Command = (u8DataId & 0xF0) >> 4;
    101e:	dc 2f       	mov	r29, r28
    1020:	d2 95       	swap	r29
    1022:	df 70       	andi	r29, 0x0F	; 15
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1024:	00 e0       	ldi	r16, 0x00	; 0
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	0c c0       	rjmp	.+24     	; 0x1042 <LCD_SendData+0x88>
		{
			u8DIOData = u8Command & 0x01;
    102a:	6d 2f       	mov	r22, r29
    102c:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
    102e:	61 95       	neg	r22
			u8Command = u8Command >> 1;
    1030:	d6 95       	lsr	r29
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    1032:	f8 01       	movw	r30, r16
    1034:	e2 5f       	subi	r30, 0xF2	; 242
    1036:	fc 4f       	sbci	r31, 0xFC	; 252
    1038:	80 81       	ld	r24, Z
    103a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		u8Command = (u8DataId & 0xF0) >> 4;
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    103e:	0f 5f       	subi	r16, 0xFF	; 255
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	08 17       	cp	r16, r24
    104a:	19 07       	cpc	r17, r25
    104c:	70 f3       	brcs	.-36     	; 0x102a <LCD_SendData+0x70>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    104e:	61 e0       	ldi	r22, 0x01	; 1
    1050:	87 e1       	ldi	r24, 0x17	; 23
    1052:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	87 e1       	ldi	r24, 0x17	; 23
    105a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		u8Command = (u8DataId & 0x0F);
    105e:	cf 70       	andi	r28, 0x0F	; 15
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1060:	00 e0       	ldi	r16, 0x00	; 0
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	0c c0       	rjmp	.+24     	; 0x107e <LCD_SendData+0xc4>
		{
			u8DIOData = u8Command & 0x01;
    1066:	6c 2f       	mov	r22, r28
    1068:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
    106a:	61 95       	neg	r22
			u8Command = u8Command >> 1;
    106c:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    106e:	f8 01       	movw	r30, r16
    1070:	e2 5f       	subi	r30, 0xF2	; 242
    1072:	fc 4f       	sbci	r31, 0xFC	; 252
    1074:	80 81       	ld	r24, Z
    1076:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
		u8Command = (u8DataId & 0x0F);
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    107a:	0f 5f       	subi	r16, 0xFF	; 255
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	08 17       	cp	r16, r24
    1086:	19 07       	cpc	r17, r25
    1088:	70 f3       	brcs	.-36     	; 0x1066 <LCD_SendData+0xac>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	87 e1       	ldi	r24, 0x17	; 23
    108e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	87 e1       	ldi	r24, 0x17	; 23
    1096:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
	}
	else
	{
	}
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <LCD_Init>:
* Parameters	: enuLCDDataMode, enuLCDCursorMode
* Return Value	: enuErrorStatus_t
* Description  : Initialize LCD module according to the configuration parameters
*************************************************************************************************/
enuErrorStatus_t LCD_Init(enuLCDDataMode_t enuLCDDataMode, enuLCDCursorMode_t enuLCDCursorMode)
{
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if(((enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)		|| (enuLCDDataMode == LCD_DATA_EIGHT_BIT_MODE))	&&
    10aa:	84 30       	cpi	r24, 0x04	; 4
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <LCD_Init+0x10>
    10ae:	88 30       	cpi	r24, 0x08	; 8
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <LCD_Init+0x10>
    10b2:	51 c0       	rjmp	.+162    	; 0x1156 <LCD_Init+0xb2>
		 (enuLCDCursorMode > LCD_CUROSR_MODE_MIN_VALUE)	&& (enuLCDCursorMode < LCD_CUROSR_MODE_MAX_VALUE))
    10b4:	62 30       	cpi	r22, 0x02	; 2
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <LCD_Init+0x16>
    10b8:	50 c0       	rjmp	.+160    	; 0x115a <LCD_Init+0xb6>
    10ba:	16 2f       	mov	r17, r22
    10bc:	c8 2f       	mov	r28, r24
	{
		enuLCDDataModeState = enuLCDDataMode;
    10be:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <enuLCDDataModeState>
		/* Initializing RS pin as output */
		DIO_PinInit(LCD_RS_PIN_NO, OUTPUT, NO_CONNECTION);
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	61 e0       	ldi	r22, 0x01	; 1
    10c6:	85 e1       	ldi	r24, 0x15	; 21
    10c8:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
		/* Initializing RW pin as output */
		DIO_PinInit(LCD_RW_PIN_NO, OUTPUT, NO_CONNECTION);
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	86 e1       	ldi	r24, 0x16	; 22
    10d2:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
		/* Initializing EN pin as output */
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	87 e1       	ldi	r24, 0x17	; 23
    10dc:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
    10e0:	c4 30       	cpi	r28, 0x04	; 4
    10e2:	69 f0       	breq	.+26     	; 0x10fe <LCD_Init+0x5a>
    10e4:	d0 e0       	ldi	r29, 0x00	; 0
    10e6:	22 c0       	rjmp	.+68     	; 0x112c <LCD_Init+0x88>
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    10e8:	ed 2f       	mov	r30, r29
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	e2 5f       	subi	r30, 0xF2	; 242
    10ee:	fc 4f       	sbci	r31, 0xFC	; 252
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	80 81       	ld	r24, Z
    10f6:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    10fa:	df 5f       	subi	r29, 0xFF	; 255
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <LCD_Init+0x5c>
    10fe:	d0 e0       	ldi	r29, 0x00	; 0
    1100:	dc 17       	cp	r29, r28
    1102:	90 f3       	brcs	.-28     	; 0x10e8 <LCD_Init+0x44>
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}
			/* Initializing the LCD module to work as 4-bit data mode */
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_ONE_COMMAND);
    1104:	83 e3       	ldi	r24, 0x33	; 51
    1106:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_TWO_COMMAND);
    110a:	82 e3       	ldi	r24, 0x32	; 50
    110c:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
    1110:	88 e2       	ldi	r24, 0x28	; 40
    1112:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <LCD_Init+0x92>
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    1118:	ed 2f       	mov	r30, r29
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	ee 5e       	subi	r30, 0xEE	; 238
    111e:	fc 4f       	sbci	r31, 0xFC	; 252
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	80 81       	ld	r24, Z
    1126:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
		}
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    112a:	df 5f       	subi	r29, 0xFF	; 255
    112c:	dc 17       	cp	r29, r28
    112e:	a0 f3       	brcs	.-24     	; 0x1118 <LCD_Init+0x74>
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}		
			/* Initializing the LCD module to work as 8-bit data mode */
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_EIGHT_BIT_MODE_COMMAND);
    1130:	88 e3       	ldi	r24, 0x38	; 56
    1132:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
		}
		/* Selecting whether to turn on/off the blinking cursor */
		if(enuLCDCursorMode == LCD_CURSOR_OFF)
    1136:	11 11       	cpse	r17, r1
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <LCD_Init+0x9e>
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF_COMMAND);
    113a:	8c e0       	ldi	r24, 0x0C	; 12
    113c:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
    1140:	03 c0       	rjmp	.+6      	; 0x1148 <LCD_Init+0xa4>
		}
		else
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING_COMMAND);
    1142:	8e e0       	ldi	r24, 0x0E	; 14
    1144:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
		}
		/* Clearing the LCD screen before use */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
		enuLCDState = LCD_INIT_DONE;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <enuLCDState>
		enuRetVar = E_OK;
    1154:	03 c0       	rjmp	.+6      	; 0x115c <LCD_Init+0xb8>
	}
	else
	{
		enuRetVar = E_ERROR;
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	01 c0       	rjmp	.+2      	; 0x115c <LCD_Init+0xb8>
    115a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
    1162:	08 95       	ret

00001164 <LCD_Clear>:
*************************************************************************************************/
enuErrorStatus_t LCD_Clear(void)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    1164:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <enuLCDState>
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	21 f4       	brne	.+8      	; 0x1174 <LCD_Clear+0x10>
	{
		/* Clearing the screen */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    116c:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
		enuRetVar = E_OK;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    1174:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    1176:	08 95       	ret

00001178 <LCD_SetCursorPosition>:
*************************************************************************************************/
enuErrorStatus_t LCD_SetCursorPosition(uint8_t u8Horizontal, uint8_t u8Vertical)
{
	enuErrorStatus_t enuRetVar;
	
	if((u8Vertical == 0) && (enuLCDState == LCD_INIT_DONE))
    1178:	61 11       	cpse	r22, r1
    117a:	09 c0       	rjmp	.+18     	; 0x118e <LCD_SetCursorPosition+0x16>
    117c:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <enuLCDState>
    1180:	91 30       	cpi	r25, 0x01	; 1
    1182:	29 f4       	brne	.+10     	; 0x118e <LCD_SetCursorPosition+0x16>
	{
		/* Moving the cursor in the selected place in the first row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_FIRST_LINE_COMMAND + u8Horizontal);
    1184:	80 58       	subi	r24, 0x80	; 128
    1186:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
		enuRetVar = E_OK;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	08 95       	ret
	}
	else if((u8Vertical == 1) && (enuLCDState == LCD_INIT_DONE))
    118e:	61 30       	cpi	r22, 0x01	; 1
    1190:	49 f4       	brne	.+18     	; 0x11a4 <LCD_SetCursorPosition+0x2c>
    1192:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <enuLCDState>
    1196:	91 30       	cpi	r25, 0x01	; 1
    1198:	39 f4       	brne	.+14     	; 0x11a8 <LCD_SetCursorPosition+0x30>
	{
		/* Moving the cursor in the selected place in the second row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_SECOND_LINE_COMMAND + u8Horizontal);
    119a:	80 54       	subi	r24, 0x40	; 64
    119c:	0e 94 6f 07 	call	0xede	; 0xede <LCD_SendCommand>
		enuRetVar = E_OK;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	08 95       	ret
    11a8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    11aa:	08 95       	ret

000011ac <LCD_DisplayChar>:
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayChar(uint8_t u8Char)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    11ac:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <enuLCDState>
    11b0:	91 30       	cpi	r25, 0x01	; 1
    11b2:	21 f4       	brne	.+8      	; 0x11bc <LCD_DisplayChar+0x10>
	{
		/* Displaying the character data on the LCD */
      LCD_SendData(u8Char);
    11b4:	0e 94 dd 07 	call	0xfba	; 0xfba <LCD_SendData>
		enuRetVar = E_OK;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    11be:	08 95       	ret

000011c0 <LCD_DisplayString>:
* Parameters	: pu8String
* Return Value	: enuErrorStatus_t
* Description  : Display a string on the LCD screen
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayString(uint8_t* pu8String)
{
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ec 01       	movw	r28, r24
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    11c6:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <enuLCDState>
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	29 f0       	breq	.+10     	; 0x11d8 <LCD_DisplayString+0x18>
		}
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <LCD_DisplayString+0x20>
	if(enuLCDState == LCD_INIT_DONE)
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
		{
			LCD_SendData(*pu8String);
    11d2:	0e 94 dd 07 	call	0xfba	; 0xfba <LCD_SendData>
			pu8String ++;
    11d6:	21 96       	adiw	r28, 0x01	; 1
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
    11d8:	88 81       	ld	r24, Y
    11da:	81 11       	cpse	r24, r1
    11dc:	fa cf       	rjmp	.-12     	; 0x11d2 <LCD_DisplayString+0x12>
		{
			LCD_SendData(*pu8String);
			pu8String ++;
		}
		enuRetVar = E_OK;
    11de:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <LM35_Init>:
* Description  : Initialize the LM35 sensor with the ADC module
*************************************************************************************************/
void LM35_Init(void)
{
	/* Initializing the ADC module to start reading from the LM35 sensor */
	ADC_Init(ADC_AVCC, ADC_DISABLE_LEFT_ADJUST_RESULT, ADC_DIVISOR_FACTOR_IS_128);
    11e6:	47 e0       	ldi	r20, 0x07	; 7
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 c6 09 	call	0x138c	; 0x138c <ADC_Init>
	enuLM35State = LM35_INIT_DONE;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <enuLM35State>
    11f6:	08 95       	ret

000011f8 <LM35_ReadTemperature>:
* Parameters	: pu8Temperature
* Return Value	: enuErrorStatus_t
* Description  : Read the value of the sensor's temperature
*************************************************************************************************/
enuErrorStatus_t LM35_ReadTemperature(uint8_t* pu8Temperature)
{
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	00 d0       	rcall	.+0      	; 0x1202 <LM35_ReadTemperature+0xa>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9c 01       	movw	r18, r24
	enuErrorStatus_t enuRetVar;
	uint16_t u16ADCData;
	
	if(enuLM35State == LM35_INIT_DONE)
    1208:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <enuLM35State>
    120c:	91 30       	cpi	r25, 0x01	; 1
    120e:	f9 f4       	brne	.+62     	; 0x124e <LM35_ReadTemperature+0x56>
    1210:	89 01       	movw	r16, r18
	{
		/* Reading the value of the ADC channel connected to the LM35 sensor */
		ADC_ReadChannel(LM35_ANALOG_DATA_PIN_NO, &u16ADCData);
    1212:	be 01       	movw	r22, r28
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <ADC_ReadChannel>
		/* Converting the ADC value from voltage to Celsius */
		*pu8Temperature = LM35_CALCULATE_TEMPERATURE(u16ADCData);
    121e:	69 81       	ldd	r22, Y+1	; 0x01
    1220:	7a 81       	ldd	r23, Y+2	; 0x02
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__floatunsisf>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e4       	ldi	r19, 0x40	; 64
    122e:	4c e9       	ldi	r20, 0x9C	; 156
    1230:	50 e4       	ldi	r21, 0x40	; 64
    1232:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__mulsf3>
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e2       	ldi	r20, 0x20	; 32
    123c:	51 e4       	ldi	r21, 0x41	; 65
    123e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__divsf3>
    1242:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fixunssfsi>
    1246:	f8 01       	movw	r30, r16
    1248:	60 83       	st	Z, r22
		enuRetVar = E_OK;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <LM35_ReadTemperature+0x58>
	}
	else
	{
		enuRetVar = E_ERROR;
    124e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	08 95       	ret

0000125e <main>:



int main(void)
{
	APP_Init();
    125e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <APP_Init>

	while(1)
	{
		APP_Update();
    1262:	0e 94 88 03 	call	0x710	; 0x710 <APP_Update>
    1266:	fd cf       	rjmp	.-6      	; 0x1262 <main+0x4>

00001268 <DIO_PinInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    1268:	80 32       	cpi	r24, 0x20	; 32
    126a:	b0 f5       	brcc	.+108    	; 0x12d8 <DIO_PinInit+0x70>
    126c:	62 30       	cpi	r22, 0x02	; 2
    126e:	b0 f5       	brcc	.+108    	; 0x12dc <DIO_PinInit+0x74>
    1270:	42 30       	cpi	r20, 0x02	; 2
    1272:	b0 f5       	brcc	.+108    	; 0x12e0 <DIO_PinInit+0x78>
    1274:	e8 2f       	mov	r30, r24
    1276:	e6 95       	lsr	r30
    1278:	e6 95       	lsr	r30
    127a:	e6 95       	lsr	r30
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	e6 5e       	subi	r30, 0xE6	; 230
    1280:	fc 4f       	sbci	r31, 0xFC	; 252
    1282:	e0 81       	ld	r30, Z
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	df 01       	movw	r26, r30
    1288:	5e 91       	ld	r21, -X
    128a:	98 2f       	mov	r25, r24
    128c:	97 70       	andi	r25, 0x07	; 7
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	09 2e       	mov	r0, r25
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_PinInit+0x32>
    1296:	22 0f       	add	r18, r18
    1298:	33 1f       	adc	r19, r19
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_PinInit+0x2e>
    129e:	20 95       	com	r18
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	09 2e       	mov	r0, r25
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_PinInit+0x42>
    12a6:	66 0f       	add	r22, r22
    12a8:	77 1f       	adc	r23, r23
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_PinInit+0x3e>
    12ae:	35 2f       	mov	r19, r21
    12b0:	32 23       	and	r19, r18
    12b2:	63 2b       	or	r22, r19
    12b4:	6c 93       	st	X, r22
    12b6:	30 81       	ld	r19, Z
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_PinInit+0x58>
    12bc:	44 0f       	add	r20, r20
    12be:	55 1f       	adc	r21, r21
    12c0:	9a 95       	dec	r25
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_PinInit+0x54>
    12c4:	23 23       	and	r18, r19
    12c6:	42 2b       	or	r20, r18
    12c8:	40 83       	st	Z, r20
    12ca:	e8 2f       	mov	r30, r24
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	ee 5d       	subi	r30, 0xDE	; 222
    12d0:	f8 4f       	sbci	r31, 0xF8	; 248
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
    12d6:	08 95       	ret
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	08 95       	ret
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	08 95       	ret
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	08 95       	ret

000012e4 <DIO_PinWrite>:
    12e4:	e8 2f       	mov	r30, r24
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	ee 5d       	subi	r30, 0xDE	; 222
    12ea:	f8 4f       	sbci	r31, 0xF8	; 248
    12ec:	90 81       	ld	r25, Z
    12ee:	91 30       	cpi	r25, 0x01	; 1
    12f0:	f9 f4       	brne	.+62     	; 0x1330 <DIO_PinWrite+0x4c>
    12f2:	e8 2f       	mov	r30, r24
    12f4:	e6 95       	lsr	r30
    12f6:	e6 95       	lsr	r30
    12f8:	e6 95       	lsr	r30
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	e6 5e       	subi	r30, 0xE6	; 230
    12fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1300:	e0 81       	ld	r30, Z
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	90 81       	ld	r25, Z
    1306:	87 70       	andi	r24, 0x07	; 7
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	08 2e       	mov	r0, r24
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_PinWrite+0x30>
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_PinWrite+0x2c>
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <DIO_PinWrite+0x3c>
    131c:	66 0f       	add	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	8a 95       	dec	r24
    1322:	e2 f7       	brpl	.-8      	; 0x131c <DIO_PinWrite+0x38>
    1324:	20 95       	com	r18
    1326:	29 23       	and	r18, r25
    1328:	62 2b       	or	r22, r18
    132a:	60 83       	st	Z, r22
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	08 95       	ret
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret

00001334 <DIO_PinRead>:
*************************************************************************************************/
enuErrorStatus_t DIO_PinRead(enuDIOPinNo_t enuDIOPinNo, uint8_t* pu8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    1334:	e8 2f       	mov	r30, r24
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	ee 5d       	subi	r30, 0xDE	; 222
    133a:	f8 4f       	sbci	r31, 0xF8	; 248
    133c:	90 81       	ld	r25, Z
    133e:	91 30       	cpi	r25, 0x01	; 1
    1340:	19 f5       	brne	.+70     	; 0x1388 <DIO_PinRead+0x54>
	{
		/* Reading the value from the corresponding pin */
		*pu8PinData = GET_BIT(PINx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo));
    1342:	e8 2f       	mov	r30, r24
    1344:	e6 95       	lsr	r30
    1346:	e6 95       	lsr	r30
    1348:	e6 95       	lsr	r30
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	e6 5e       	subi	r30, 0xE6	; 230
    134e:	fc 4f       	sbci	r31, 0xFC	; 252
    1350:	e0 81       	ld	r30, Z
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	32 97       	sbiw	r30, 0x02	; 2
    1356:	90 81       	ld	r25, Z
    1358:	87 70       	andi	r24, 0x07	; 7
    135a:	21 e0       	ldi	r18, 0x01	; 1
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	a9 01       	movw	r20, r18
    1360:	08 2e       	mov	r0, r24
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_PinRead+0x34>
    1364:	44 0f       	add	r20, r20
    1366:	55 1f       	adc	r21, r21
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_PinRead+0x30>
    136c:	29 2f       	mov	r18, r25
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	24 23       	and	r18, r20
    1372:	35 23       	and	r19, r21
    1374:	a9 01       	movw	r20, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_PinRead+0x48>
    1378:	55 95       	asr	r21
    137a:	47 95       	ror	r20
    137c:	8a 95       	dec	r24
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_PinRead+0x44>
    1380:	fb 01       	movw	r30, r22
    1382:	40 83       	st	Z, r20
		enuRetVar = E_OK;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    1388:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
    138a:	08 95       	ret

0000138c <ADC_Init>:
*************************************************************************************************/
enuErrorStatus_t ADC_Init(enuADCReferenceSelectionBits_t enuADCReferenceSelectionBits, enuADCLeftAdjustResult_t enuADCLeftAdjustResult, enuADCPrescalerSelectBits_t enuADCPrescalerSelectBits)
{
	enuErrorStatus_t enuRetVar;
    
	if((enuADCReferenceSelectionBits > ADC_REFERENCE_SELECTION_BITS_MIN_VALUE)				&& (enuADCReferenceSelectionBits < ADC_REFERENCE_SELECTION_BITS_MAX_VALUE) &&
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	48 f5       	brcc	.+82     	; 0x13e2 <ADC_Init+0x56>
		(enuADCReferenceSelectionBits != ADC_REFERENCE_SELECTION_BITS_NOT_VALID_VALUE)	&& (enuADCLeftAdjustResult > ADC_LEFT_ADJUST_RESULT_MIN_VALUE)					&& 
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	49 f1       	breq	.+82     	; 0x13e6 <ADC_Init+0x5a>
		(enuADCLeftAdjustResult < ADC_LEFT_ADJUST_RESULT_MAX_VALUE)								&& (enuADCPrescalerSelectBits > ADC_PRESCALER_SELECT_BITS_MIN_VALUE)			&& 
    1394:	62 30       	cpi	r22, 0x02	; 2
    1396:	48 f5       	brcc	.+82     	; 0x13ea <ADC_Init+0x5e>
    1398:	48 30       	cpi	r20, 0x08	; 8
    139a:	48 f5       	brcc	.+82     	; 0x13ee <ADC_Init+0x62>
		(enuADCPrescalerSelectBits < ADC_PRESCALER_SELECT_BITS_MAX_VALUE))
	{	   
		/* Selecting whether the voltage reference is AREF, AVCC or Internal VREF */
		ASSIGN_BITS(ADMUX_R, ADC_REFERENCE_SELECT_START_BIT, enuADCReferenceSelectionBits, ADC_REFERENCE_SELECT_MASK);
    139c:	27 b1       	in	r18, 0x07	; 7
    139e:	30 e4       	ldi	r19, 0x40	; 64
    13a0:	83 9f       	mul	r24, r19
    13a2:	c0 01       	movw	r24, r0
    13a4:	11 24       	eor	r1, r1
    13a6:	92 2f       	mov	r25, r18
    13a8:	9f 73       	andi	r25, 0x3F	; 63
    13aa:	89 2b       	or	r24, r25
    13ac:	87 b9       	out	0x07, r24	; 7
		/* Selecting whether the output is right adjusted or left adjusted */
		ASSIGN_BIT(ADMUX_R, ADC_LEFT_ADJUST_RESULT_BIT, enuADCLeftAdjustResult);
    13ae:	27 b1       	in	r18, 0x07	; 7
    13b0:	30 e2       	ldi	r19, 0x20	; 32
    13b2:	63 9f       	mul	r22, r19
    13b4:	c0 01       	movw	r24, r0
    13b6:	11 24       	eor	r1, r1
    13b8:	92 2f       	mov	r25, r18
    13ba:	9f 7d       	andi	r25, 0xDF	; 223
    13bc:	89 2b       	or	r24, r25
    13be:	87 b9       	out	0x07, r24	; 7
		/* Saving the state of left adjust result into a temporary variable to be used in the other API */
		enuADCLeftAdjustResultState = enuADCLeftAdjustResult;
    13c0:	60 93 42 07 	sts	0x0742, r22	; 0x800742 <enuADCLeftAdjustResultState>
		/* Selecting the value of the prescaler divisor factor */
		ASSIGN_BITS(ADCSRA_R, ADC_PRESCALER_SELECT_START_BIT, ADC_PRESCALER_SELECT_VALUE(enuADCPrescalerSelectBits), ADC_PRESCALER_SELECT_MASK);
    13c4:	86 b1       	in	r24, 0x06	; 6
    13c6:	88 7f       	andi	r24, 0xF8	; 248
    13c8:	4f 5f       	subi	r20, 0xFF	; 255
    13ca:	48 2b       	or	r20, r24
    13cc:	46 b9       	out	0x06, r20	; 6
		/* Enabling the ADC module */
		SET_BIT(ADCSRA_R, ADC_MODULE_EN_BIT);
    13ce:	86 b1       	in	r24, 0x06	; 6
    13d0:	80 68       	ori	r24, 0x80	; 128
    13d2:	86 b9       	out	0x06, r24	; 6
      CLEAR_BIT(ADCSRA_R,3);
    13d4:	86 b1       	in	r24, 0x06	; 6
    13d6:	87 7f       	andi	r24, 0xF7	; 247
    13d8:	86 b9       	out	0x06, r24	; 6
		enuADCState = ADC_INIT_DONE;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <enuADCState>
		enuRetVar = E_OK;
    13e0:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	08 95       	ret
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	08 95       	ret
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	08 95       	ret
    13ee:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    13f0:	08 95       	ret

000013f2 <ADC_ReadChannel>:
*************************************************************************************************/
enuErrorStatus_t ADC_ReadChannel(enuADCAnalogChannel_t enuAnalogChannel, uint16_t* pu16Data)
{
	enuErrorStatus_t enuRetVar;
	
   if(enuADCState == ADC_INIT_DONE)
    13f2:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <enuADCState>
    13f6:	91 30       	cpi	r25, 0x01	; 1
    13f8:	51 f5       	brne	.+84     	; 0x144e <ADC_ReadChannel+0x5c>
   {
	   /* Selecting the analog channel(s) used (Single or Differential Input) */
	   ASSIGN_BITS(ADMUX_R, ADC_CHANNEL_SELECT_START_BIT, enuAnalogChannel, ADC_CHANNEL_SELECT_MASK);
    13fa:	97 b1       	in	r25, 0x07	; 7
    13fc:	90 7e       	andi	r25, 0xE0	; 224
    13fe:	89 2b       	or	r24, r25
    1400:	87 b9       	out	0x07, r24	; 7
	   /* Starting the conversion process */
	   SET_BIT(ADCSRA_R, ADC_START_CONVERSION_EN_BIT);
    1402:	86 b1       	in	r24, 0x06	; 6
    1404:	80 64       	ori	r24, 0x40	; 64
    1406:	86 b9       	out	0x06, r24	; 6
		/* Waiting for the ADC conversion until it has successfully been completely */
		while(IS_BIT_CLEAR(ADCSRA_R, ADC_CONVERSION_COMPLETE_FLAG_BIT));
    1408:	34 9b       	sbis	0x06, 4	; 6
    140a:	fe cf       	rjmp	.-4      	; 0x1408 <ADC_ReadChannel+0x16>
		/* Reading the value from the corresponding ADC channel */
      
		if(enuADCLeftAdjustResultState == ADC_DISABLE_LEFT_ADJUST_RESULT)
    140c:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <enuADCLeftAdjustResultState>
    1410:	81 11       	cpse	r24, r1
    1412:	0c c0       	rjmp	.+24     	; 0x142c <ADC_ReadChannel+0x3a>
		{
			*pu16Data = ADC_VALUE_RIGHT_ADJUSTED;
    1414:	24 b1       	in	r18, 0x04	; 4
    1416:	85 b1       	in	r24, 0x05	; 5
    1418:	83 70       	andi	r24, 0x03	; 3
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	98 2f       	mov	r25, r24
    141e:	88 27       	eor	r24, r24
    1420:	82 2b       	or	r24, r18
    1422:	fb 01       	movw	r30, r22
    1424:	91 83       	std	Z+1, r25	; 0x01
    1426:	80 83       	st	Z, r24
		}
		else
		{
			*pu16Data = ADC_VALUE_LEFT_ADJUSTED;
		}
	   enuRetVar = E_OK;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	08 95       	ret
		{
			*pu16Data = ADC_VALUE_RIGHT_ADJUSTED;
		}
		else
		{
			*pu16Data = ADC_VALUE_LEFT_ADJUSTED;
    142c:	24 b1       	in	r18, 0x04	; 4
    142e:	22 95       	swap	r18
    1430:	26 95       	lsr	r18
    1432:	26 95       	lsr	r18
    1434:	23 70       	andi	r18, 0x03	; 3
    1436:	85 b1       	in	r24, 0x05	; 5
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	82 2b       	or	r24, r18
    1444:	fb 01       	movw	r30, r22
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
		}
	   enuRetVar = E_OK;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
    144e:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
} 
    1450:	08 95       	ret

00001452 <EXTINT_Init>:
enuEXTINTErrorStatus EXTINT_Init(enuEXTINTNum enuInterruptNum)
{
	enuEXTINTErrorStatus enuStatus = EXTINT_ERROR;

	//Enable peripheral interrupt enable
	switch(enuInterruptNum)
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	41 f0       	breq	.+16     	; 0x1466 <EXTINT_Init+0x14>
    1456:	18 f0       	brcs	.+6      	; 0x145e <EXTINT_Init+0xc>
    1458:	82 30       	cpi	r24, 0x02	; 2
    145a:	49 f0       	breq	.+18     	; 0x146e <EXTINT_Init+0x1c>
    145c:	0b c0       	rjmp	.+22     	; 0x1474 <EXTINT_Init+0x22>
	{
	case EXTINT_INT0:
		SET_BIT(GICR_R, INT0_B);
    145e:	8b b7       	in	r24, 0x3b	; 59
    1460:	80 64       	ori	r24, 0x40	; 64
    1462:	8b bf       	out	0x3b, r24	; 59
		break;
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <EXTINT_Init+0x22>
	case EXTINT_INT1:
		SET_BIT(GICR_R, INT1_B);
    1466:	8b b7       	in	r24, 0x3b	; 59
    1468:	80 68       	ori	r24, 0x80	; 128
    146a:	8b bf       	out	0x3b, r24	; 59
		break;
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <EXTINT_Init+0x22>
	case EXTINT_INT2:
		SET_BIT(GICR_R, INT2_B);
    146e:	8b b7       	in	r24, 0x3b	; 59
    1470:	80 62       	ori	r24, 0x20	; 32
    1472:	8b bf       	out	0x3b, r24	; 59
		break;
	default:
		break;
	}
    //Enable GIE
	SET_BIT(SREG_R, SREG_I_B);
    1474:	8f b7       	in	r24, 0x3f	; 63
    1476:	80 68       	ori	r24, 0x80	; 128
    1478:	8f bf       	out	0x3f, r24	; 63

	enuStatus = EXTINT_OK;

	return enuStatus;
}
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	08 95       	ret

0000147e <EXTINT_SetSenseMode>:
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetSenseMode(enuEXTINTSenseControl enuSenseMode, enuEXTINTNum enuInterruptNum)
{
	enuEXTINTErrorStatus enuStatus = EXTINT_ERROR;

    if (enuInterruptNum==EXTINT_INT0)
    147e:	61 11       	cpse	r22, r1
    1480:	24 c0       	rjmp	.+72     	; 0x14ca <EXTINT_SetSenseMode+0x4c>
    {
		switch(enuSenseMode)
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	d9 f0       	breq	.+54     	; 0x14bc <EXTINT_SetSenseMode+0x3e>
    1486:	28 f0       	brcs	.+10     	; 0x1492 <EXTINT_SetSenseMode+0x14>
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	89 f0       	breq	.+34     	; 0x14ae <EXTINT_SetSenseMode+0x30>
    148c:	83 30       	cpi	r24, 0x03	; 3
    148e:	41 f0       	breq	.+16     	; 0x14a0 <EXTINT_SetSenseMode+0x22>
    1490:	4f c0       	rjmp	.+158    	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,0);
    1492:	85 b7       	in	r24, 0x35	; 53
    1494:	8e 7f       	andi	r24, 0xFE	; 254
    1496:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,1);
    1498:	85 b7       	in	r24, 0x35	; 53
    149a:	8d 7f       	andi	r24, 0xFD	; 253
    149c:	85 bf       	out	0x35, r24	; 53
		  break;
    149e:	48 c0       	rjmp	.+144    	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		 SET_BIT(MCUCR_R,0);
    14a0:	85 b7       	in	r24, 0x35	; 53
    14a2:	81 60       	ori	r24, 0x01	; 1
    14a4:	85 bf       	out	0x35, r24	; 53
		 SET_BIT(MCUCR_R,1);
    14a6:	85 b7       	in	r24, 0x35	; 53
    14a8:	82 60       	ori	r24, 0x02	; 2
    14aa:	85 bf       	out	0x35, r24	; 53
		  break;
    14ac:	41 c0       	rjmp	.+130    	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,0);
    14ae:	85 b7       	in	r24, 0x35	; 53
    14b0:	8e 7f       	andi	r24, 0xFE	; 254
    14b2:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,1);
    14b4:	85 b7       	in	r24, 0x35	; 53
    14b6:	82 60       	ori	r24, 0x02	; 2
    14b8:	85 bf       	out	0x35, r24	; 53
		  break;
    14ba:	3a c0       	rjmp	.+116    	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,0);
    14bc:	85 b7       	in	r24, 0x35	; 53
    14be:	81 60       	ori	r24, 0x01	; 1
    14c0:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,1);
    14c2:	85 b7       	in	r24, 0x35	; 53
    14c4:	8d 7f       	andi	r24, 0xFD	; 253
    14c6:	85 bf       	out	0x35, r24	; 53
		  break;
    14c8:	33 c0       	rjmp	.+102    	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT1)
    14ca:	61 30       	cpi	r22, 0x01	; 1
    14cc:	21 f5       	brne	.+72     	; 0x1516 <EXTINT_SetSenseMode+0x98>
    {
		switch(enuSenseMode)
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	d9 f0       	breq	.+54     	; 0x1508 <EXTINT_SetSenseMode+0x8a>
    14d2:	28 f0       	brcs	.+10     	; 0x14de <EXTINT_SetSenseMode+0x60>
    14d4:	82 30       	cpi	r24, 0x02	; 2
    14d6:	89 f0       	breq	.+34     	; 0x14fa <EXTINT_SetSenseMode+0x7c>
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	41 f0       	breq	.+16     	; 0x14ec <EXTINT_SetSenseMode+0x6e>
    14dc:	29 c0       	rjmp	.+82     	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,2);
    14de:	85 b7       	in	r24, 0x35	; 53
    14e0:	8b 7f       	andi	r24, 0xFB	; 251
    14e2:	85 bf       	out	0x35, r24	; 53
	      CLEAR_BIT(MCUCR_R,3);
    14e4:	85 b7       	in	r24, 0x35	; 53
    14e6:	87 7f       	andi	r24, 0xF7	; 247
    14e8:	85 bf       	out	0x35, r24	; 53
		  break;
    14ea:	22 c0       	rjmp	.+68     	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		  SET_BIT(MCUCR_R,2);
    14ec:	85 b7       	in	r24, 0x35	; 53
    14ee:	84 60       	ori	r24, 0x04	; 4
    14f0:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,3);
    14f2:	85 b7       	in	r24, 0x35	; 53
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	85 bf       	out	0x35, r24	; 53
		  break;
    14f8:	1b c0       	rjmp	.+54     	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,2);
    14fa:	85 b7       	in	r24, 0x35	; 53
    14fc:	8b 7f       	andi	r24, 0xFB	; 251
    14fe:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,3);
    1500:	85 b7       	in	r24, 0x35	; 53
    1502:	88 60       	ori	r24, 0x08	; 8
    1504:	85 bf       	out	0x35, r24	; 53
		  break;
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,2);
    1508:	85 b7       	in	r24, 0x35	; 53
    150a:	84 60       	ori	r24, 0x04	; 4
    150c:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,3);
    150e:	85 b7       	in	r24, 0x35	; 53
    1510:	87 7f       	andi	r24, 0xF7	; 247
    1512:	85 bf       	out	0x35, r24	; 53
		  break;
    1514:	0d c0       	rjmp	.+26     	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT2)
    1516:	62 30       	cpi	r22, 0x02	; 2
    1518:	59 f4       	brne	.+22     	; 0x1530 <EXTINT_SetSenseMode+0xb2>
    {
		switch(enuSenseMode)
    151a:	82 30       	cpi	r24, 0x02	; 2
    151c:	31 f0       	breq	.+12     	; 0x152a <EXTINT_SetSenseMode+0xac>
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	39 f4       	brne	.+14     	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_RAISING_MODE :
			SET_BIT(MCUCR_R,6);
    1522:	85 b7       	in	r24, 0x35	; 53
    1524:	80 64       	ori	r24, 0x40	; 64
    1526:	85 bf       	out	0x35, r24	; 53
			break;
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
			CLEAR_BIT(MCUCR_R,6);
    152a:	85 b7       	in	r24, 0x35	; 53
    152c:	8f 7b       	andi	r24, 0xBF	; 191
    152e:	85 bf       	out	0x35, r24	; 53
    }

	enuStatus = EXTINT_OK;

	return enuStatus;
}
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	08 95       	ret

00001534 <EXTINT_SetCallBack>:
* Return Value    : enuEXTINTErrorStatus - For error handling if the user input an invalid parameter
* Description     : A function to set the sense mode of the External interrupt
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
   if (pCallBack==NULLPTR)
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	c1 f0       	breq	.+48     	; 0x1568 <EXTINT_SetCallBack+0x34>
   {
      return EXTINT_ERROR;
   }
	if(enuInterruptNum==EXTINT_INT0)
    1538:	61 11       	cpse	r22, r1
    153a:	06 c0       	rjmp	.+12     	; 0x1548 <EXTINT_SetCallBack+0x14>
		pEXTINT0CallBack = pCallBack;
    153c:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pEXTINT0CallBack+0x1>
    1540:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pEXTINT0CallBack>
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	08 95       	ret
   {
      return EXTINT_ERROR;
   }
	if(enuInterruptNum==EXTINT_INT0)
		pEXTINT0CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT1)
    1548:	61 30       	cpi	r22, 0x01	; 1
    154a:	31 f4       	brne	.+12     	; 0x1558 <EXTINT_SetCallBack+0x24>
		pEXTINT1CallBack = pCallBack;
    154c:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pEXTINT1CallBack+0x1>
    1550:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pEXTINT1CallBack>
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	08 95       	ret
   }
	if(enuInterruptNum==EXTINT_INT0)
		pEXTINT0CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
    1558:	62 30       	cpi	r22, 0x02	; 2
    155a:	41 f4       	brne	.+16     	; 0x156c <EXTINT_SetCallBack+0x38>
		pEXTINT2CallBack = pCallBack;
    155c:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <pEXTINT2CallBack+0x1>
    1560:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <pEXTINT2CallBack>

	return EXTINT_OK;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	08 95       	ret
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
   if (pCallBack==NULLPTR)
   {
      return EXTINT_ERROR;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	08 95       	ret
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    156c:	81 e0       	ldi	r24, 0x01	; 1
}
    156e:	08 95       	ret

00001570 <__vector_1>:
/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void) __attribute__ ((signal,used));

/* ISR to handle the External Interrupt Request 0 */
void __vector_1(void)
{
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	2f 93       	push	r18
    157c:	3f 93       	push	r19
    157e:	4f 93       	push	r20
    1580:	5f 93       	push	r21
    1582:	6f 93       	push	r22
    1584:	7f 93       	push	r23
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	af 93       	push	r26
    158c:	bf 93       	push	r27
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
   if (pEXTINT0CallBack!=NULLPTR)
    1592:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <pEXTINT0CallBack>
    1596:	f0 91 50 07 	lds	r31, 0x0750	; 0x800750 <pEXTINT0CallBack+0x1>
    159a:	30 97       	sbiw	r30, 0x00	; 0
    159c:	09 f0       	breq	.+2      	; 0x15a0 <__vector_1+0x30>
   {
      pEXTINT0CallBack();
    159e:	09 95       	icall
   }
}
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	0f 90       	pop	r0
    15be:	1f 90       	pop	r1
    15c0:	18 95       	reti

000015c2 <__vector_2>:

/* ISR to handle the External Interrupt Request 1 */
void __vector_2(void)
{
    15c2:	1f 92       	push	r1
    15c4:	0f 92       	push	r0
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	0f 92       	push	r0
    15ca:	11 24       	eor	r1, r1
    15cc:	2f 93       	push	r18
    15ce:	3f 93       	push	r19
    15d0:	4f 93       	push	r20
    15d2:	5f 93       	push	r21
    15d4:	6f 93       	push	r22
    15d6:	7f 93       	push	r23
    15d8:	8f 93       	push	r24
    15da:	9f 93       	push	r25
    15dc:	af 93       	push	r26
    15de:	bf 93       	push	r27
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
   if (pEXTINT1CallBack!=NULLPTR)
    15e4:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pEXTINT1CallBack>
    15e8:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pEXTINT1CallBack+0x1>
    15ec:	30 97       	sbiw	r30, 0x00	; 0
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <__vector_2+0x30>
   {
      pEXTINT1CallBack();
    15f0:	09 95       	icall
   }
}
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	9f 91       	pop	r25
    15fc:	8f 91       	pop	r24
    15fe:	7f 91       	pop	r23
    1600:	6f 91       	pop	r22
    1602:	5f 91       	pop	r21
    1604:	4f 91       	pop	r20
    1606:	3f 91       	pop	r19
    1608:	2f 91       	pop	r18
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	1f 90       	pop	r1
    1612:	18 95       	reti

00001614 <__vector_3>:

/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void)
{
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
   if (pEXTINT2CallBack!=NULLPTR)
    1636:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pEXTINT2CallBack>
    163a:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pEXTINT2CallBack+0x1>
    163e:	30 97       	sbiw	r30, 0x00	; 0
    1640:	09 f0       	breq	.+2      	; 0x1644 <__vector_3+0x30>
   {
      pEXTINT2CallBack();
    1642:	09 95       	icall
   }
}
    1644:	ff 91       	pop	r31
    1646:	ef 91       	pop	r30
    1648:	bf 91       	pop	r27
    164a:	af 91       	pop	r26
    164c:	9f 91       	pop	r25
    164e:	8f 91       	pop	r24
    1650:	7f 91       	pop	r23
    1652:	6f 91       	pop	r22
    1654:	5f 91       	pop	r21
    1656:	4f 91       	pop	r20
    1658:	3f 91       	pop	r19
    165a:	2f 91       	pop	r18
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <I2C_GetStatus>:
      return E_ERROR;
   }
   //set the callback function to the sent function pointer
   I2C_Callback=local_fptr;
   return E_OK;
}
    1666:	81 b1       	in	r24, 0x01	; 1
    1668:	88 7f       	andi	r24, 0xF8	; 248
    166a:	08 95       	ret

0000166c <I2C_Init>:
    166c:	81 b1       	in	r24, 0x01	; 1
    166e:	8c 7f       	andi	r24, 0xFC	; 252
    1670:	81 b9       	out	0x01, r24	; 1
    1672:	81 b1       	in	r24, 0x01	; 1
    1674:	83 60       	ori	r24, 0x03	; 3
    1676:	81 b9       	out	0x01, r24	; 1
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	64 e0       	ldi	r22, 0x04	; 4
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <I2C_Init+0x24>
    1680:	9b 01       	movw	r18, r22
    1682:	22 9f       	mul	r18, r18
    1684:	b0 01       	movw	r22, r0
    1686:	23 9f       	mul	r18, r19
    1688:	70 0d       	add	r23, r0
    168a:	70 0d       	add	r23, r0
    168c:	11 24       	eor	r1, r1
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	b0 f3       	brcs	.-20     	; 0x1680 <I2C_Init+0x14>
    1694:	66 0f       	add	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	80 e4       	ldi	r24, 0x40	; 64
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__udivmodhi4>
    16a0:	60 b9       	out	0x00, r22	; 0
    16a2:	85 e0       	ldi	r24, 0x05	; 5
    16a4:	82 b9       	out	0x02, r24	; 2
    16a6:	86 b7       	in	r24, 0x36	; 54
    16a8:	80 64       	ori	r24, 0x40	; 64
    16aa:	86 bf       	out	0x36, r24	; 54
    16ac:	86 b7       	in	r24, 0x36	; 54
    16ae:	80 68       	ori	r24, 0x80	; 128
    16b0:	86 bf       	out	0x36, r24	; 54
    16b2:	86 b7       	in	r24, 0x36	; 54
    16b4:	84 60       	ori	r24, 0x04	; 4
    16b6:	86 bf       	out	0x36, r24	; 54
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	08 95       	ret

000016bc <I2C_Start>:
    16bc:	84 ea       	ldi	r24, 0xA4	; 164
    16be:	86 bf       	out	0x36, r24	; 54
    16c0:	06 b6       	in	r0, 0x36	; 54
    16c2:	07 fe       	sbrs	r0, 7
    16c4:	fd cf       	rjmp	.-6      	; 0x16c0 <I2C_Start+0x4>
    16c6:	0e 94 33 0b 	call	0x1666	; 0x1666 <I2C_GetStatus>
    16ca:	88 30       	cpi	r24, 0x08	; 8
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <I2C_Start+0x16>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	08 95       	ret
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	08 95       	ret

000016d6 <I2C_Repeated_Start>:
    16d6:	84 ea       	ldi	r24, 0xA4	; 164
    16d8:	86 bf       	out	0x36, r24	; 54
    16da:	06 b6       	in	r0, 0x36	; 54
    16dc:	07 fe       	sbrs	r0, 7
    16de:	fd cf       	rjmp	.-6      	; 0x16da <I2C_Repeated_Start+0x4>
    16e0:	0e 94 33 0b 	call	0x1666	; 0x1666 <I2C_GetStatus>
    16e4:	80 31       	cpi	r24, 0x10	; 16
    16e6:	11 f0       	breq	.+4      	; 0x16ec <I2C_Repeated_Start+0x16>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	08 95       	ret
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	08 95       	ret

000016f0 <I2C_Stop>:
    16f0:	84 e9       	ldi	r24, 0x94	; 148
    16f2:	86 bf       	out	0x36, r24	; 54
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	08 95       	ret

000016f8 <I2C_SendAddressFrame>:
    16f8:	62 30       	cpi	r22, 0x02	; 2
    16fa:	f0 f4       	brcc	.+60     	; 0x1738 <I2C_SendAddressFrame+0x40>
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	86 2b       	or	r24, r22
    1704:	83 b9       	out	0x03, r24	; 3
    1706:	84 e8       	ldi	r24, 0x84	; 132
    1708:	86 bf       	out	0x36, r24	; 54
    170a:	06 b6       	in	r0, 0x36	; 54
    170c:	07 fe       	sbrs	r0, 7
    170e:	fd cf       	rjmp	.-6      	; 0x170a <I2C_SendAddressFrame+0x12>
    1710:	61 30       	cpi	r22, 0x01	; 1
    1712:	41 f4       	brne	.+16     	; 0x1724 <I2C_SendAddressFrame+0x2c>
    1714:	0e 94 33 0b 	call	0x1666	; 0x1666 <I2C_GetStatus>
    1718:	80 34       	cpi	r24, 0x40	; 64
    171a:	81 f0       	breq	.+32     	; 0x173c <I2C_SendAddressFrame+0x44>
    171c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <I2C_Stop>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	08 95       	ret
    1724:	61 11       	cpse	r22, r1
    1726:	0c c0       	rjmp	.+24     	; 0x1740 <I2C_SendAddressFrame+0x48>
    1728:	0e 94 33 0b 	call	0x1666	; 0x1666 <I2C_GetStatus>
    172c:	88 31       	cpi	r24, 0x18	; 24
    172e:	51 f0       	breq	.+20     	; 0x1744 <I2C_SendAddressFrame+0x4c>
    1730:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <I2C_Stop>
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	08 95       	ret
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	08 95       	ret
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	08 95       	ret
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	08 95       	ret

00001748 <I2C_SendDataFrame>:
    1748:	06 b6       	in	r0, 0x36	; 54
    174a:	07 fe       	sbrs	r0, 7
    174c:	fd cf       	rjmp	.-6      	; 0x1748 <I2C_SendDataFrame>
    174e:	83 b9       	out	0x03, r24	; 3
    1750:	84 e8       	ldi	r24, 0x84	; 132
    1752:	86 bf       	out	0x36, r24	; 54
    1754:	06 b6       	in	r0, 0x36	; 54
    1756:	07 fe       	sbrs	r0, 7
    1758:	fd cf       	rjmp	.-6      	; 0x1754 <I2C_SendDataFrame+0xc>
    175a:	0e 94 33 0b 	call	0x1666	; 0x1666 <I2C_GetStatus>
    175e:	88 32       	cpi	r24, 0x28	; 40
    1760:	31 f0       	breq	.+12     	; 0x176e <I2C_SendDataFrame+0x26>
    1762:	88 3b       	cpi	r24, 0xB8	; 184
    1764:	31 f0       	breq	.+12     	; 0x1772 <I2C_SendDataFrame+0x2a>
    1766:	88 3c       	cpi	r24, 0xC8	; 200
    1768:	31 f4       	brne	.+12     	; 0x1776 <I2C_SendDataFrame+0x2e>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	08 95       	ret
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	08 95       	ret
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	08 95       	ret
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	08 95       	ret

0000177a <I2C_RecieveDataFrame>:
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	39 f1       	breq	.+78     	; 0x17d2 <I2C_RecieveDataFrame+0x58>
    1784:	06 b6       	in	r0, 0x36	; 54
    1786:	07 fe       	sbrs	r0, 7
    1788:	fd cf       	rjmp	.-6      	; 0x1784 <I2C_RecieveDataFrame+0xa>
    178a:	66 23       	and	r22, r22
    178c:	19 f0       	breq	.+6      	; 0x1794 <I2C_RecieveDataFrame+0x1a>
    178e:	61 30       	cpi	r22, 0x01	; 1
    1790:	21 f0       	breq	.+8      	; 0x179a <I2C_RecieveDataFrame+0x20>
    1792:	21 c0       	rjmp	.+66     	; 0x17d6 <I2C_RecieveDataFrame+0x5c>
    1794:	24 ec       	ldi	r18, 0xC4	; 196
    1796:	26 bf       	out	0x36, r18	; 54
    1798:	02 c0       	rjmp	.+4      	; 0x179e <I2C_RecieveDataFrame+0x24>
    179a:	24 e8       	ldi	r18, 0x84	; 132
    179c:	26 bf       	out	0x36, r18	; 54
    179e:	06 b6       	in	r0, 0x36	; 54
    17a0:	07 fe       	sbrs	r0, 7
    17a2:	fd cf       	rjmp	.-6      	; 0x179e <I2C_RecieveDataFrame+0x24>
    17a4:	c6 2f       	mov	r28, r22
    17a6:	8c 01       	movw	r16, r24
    17a8:	0e 94 33 0b 	call	0x1666	; 0x1666 <I2C_GetStatus>
    17ac:	cc 23       	and	r28, r28
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <I2C_RecieveDataFrame+0x3c>
    17b0:	c1 30       	cpi	r28, 0x01	; 1
    17b2:	31 f0       	breq	.+12     	; 0x17c0 <I2C_RecieveDataFrame+0x46>
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <I2C_RecieveDataFrame+0x4e>
    17b6:	80 35       	cpi	r24, 0x50	; 80
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <I2C_RecieveDataFrame+0x4e>
    17ba:	80 38       	cpi	r24, 0x80	; 128
    17bc:	71 f4       	brne	.+28     	; 0x17da <I2C_RecieveDataFrame+0x60>
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <I2C_RecieveDataFrame+0x4e>
    17c0:	88 35       	cpi	r24, 0x58	; 88
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <I2C_RecieveDataFrame+0x4e>
    17c4:	88 38       	cpi	r24, 0x88	; 136
    17c6:	59 f4       	brne	.+22     	; 0x17de <I2C_RecieveDataFrame+0x64>
    17c8:	83 b1       	in	r24, 0x03	; 3
    17ca:	f8 01       	movw	r30, r16
    17cc:	80 83       	st	Z, r24
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <I2C_RecieveDataFrame+0x66>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	05 c0       	rjmp	.+10     	; 0x17e0 <I2C_RecieveDataFrame+0x66>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <I2C_RecieveDataFrame+0x66>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	01 c0       	rjmp	.+2      	; 0x17e0 <I2C_RecieveDataFrame+0x66>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <__vector_19>:
* Parameters (out): void
* Return value: void
* Description: I2C event interrupt service routine
************************************************************************************/
ISR(TWI_vect)
{
    17e8:	1f 92       	push	r1
    17ea:	0f 92       	push	r0
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	0f 92       	push	r0
    17f0:	11 24       	eor	r1, r1
    17f2:	2f 93       	push	r18
    17f4:	3f 93       	push	r19
    17f6:	4f 93       	push	r20
    17f8:	5f 93       	push	r21
    17fa:	6f 93       	push	r22
    17fc:	7f 93       	push	r23
    17fe:	8f 93       	push	r24
    1800:	9f 93       	push	r25
    1802:	af 93       	push	r26
    1804:	bf 93       	push	r27
    1806:	ef 93       	push	r30
    1808:	ff 93       	push	r31
   //check if callback function pointer points to a valid function
   if(I2C_Callback != NULLPTR)
    180a:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <I2C_Callback>
    180e:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <I2C_Callback+0x1>
    1812:	30 97       	sbiw	r30, 0x00	; 0
    1814:	09 f0       	breq	.+2      	; 0x1818 <__vector_19+0x30>
   {
      //call the callback function
      I2C_Callback();
    1816:	09 95       	icall
   }
}
    1818:	ff 91       	pop	r31
    181a:	ef 91       	pop	r30
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <SPI_initMaster>:
    	SPI_sendData(*(pu8Data+u8i));
    }

    SPI_sendData('\0');
//    SPI_sendData('\n');
}
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	8c e0       	ldi	r24, 0x0C	; 12
    1840:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	8d e0       	ldi	r24, 0x0D	; 13
    184a:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	8e e0       	ldi	r24, 0x0E	; 14
    1854:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	8f e0       	ldi	r24, 0x0F	; 15
    185e:	0e 94 34 09 	call	0x1268	; 0x1268 <DIO_PinInit>
    1862:	85 e5       	ldi	r24, 0x55	; 85
    1864:	8d b9       	out	0x0d, r24	; 13
    1866:	08 95       	ret

00001868 <SPI_init>:
    1868:	0e 94 1d 0c 	call	0x183a	; 0x183a <SPI_initMaster>
    186c:	08 95       	ret

0000186e <SPI_receiveData>:
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	ec 01       	movw	r28, r24
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	8c e0       	ldi	r24, 0x0C	; 12
    1878:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
    187c:	88 81       	ld	r24, Y
    187e:	8f b9       	out	0x0f, r24	; 15
    1880:	77 9b       	sbis	0x0e, 7	; 14
    1882:	fe cf       	rjmp	.-4      	; 0x1880 <SPI_receiveData+0x12>
    1884:	8f b1       	in	r24, 0x0f	; 15
    1886:	88 83       	st	Y, r24
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	8c e0       	ldi	r24, 0x0C	; 12
    188c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <DIO_PinWrite>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <SPI_receiveString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	7c 01       	movw	r14, r24
    18a4:	d6 2f       	mov	r29, r22
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    18a6:	c0 e0       	ldi	r28, 0x00	; 0
    18a8:	0b c0       	rjmp	.+22     	; 0x18c0 <SPI_receiveString+0x2a>
    {

    	SPI_receiveData(&pu8Data[u8i]);
    18aa:	87 01       	movw	r16, r14
    18ac:	0c 0f       	add	r16, r28
    18ae:	11 1d       	adc	r17, r1
    18b0:	c8 01       	movw	r24, r16
    18b2:	0e 94 37 0c 	call	0x186e	; 0x186e <SPI_receiveData>
        if (*(pu8Data+u8i)==0)
    18b6:	f8 01       	movw	r30, r16
    18b8:	80 81       	ld	r24, Z
    18ba:	88 23       	and	r24, r24
    18bc:	19 f0       	breq	.+6      	; 0x18c4 <SPI_receiveString+0x2e>
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    18be:	cf 5f       	subi	r28, 0xFF	; 255
    18c0:	cd 17       	cp	r28, r29
    18c2:	98 f3       	brcs	.-26     	; 0x18aa <SPI_receiveString+0x14>
           break;
        }
    }
    //end the string with null
    //pu8Data[u8i]='\0';
}
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	08 95       	ret

000018d2 <UART_Init>:
	//check if the sent pointer points to a valid position
	if (local_fptr== NULLPTR)     return E_ERROR;
	//if so, store the pointer address in the global pointer to function
	RXC_Callback=local_fptr;
	return E_OK;
}
    18d2:	10 bc       	out	0x20, r1	; 32
    18d4:	83 e3       	ldi	r24, 0x33	; 51
    18d6:	89 b9       	out	0x09, r24	; 9
    18d8:	88 e1       	ldi	r24, 0x18	; 24
    18da:	8a b9       	out	0x0a, r24	; 10
    18dc:	86 e8       	ldi	r24, 0x86	; 134
    18de:	80 bd       	out	0x20, r24	; 32
    18e0:	80 b5       	in	r24, 0x20	; 32
    18e2:	8f 77       	andi	r24, 0x7F	; 127
    18e4:	80 bd       	out	0x20, r24	; 32
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    18ec:	08 95       	ret

000018ee <UART_SendData>:
    18ee:	98 2f       	mov	r25, r24
    18f0:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    18f4:	88 23       	and	r24, r24
    18f6:	41 f0       	breq	.+16     	; 0x1908 <UART_SendData+0x1a>
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    18fe:	5d 9b       	sbis	0x0b, 5	; 11
    1900:	fe cf       	rjmp	.-4      	; 0x18fe <UART_SendData+0x10>
    1902:	9c b9       	out	0x0c, r25	; 12
    1904:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    1908:	08 95       	ret

0000190a <UART_ReceiveData>:
    190a:	fc 01       	movw	r30, r24
    190c:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    1910:	88 23       	and	r24, r24
    1912:	59 f0       	breq	.+22     	; 0x192a <UART_ReceiveData+0x20>
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    191a:	5f 9b       	sbis	0x0b, 7	; 11
    191c:	fe cf       	rjmp	.-4      	; 0x191a <UART_ReceiveData+0x10>
    191e:	2c b1       	in	r18, 0x0c	; 12
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	31 83       	std	Z+1, r19	; 0x01
    1924:	20 83       	st	Z, r18
    1926:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    192a:	08 95       	ret

0000192c <UART_SendString>:
    192c:	ef 92       	push	r14
    192e:	ff 92       	push	r15
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	7c 01       	movw	r14, r24
    1938:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    193c:	88 23       	and	r24, r24
    193e:	b1 f0       	breq	.+44     	; 0x196c <UART_SendString+0x40>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    1946:	c0 e0       	ldi	r28, 0x00	; 0
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <UART_SendString+0x38>
    194a:	87 01       	movw	r16, r14
    194c:	0c 0f       	add	r16, r28
    194e:	11 1d       	adc	r17, r1
    1950:	f8 01       	movw	r30, r16
    1952:	80 81       	ld	r24, Z
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 77 0c 	call	0x18ee	; 0x18ee <UART_SendData>
    195a:	f8 01       	movw	r30, r16
    195c:	90 81       	ld	r25, Z
    195e:	99 23       	and	r25, r25
    1960:	19 f0       	breq	.+6      	; 0x1968 <UART_SendString+0x3c>
    1962:	cf 5f       	subi	r28, 0xFF	; 255
    1964:	cf 3f       	cpi	r28, 0xFF	; 255
    1966:	89 f7       	brne	.-30     	; 0x194a <UART_SendString+0x1e>
    1968:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	08 95       	ret

00001978 <UART_ReceiveString>:
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	7c 01       	movw	r14, r24
    1986:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    198a:	88 23       	and	r24, r24
    198c:	d1 f0       	breq	.+52     	; 0x19c2 <UART_ReceiveString+0x4a>
    198e:	d6 2f       	mov	r29, r22
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    1996:	c0 e0       	ldi	r28, 0x00	; 0
    1998:	10 c0       	rjmp	.+32     	; 0x19ba <UART_ReceiveString+0x42>
    199a:	87 01       	movw	r16, r14
    199c:	0c 0f       	add	r16, r28
    199e:	11 1d       	adc	r17, r1
    19a0:	c8 01       	movw	r24, r16
    19a2:	0e 94 85 0c 	call	0x190a	; 0x190a <UART_ReceiveData>
    19a6:	f8 01       	movw	r30, r16
    19a8:	90 81       	ld	r25, Z
    19aa:	9d 30       	cpi	r25, 0x0D	; 13
    19ac:	11 f0       	breq	.+4      	; 0x19b2 <UART_ReceiveString+0x3a>
    19ae:	9a 30       	cpi	r25, 0x0A	; 10
    19b0:	19 f4       	brne	.+6      	; 0x19b8 <UART_ReceiveString+0x40>
    19b2:	f8 01       	movw	r30, r16
    19b4:	10 82       	st	Z, r1
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <UART_ReceiveString+0x46>
    19b8:	cf 5f       	subi	r28, 0xFF	; 255
    19ba:	cd 17       	cp	r28, r29
    19bc:	70 f3       	brcs	.-36     	; 0x199a <UART_ReceiveString+0x22>
    19be:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	08 95       	ret

000019d0 <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
    19d0:	1f 92       	push	r1
    19d2:	0f 92       	push	r0
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	0f 92       	push	r0
    19d8:	11 24       	eor	r1, r1
    19da:	2f 93       	push	r18
    19dc:	3f 93       	push	r19
    19de:	4f 93       	push	r20
    19e0:	5f 93       	push	r21
    19e2:	6f 93       	push	r22
    19e4:	7f 93       	push	r23
    19e6:	8f 93       	push	r24
    19e8:	9f 93       	push	r25
    19ea:	af 93       	push	r26
    19ec:	bf 93       	push	r27
    19ee:	ef 93       	push	r30
    19f0:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (RXC_Callback!=NULLPTR)
    19f2:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <RXC_Callback>
    19f6:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <RXC_Callback+0x1>
    19fa:	30 97       	sbiw	r30, 0x00	; 0
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <__vector_13+0x30>
	{
		//call the function
		RXC_Callback();
    19fe:	09 95       	icall
	}
}
    1a00:	ff 91       	pop	r31
    1a02:	ef 91       	pop	r30
    1a04:	bf 91       	pop	r27
    1a06:	af 91       	pop	r26
    1a08:	9f 91       	pop	r25
    1a0a:	8f 91       	pop	r24
    1a0c:	7f 91       	pop	r23
    1a0e:	6f 91       	pop	r22
    1a10:	5f 91       	pop	r21
    1a12:	4f 91       	pop	r20
    1a14:	3f 91       	pop	r19
    1a16:	2f 91       	pop	r18
    1a18:	0f 90       	pop	r0
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	0f 90       	pop	r0
    1a1e:	1f 90       	pop	r1
    1a20:	18 95       	reti

00001a22 <__vector_15>:
ISR(UART_TX_vect)
{
    1a22:	1f 92       	push	r1
    1a24:	0f 92       	push	r0
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	0f 92       	push	r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	2f 93       	push	r18
    1a2e:	3f 93       	push	r19
    1a30:	4f 93       	push	r20
    1a32:	5f 93       	push	r21
    1a34:	6f 93       	push	r22
    1a36:	7f 93       	push	r23
    1a38:	8f 93       	push	r24
    1a3a:	9f 93       	push	r25
    1a3c:	af 93       	push	r26
    1a3e:	bf 93       	push	r27
    1a40:	ef 93       	push	r30
    1a42:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (TXC_Callback!=NULLPTR)
    1a44:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <TXC_Callback>
    1a48:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <TXC_Callback+0x1>
    1a4c:	30 97       	sbiw	r30, 0x00	; 0
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <__vector_15+0x30>
	{
		//call the function
		TXC_Callback();
    1a50:	09 95       	icall
	}
}
    1a52:	ff 91       	pop	r31
    1a54:	ef 91       	pop	r30
    1a56:	bf 91       	pop	r27
    1a58:	af 91       	pop	r26
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	7f 91       	pop	r23
    1a60:	6f 91       	pop	r22
    1a62:	5f 91       	pop	r21
    1a64:	4f 91       	pop	r20
    1a66:	3f 91       	pop	r19
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <__subsf3>:
    1a74:	50 58       	subi	r21, 0x80	; 128

00001a76 <__addsf3>:
    1a76:	bb 27       	eor	r27, r27
    1a78:	aa 27       	eor	r26, r26
    1a7a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__addsf3x>
    1a7e:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_round>
    1a82:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fp_pscA>
    1a86:	38 f0       	brcs	.+14     	; 0x1a96 <__addsf3+0x20>
    1a88:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_pscB>
    1a8c:	20 f0       	brcs	.+8      	; 0x1a96 <__addsf3+0x20>
    1a8e:	39 f4       	brne	.+14     	; 0x1a9e <__addsf3+0x28>
    1a90:	9f 3f       	cpi	r25, 0xFF	; 255
    1a92:	19 f4       	brne	.+6      	; 0x1a9a <__addsf3+0x24>
    1a94:	26 f4       	brtc	.+8      	; 0x1a9e <__addsf3+0x28>
    1a96:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_nan>
    1a9a:	0e f4       	brtc	.+2      	; 0x1a9e <__addsf3+0x28>
    1a9c:	e0 95       	com	r30
    1a9e:	e7 fb       	bst	r30, 7
    1aa0:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>

00001aa4 <__addsf3x>:
    1aa4:	e9 2f       	mov	r30, r25
    1aa6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_split3>
    1aaa:	58 f3       	brcs	.-42     	; 0x1a82 <__addsf3+0xc>
    1aac:	ba 17       	cp	r27, r26
    1aae:	62 07       	cpc	r22, r18
    1ab0:	73 07       	cpc	r23, r19
    1ab2:	84 07       	cpc	r24, r20
    1ab4:	95 07       	cpc	r25, r21
    1ab6:	20 f0       	brcs	.+8      	; 0x1ac0 <__addsf3x+0x1c>
    1ab8:	79 f4       	brne	.+30     	; 0x1ad8 <__addsf3x+0x34>
    1aba:	a6 f5       	brtc	.+104    	; 0x1b24 <__addsf3x+0x80>
    1abc:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__fp_zero>
    1ac0:	0e f4       	brtc	.+2      	; 0x1ac4 <__addsf3x+0x20>
    1ac2:	e0 95       	com	r30
    1ac4:	0b 2e       	mov	r0, r27
    1ac6:	ba 2f       	mov	r27, r26
    1ac8:	a0 2d       	mov	r26, r0
    1aca:	0b 01       	movw	r0, r22
    1acc:	b9 01       	movw	r22, r18
    1ace:	90 01       	movw	r18, r0
    1ad0:	0c 01       	movw	r0, r24
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	a0 01       	movw	r20, r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	ff 27       	eor	r31, r31
    1ada:	59 1b       	sub	r21, r25
    1adc:	99 f0       	breq	.+38     	; 0x1b04 <__addsf3x+0x60>
    1ade:	59 3f       	cpi	r21, 0xF9	; 249
    1ae0:	50 f4       	brcc	.+20     	; 0x1af6 <__addsf3x+0x52>
    1ae2:	50 3e       	cpi	r21, 0xE0	; 224
    1ae4:	68 f1       	brcs	.+90     	; 0x1b40 <__addsf3x+0x9c>
    1ae6:	1a 16       	cp	r1, r26
    1ae8:	f0 40       	sbci	r31, 0x00	; 0
    1aea:	a2 2f       	mov	r26, r18
    1aec:	23 2f       	mov	r18, r19
    1aee:	34 2f       	mov	r19, r20
    1af0:	44 27       	eor	r20, r20
    1af2:	58 5f       	subi	r21, 0xF8	; 248
    1af4:	f3 cf       	rjmp	.-26     	; 0x1adc <__addsf3x+0x38>
    1af6:	46 95       	lsr	r20
    1af8:	37 95       	ror	r19
    1afa:	27 95       	ror	r18
    1afc:	a7 95       	ror	r26
    1afe:	f0 40       	sbci	r31, 0x00	; 0
    1b00:	53 95       	inc	r21
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <__addsf3x+0x52>
    1b04:	7e f4       	brtc	.+30     	; 0x1b24 <__addsf3x+0x80>
    1b06:	1f 16       	cp	r1, r31
    1b08:	ba 0b       	sbc	r27, r26
    1b0a:	62 0b       	sbc	r22, r18
    1b0c:	73 0b       	sbc	r23, r19
    1b0e:	84 0b       	sbc	r24, r20
    1b10:	ba f0       	brmi	.+46     	; 0x1b40 <__addsf3x+0x9c>
    1b12:	91 50       	subi	r25, 0x01	; 1
    1b14:	a1 f0       	breq	.+40     	; 0x1b3e <__addsf3x+0x9a>
    1b16:	ff 0f       	add	r31, r31
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	66 1f       	adc	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	c2 f7       	brpl	.-16     	; 0x1b12 <__addsf3x+0x6e>
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <__addsf3x+0x9c>
    1b24:	ba 0f       	add	r27, r26
    1b26:	62 1f       	adc	r22, r18
    1b28:	73 1f       	adc	r23, r19
    1b2a:	84 1f       	adc	r24, r20
    1b2c:	48 f4       	brcc	.+18     	; 0x1b40 <__addsf3x+0x9c>
    1b2e:	87 95       	ror	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	b7 95       	ror	r27
    1b36:	f7 95       	ror	r31
    1b38:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <__addsf3x+0x9a>
    1b3c:	b0 cf       	rjmp	.-160    	; 0x1a9e <__addsf3+0x28>
    1b3e:	93 95       	inc	r25
    1b40:	88 0f       	add	r24, r24
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <__addsf3x+0xa2>
    1b44:	99 27       	eor	r25, r25
    1b46:	ee 0f       	add	r30, r30
    1b48:	97 95       	ror	r25
    1b4a:	87 95       	ror	r24
    1b4c:	08 95       	ret

00001b4e <__divsf3>:
    1b4e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__divsf3x>
    1b52:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_round>
    1b56:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_pscB>
    1b5a:	58 f0       	brcs	.+22     	; 0x1b72 <__divsf3+0x24>
    1b5c:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fp_pscA>
    1b60:	40 f0       	brcs	.+16     	; 0x1b72 <__divsf3+0x24>
    1b62:	29 f4       	brne	.+10     	; 0x1b6e <__divsf3+0x20>
    1b64:	5f 3f       	cpi	r21, 0xFF	; 255
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <__divsf3+0x24>
    1b68:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1b6c:	51 11       	cpse	r21, r1
    1b6e:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>
    1b72:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_nan>

00001b76 <__divsf3x>:
    1b76:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_split3>
    1b7a:	68 f3       	brcs	.-38     	; 0x1b56 <__divsf3+0x8>

00001b7c <__divsf3_pse>:
    1b7c:	99 23       	and	r25, r25
    1b7e:	b1 f3       	breq	.-20     	; 0x1b6c <__divsf3+0x1e>
    1b80:	55 23       	and	r21, r21
    1b82:	91 f3       	breq	.-28     	; 0x1b68 <__divsf3+0x1a>
    1b84:	95 1b       	sub	r25, r21
    1b86:	55 0b       	sbc	r21, r21
    1b88:	bb 27       	eor	r27, r27
    1b8a:	aa 27       	eor	r26, r26
    1b8c:	62 17       	cp	r22, r18
    1b8e:	73 07       	cpc	r23, r19
    1b90:	84 07       	cpc	r24, r20
    1b92:	38 f0       	brcs	.+14     	; 0x1ba2 <__divsf3_pse+0x26>
    1b94:	9f 5f       	subi	r25, 0xFF	; 255
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	44 1f       	adc	r20, r20
    1b9e:	aa 1f       	adc	r26, r26
    1ba0:	a9 f3       	breq	.-22     	; 0x1b8c <__divsf3_pse+0x10>
    1ba2:	35 d0       	rcall	.+106    	; 0x1c0e <__divsf3_pse+0x92>
    1ba4:	0e 2e       	mov	r0, r30
    1ba6:	3a f0       	brmi	.+14     	; 0x1bb6 <__divsf3_pse+0x3a>
    1ba8:	e0 e8       	ldi	r30, 0x80	; 128
    1baa:	32 d0       	rcall	.+100    	; 0x1c10 <__divsf3_pse+0x94>
    1bac:	91 50       	subi	r25, 0x01	; 1
    1bae:	50 40       	sbci	r21, 0x00	; 0
    1bb0:	e6 95       	lsr	r30
    1bb2:	00 1c       	adc	r0, r0
    1bb4:	ca f7       	brpl	.-14     	; 0x1ba8 <__divsf3_pse+0x2c>
    1bb6:	2b d0       	rcall	.+86     	; 0x1c0e <__divsf3_pse+0x92>
    1bb8:	fe 2f       	mov	r31, r30
    1bba:	29 d0       	rcall	.+82     	; 0x1c0e <__divsf3_pse+0x92>
    1bbc:	66 0f       	add	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	88 1f       	adc	r24, r24
    1bc2:	bb 1f       	adc	r27, r27
    1bc4:	26 17       	cp	r18, r22
    1bc6:	37 07       	cpc	r19, r23
    1bc8:	48 07       	cpc	r20, r24
    1bca:	ab 07       	cpc	r26, r27
    1bcc:	b0 e8       	ldi	r27, 0x80	; 128
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <__divsf3_pse+0x56>
    1bd0:	bb 0b       	sbc	r27, r27
    1bd2:	80 2d       	mov	r24, r0
    1bd4:	bf 01       	movw	r22, r30
    1bd6:	ff 27       	eor	r31, r31
    1bd8:	93 58       	subi	r25, 0x83	; 131
    1bda:	5f 4f       	sbci	r21, 0xFF	; 255
    1bdc:	3a f0       	brmi	.+14     	; 0x1bec <__divsf3_pse+0x70>
    1bde:	9e 3f       	cpi	r25, 0xFE	; 254
    1be0:	51 05       	cpc	r21, r1
    1be2:	78 f0       	brcs	.+30     	; 0x1c02 <__divsf3_pse+0x86>
    1be4:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1be8:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>
    1bec:	5f 3f       	cpi	r21, 0xFF	; 255
    1bee:	e4 f3       	brlt	.-8      	; 0x1be8 <__divsf3_pse+0x6c>
    1bf0:	98 3e       	cpi	r25, 0xE8	; 232
    1bf2:	d4 f3       	brlt	.-12     	; 0x1be8 <__divsf3_pse+0x6c>
    1bf4:	86 95       	lsr	r24
    1bf6:	77 95       	ror	r23
    1bf8:	67 95       	ror	r22
    1bfa:	b7 95       	ror	r27
    1bfc:	f7 95       	ror	r31
    1bfe:	9f 5f       	subi	r25, 0xFF	; 255
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__divsf3_pse+0x78>
    1c02:	88 0f       	add	r24, r24
    1c04:	91 1d       	adc	r25, r1
    1c06:	96 95       	lsr	r25
    1c08:	87 95       	ror	r24
    1c0a:	97 f9       	bld	r25, 7
    1c0c:	08 95       	ret
    1c0e:	e1 e0       	ldi	r30, 0x01	; 1
    1c10:	66 0f       	add	r22, r22
    1c12:	77 1f       	adc	r23, r23
    1c14:	88 1f       	adc	r24, r24
    1c16:	bb 1f       	adc	r27, r27
    1c18:	62 17       	cp	r22, r18
    1c1a:	73 07       	cpc	r23, r19
    1c1c:	84 07       	cpc	r24, r20
    1c1e:	ba 07       	cpc	r27, r26
    1c20:	20 f0       	brcs	.+8      	; 0x1c2a <__divsf3_pse+0xae>
    1c22:	62 1b       	sub	r22, r18
    1c24:	73 0b       	sbc	r23, r19
    1c26:	84 0b       	sbc	r24, r20
    1c28:	ba 0b       	sbc	r27, r26
    1c2a:	ee 1f       	adc	r30, r30
    1c2c:	88 f7       	brcc	.-30     	; 0x1c10 <__divsf3_pse+0x94>
    1c2e:	e0 95       	com	r30
    1c30:	08 95       	ret

00001c32 <__fixsfsi>:
    1c32:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fixunssfsi>
    1c36:	68 94       	set
    1c38:	b1 11       	cpse	r27, r1
    1c3a:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>
    1c3e:	08 95       	ret

00001c40 <__fixunssfsi>:
    1c40:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_splitA>
    1c44:	88 f0       	brcs	.+34     	; 0x1c68 <__fixunssfsi+0x28>
    1c46:	9f 57       	subi	r25, 0x7F	; 127
    1c48:	98 f0       	brcs	.+38     	; 0x1c70 <__fixunssfsi+0x30>
    1c4a:	b9 2f       	mov	r27, r25
    1c4c:	99 27       	eor	r25, r25
    1c4e:	b7 51       	subi	r27, 0x17	; 23
    1c50:	b0 f0       	brcs	.+44     	; 0x1c7e <__fixunssfsi+0x3e>
    1c52:	e1 f0       	breq	.+56     	; 0x1c8c <__fixunssfsi+0x4c>
    1c54:	66 0f       	add	r22, r22
    1c56:	77 1f       	adc	r23, r23
    1c58:	88 1f       	adc	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	1a f0       	brmi	.+6      	; 0x1c64 <__fixunssfsi+0x24>
    1c5e:	ba 95       	dec	r27
    1c60:	c9 f7       	brne	.-14     	; 0x1c54 <__fixunssfsi+0x14>
    1c62:	14 c0       	rjmp	.+40     	; 0x1c8c <__fixunssfsi+0x4c>
    1c64:	b1 30       	cpi	r27, 0x01	; 1
    1c66:	91 f0       	breq	.+36     	; 0x1c8c <__fixunssfsi+0x4c>
    1c68:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__fp_zero>
    1c6c:	b1 e0       	ldi	r27, 0x01	; 1
    1c6e:	08 95       	ret
    1c70:	0c 94 d6 0e 	jmp	0x1dac	; 0x1dac <__fp_zero>
    1c74:	67 2f       	mov	r22, r23
    1c76:	78 2f       	mov	r23, r24
    1c78:	88 27       	eor	r24, r24
    1c7a:	b8 5f       	subi	r27, 0xF8	; 248
    1c7c:	39 f0       	breq	.+14     	; 0x1c8c <__fixunssfsi+0x4c>
    1c7e:	b9 3f       	cpi	r27, 0xF9	; 249
    1c80:	cc f3       	brlt	.-14     	; 0x1c74 <__fixunssfsi+0x34>
    1c82:	86 95       	lsr	r24
    1c84:	77 95       	ror	r23
    1c86:	67 95       	ror	r22
    1c88:	b3 95       	inc	r27
    1c8a:	d9 f7       	brne	.-10     	; 0x1c82 <__fixunssfsi+0x42>
    1c8c:	3e f4       	brtc	.+14     	; 0x1c9c <__fixunssfsi+0x5c>
    1c8e:	90 95       	com	r25
    1c90:	80 95       	com	r24
    1c92:	70 95       	com	r23
    1c94:	61 95       	neg	r22
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	08 95       	ret

00001c9e <__floatunsisf>:
    1c9e:	e8 94       	clt
    1ca0:	09 c0       	rjmp	.+18     	; 0x1cb4 <__floatsisf+0x12>

00001ca2 <__floatsisf>:
    1ca2:	97 fb       	bst	r25, 7
    1ca4:	3e f4       	brtc	.+14     	; 0x1cb4 <__floatsisf+0x12>
    1ca6:	90 95       	com	r25
    1ca8:	80 95       	com	r24
    1caa:	70 95       	com	r23
    1cac:	61 95       	neg	r22
    1cae:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb4:	99 23       	and	r25, r25
    1cb6:	a9 f0       	breq	.+42     	; 0x1ce2 <__floatsisf+0x40>
    1cb8:	f9 2f       	mov	r31, r25
    1cba:	96 e9       	ldi	r25, 0x96	; 150
    1cbc:	bb 27       	eor	r27, r27
    1cbe:	93 95       	inc	r25
    1cc0:	f6 95       	lsr	r31
    1cc2:	87 95       	ror	r24
    1cc4:	77 95       	ror	r23
    1cc6:	67 95       	ror	r22
    1cc8:	b7 95       	ror	r27
    1cca:	f1 11       	cpse	r31, r1
    1ccc:	f8 cf       	rjmp	.-16     	; 0x1cbe <__floatsisf+0x1c>
    1cce:	fa f4       	brpl	.+62     	; 0x1d0e <__floatsisf+0x6c>
    1cd0:	bb 0f       	add	r27, r27
    1cd2:	11 f4       	brne	.+4      	; 0x1cd8 <__floatsisf+0x36>
    1cd4:	60 ff       	sbrs	r22, 0
    1cd6:	1b c0       	rjmp	.+54     	; 0x1d0e <__floatsisf+0x6c>
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	16 c0       	rjmp	.+44     	; 0x1d0e <__floatsisf+0x6c>
    1ce2:	88 23       	and	r24, r24
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <__floatsisf+0x48>
    1ce6:	96 e9       	ldi	r25, 0x96	; 150
    1ce8:	11 c0       	rjmp	.+34     	; 0x1d0c <__floatsisf+0x6a>
    1cea:	77 23       	and	r23, r23
    1cec:	21 f0       	breq	.+8      	; 0x1cf6 <__floatsisf+0x54>
    1cee:	9e e8       	ldi	r25, 0x8E	; 142
    1cf0:	87 2f       	mov	r24, r23
    1cf2:	76 2f       	mov	r23, r22
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <__floatsisf+0x5e>
    1cf6:	66 23       	and	r22, r22
    1cf8:	71 f0       	breq	.+28     	; 0x1d16 <__floatsisf+0x74>
    1cfa:	96 e8       	ldi	r25, 0x86	; 134
    1cfc:	86 2f       	mov	r24, r22
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	2a f0       	brmi	.+10     	; 0x1d0e <__floatsisf+0x6c>
    1d04:	9a 95       	dec	r25
    1d06:	66 0f       	add	r22, r22
    1d08:	77 1f       	adc	r23, r23
    1d0a:	88 1f       	adc	r24, r24
    1d0c:	da f7       	brpl	.-10     	; 0x1d04 <__floatsisf+0x62>
    1d0e:	88 0f       	add	r24, r24
    1d10:	96 95       	lsr	r25
    1d12:	87 95       	ror	r24
    1d14:	97 f9       	bld	r25, 7
    1d16:	08 95       	ret

00001d18 <__fp_inf>:
    1d18:	97 f9       	bld	r25, 7
    1d1a:	9f 67       	ori	r25, 0x7F	; 127
    1d1c:	80 e8       	ldi	r24, 0x80	; 128
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	08 95       	ret

00001d24 <__fp_nan>:
    1d24:	9f ef       	ldi	r25, 0xFF	; 255
    1d26:	80 ec       	ldi	r24, 0xC0	; 192
    1d28:	08 95       	ret

00001d2a <__fp_pscA>:
    1d2a:	00 24       	eor	r0, r0
    1d2c:	0a 94       	dec	r0
    1d2e:	16 16       	cp	r1, r22
    1d30:	17 06       	cpc	r1, r23
    1d32:	18 06       	cpc	r1, r24
    1d34:	09 06       	cpc	r0, r25
    1d36:	08 95       	ret

00001d38 <__fp_pscB>:
    1d38:	00 24       	eor	r0, r0
    1d3a:	0a 94       	dec	r0
    1d3c:	12 16       	cp	r1, r18
    1d3e:	13 06       	cpc	r1, r19
    1d40:	14 06       	cpc	r1, r20
    1d42:	05 06       	cpc	r0, r21
    1d44:	08 95       	ret

00001d46 <__fp_round>:
    1d46:	09 2e       	mov	r0, r25
    1d48:	03 94       	inc	r0
    1d4a:	00 0c       	add	r0, r0
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <__fp_round+0xc>
    1d4e:	88 23       	and	r24, r24
    1d50:	52 f0       	brmi	.+20     	; 0x1d66 <__fp_round+0x20>
    1d52:	bb 0f       	add	r27, r27
    1d54:	40 f4       	brcc	.+16     	; 0x1d66 <__fp_round+0x20>
    1d56:	bf 2b       	or	r27, r31
    1d58:	11 f4       	brne	.+4      	; 0x1d5e <__fp_round+0x18>
    1d5a:	60 ff       	sbrs	r22, 0
    1d5c:	04 c0       	rjmp	.+8      	; 0x1d66 <__fp_round+0x20>
    1d5e:	6f 5f       	subi	r22, 0xFF	; 255
    1d60:	7f 4f       	sbci	r23, 0xFF	; 255
    1d62:	8f 4f       	sbci	r24, 0xFF	; 255
    1d64:	9f 4f       	sbci	r25, 0xFF	; 255
    1d66:	08 95       	ret

00001d68 <__fp_split3>:
    1d68:	57 fd       	sbrc	r21, 7
    1d6a:	90 58       	subi	r25, 0x80	; 128
    1d6c:	44 0f       	add	r20, r20
    1d6e:	55 1f       	adc	r21, r21
    1d70:	59 f0       	breq	.+22     	; 0x1d88 <__fp_splitA+0x10>
    1d72:	5f 3f       	cpi	r21, 0xFF	; 255
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <__fp_splitA+0x1a>
    1d76:	47 95       	ror	r20

00001d78 <__fp_splitA>:
    1d78:	88 0f       	add	r24, r24
    1d7a:	97 fb       	bst	r25, 7
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <__fp_splitA+0x20>
    1d80:	9f 3f       	cpi	r25, 0xFF	; 255
    1d82:	79 f0       	breq	.+30     	; 0x1da2 <__fp_splitA+0x2a>
    1d84:	87 95       	ror	r24
    1d86:	08 95       	ret
    1d88:	12 16       	cp	r1, r18
    1d8a:	13 06       	cpc	r1, r19
    1d8c:	14 06       	cpc	r1, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	f2 cf       	rjmp	.-28     	; 0x1d76 <__fp_split3+0xe>
    1d92:	46 95       	lsr	r20
    1d94:	f1 df       	rcall	.-30     	; 0x1d78 <__fp_splitA>
    1d96:	08 c0       	rjmp	.+16     	; 0x1da8 <__fp_splitA+0x30>
    1d98:	16 16       	cp	r1, r22
    1d9a:	17 06       	cpc	r1, r23
    1d9c:	18 06       	cpc	r1, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	f1 cf       	rjmp	.-30     	; 0x1d84 <__fp_splitA+0xc>
    1da2:	86 95       	lsr	r24
    1da4:	71 05       	cpc	r23, r1
    1da6:	61 05       	cpc	r22, r1
    1da8:	08 94       	sec
    1daa:	08 95       	ret

00001dac <__fp_zero>:
    1dac:	e8 94       	clt

00001dae <__fp_szero>:
    1dae:	bb 27       	eor	r27, r27
    1db0:	66 27       	eor	r22, r22
    1db2:	77 27       	eor	r23, r23
    1db4:	cb 01       	movw	r24, r22
    1db6:	97 f9       	bld	r25, 7
    1db8:	08 95       	ret

00001dba <__gesf2>:
    1dba:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__fp_cmp>
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <__gesf2+0x8>
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	08 95       	ret

00001dc4 <__mulsf3>:
    1dc4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__mulsf3x>
    1dc8:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_round>
    1dcc:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <__fp_pscA>
    1dd0:	38 f0       	brcs	.+14     	; 0x1de0 <__mulsf3+0x1c>
    1dd2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__fp_pscB>
    1dd6:	20 f0       	brcs	.+8      	; 0x1de0 <__mulsf3+0x1c>
    1dd8:	95 23       	and	r25, r21
    1dda:	11 f0       	breq	.+4      	; 0x1de0 <__mulsf3+0x1c>
    1ddc:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1de0:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__fp_nan>
    1de4:	11 24       	eor	r1, r1
    1de6:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>

00001dea <__mulsf3x>:
    1dea:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <__fp_split3>
    1dee:	70 f3       	brcs	.-36     	; 0x1dcc <__mulsf3+0x8>

00001df0 <__mulsf3_pse>:
    1df0:	95 9f       	mul	r25, r21
    1df2:	c1 f3       	breq	.-16     	; 0x1de4 <__mulsf3+0x20>
    1df4:	95 0f       	add	r25, r21
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	55 1f       	adc	r21, r21
    1dfa:	62 9f       	mul	r22, r18
    1dfc:	f0 01       	movw	r30, r0
    1dfe:	72 9f       	mul	r23, r18
    1e00:	bb 27       	eor	r27, r27
    1e02:	f0 0d       	add	r31, r0
    1e04:	b1 1d       	adc	r27, r1
    1e06:	63 9f       	mul	r22, r19
    1e08:	aa 27       	eor	r26, r26
    1e0a:	f0 0d       	add	r31, r0
    1e0c:	b1 1d       	adc	r27, r1
    1e0e:	aa 1f       	adc	r26, r26
    1e10:	64 9f       	mul	r22, r20
    1e12:	66 27       	eor	r22, r22
    1e14:	b0 0d       	add	r27, r0
    1e16:	a1 1d       	adc	r26, r1
    1e18:	66 1f       	adc	r22, r22
    1e1a:	82 9f       	mul	r24, r18
    1e1c:	22 27       	eor	r18, r18
    1e1e:	b0 0d       	add	r27, r0
    1e20:	a1 1d       	adc	r26, r1
    1e22:	62 1f       	adc	r22, r18
    1e24:	73 9f       	mul	r23, r19
    1e26:	b0 0d       	add	r27, r0
    1e28:	a1 1d       	adc	r26, r1
    1e2a:	62 1f       	adc	r22, r18
    1e2c:	83 9f       	mul	r24, r19
    1e2e:	a0 0d       	add	r26, r0
    1e30:	61 1d       	adc	r22, r1
    1e32:	22 1f       	adc	r18, r18
    1e34:	74 9f       	mul	r23, r20
    1e36:	33 27       	eor	r19, r19
    1e38:	a0 0d       	add	r26, r0
    1e3a:	61 1d       	adc	r22, r1
    1e3c:	23 1f       	adc	r18, r19
    1e3e:	84 9f       	mul	r24, r20
    1e40:	60 0d       	add	r22, r0
    1e42:	21 1d       	adc	r18, r1
    1e44:	82 2f       	mov	r24, r18
    1e46:	76 2f       	mov	r23, r22
    1e48:	6a 2f       	mov	r22, r26
    1e4a:	11 24       	eor	r1, r1
    1e4c:	9f 57       	subi	r25, 0x7F	; 127
    1e4e:	50 40       	sbci	r21, 0x00	; 0
    1e50:	9a f0       	brmi	.+38     	; 0x1e78 <__mulsf3_pse+0x88>
    1e52:	f1 f0       	breq	.+60     	; 0x1e90 <__mulsf3_pse+0xa0>
    1e54:	88 23       	and	r24, r24
    1e56:	4a f0       	brmi	.+18     	; 0x1e6a <__mulsf3_pse+0x7a>
    1e58:	ee 0f       	add	r30, r30
    1e5a:	ff 1f       	adc	r31, r31
    1e5c:	bb 1f       	adc	r27, r27
    1e5e:	66 1f       	adc	r22, r22
    1e60:	77 1f       	adc	r23, r23
    1e62:	88 1f       	adc	r24, r24
    1e64:	91 50       	subi	r25, 0x01	; 1
    1e66:	50 40       	sbci	r21, 0x00	; 0
    1e68:	a9 f7       	brne	.-22     	; 0x1e54 <__mulsf3_pse+0x64>
    1e6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1e6c:	51 05       	cpc	r21, r1
    1e6e:	80 f0       	brcs	.+32     	; 0x1e90 <__mulsf3_pse+0xa0>
    1e70:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__fp_inf>
    1e74:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__fp_szero>
    1e78:	5f 3f       	cpi	r21, 0xFF	; 255
    1e7a:	e4 f3       	brlt	.-8      	; 0x1e74 <__mulsf3_pse+0x84>
    1e7c:	98 3e       	cpi	r25, 0xE8	; 232
    1e7e:	d4 f3       	brlt	.-12     	; 0x1e74 <__mulsf3_pse+0x84>
    1e80:	86 95       	lsr	r24
    1e82:	77 95       	ror	r23
    1e84:	67 95       	ror	r22
    1e86:	b7 95       	ror	r27
    1e88:	f7 95       	ror	r31
    1e8a:	e7 95       	ror	r30
    1e8c:	9f 5f       	subi	r25, 0xFF	; 255
    1e8e:	c1 f7       	brne	.-16     	; 0x1e80 <__mulsf3_pse+0x90>
    1e90:	fe 2b       	or	r31, r30
    1e92:	88 0f       	add	r24, r24
    1e94:	91 1d       	adc	r25, r1
    1e96:	96 95       	lsr	r25
    1e98:	87 95       	ror	r24
    1e9a:	97 f9       	bld	r25, 7
    1e9c:	08 95       	ret

00001e9e <__fp_cmp>:
    1e9e:	99 0f       	add	r25, r25
    1ea0:	00 08       	sbc	r0, r0
    1ea2:	55 0f       	add	r21, r21
    1ea4:	aa 0b       	sbc	r26, r26
    1ea6:	e0 e8       	ldi	r30, 0x80	; 128
    1ea8:	fe ef       	ldi	r31, 0xFE	; 254
    1eaa:	16 16       	cp	r1, r22
    1eac:	17 06       	cpc	r1, r23
    1eae:	e8 07       	cpc	r30, r24
    1eb0:	f9 07       	cpc	r31, r25
    1eb2:	c0 f0       	brcs	.+48     	; 0x1ee4 <__fp_cmp+0x46>
    1eb4:	12 16       	cp	r1, r18
    1eb6:	13 06       	cpc	r1, r19
    1eb8:	e4 07       	cpc	r30, r20
    1eba:	f5 07       	cpc	r31, r21
    1ebc:	98 f0       	brcs	.+38     	; 0x1ee4 <__fp_cmp+0x46>
    1ebe:	62 1b       	sub	r22, r18
    1ec0:	73 0b       	sbc	r23, r19
    1ec2:	84 0b       	sbc	r24, r20
    1ec4:	95 0b       	sbc	r25, r21
    1ec6:	39 f4       	brne	.+14     	; 0x1ed6 <__fp_cmp+0x38>
    1ec8:	0a 26       	eor	r0, r26
    1eca:	61 f0       	breq	.+24     	; 0x1ee4 <__fp_cmp+0x46>
    1ecc:	23 2b       	or	r18, r19
    1ece:	24 2b       	or	r18, r20
    1ed0:	25 2b       	or	r18, r21
    1ed2:	21 f4       	brne	.+8      	; 0x1edc <__fp_cmp+0x3e>
    1ed4:	08 95       	ret
    1ed6:	0a 26       	eor	r0, r26
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <__fp_cmp+0x3e>
    1eda:	a1 40       	sbci	r26, 0x01	; 1
    1edc:	a6 95       	lsr	r26
    1ede:	8f ef       	ldi	r24, 0xFF	; 255
    1ee0:	81 1d       	adc	r24, r1
    1ee2:	81 1d       	adc	r24, r1
    1ee4:	08 95       	ret

00001ee6 <__udivmodhi4>:
    1ee6:	aa 1b       	sub	r26, r26
    1ee8:	bb 1b       	sub	r27, r27
    1eea:	51 e1       	ldi	r21, 0x11	; 17
    1eec:	07 c0       	rjmp	.+14     	; 0x1efc <__udivmodhi4_ep>

00001eee <__udivmodhi4_loop>:
    1eee:	aa 1f       	adc	r26, r26
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	a6 17       	cp	r26, r22
    1ef4:	b7 07       	cpc	r27, r23
    1ef6:	10 f0       	brcs	.+4      	; 0x1efc <__udivmodhi4_ep>
    1ef8:	a6 1b       	sub	r26, r22
    1efa:	b7 0b       	sbc	r27, r23

00001efc <__udivmodhi4_ep>:
    1efc:	88 1f       	adc	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	5a 95       	dec	r21
    1f02:	a9 f7       	brne	.-22     	; 0x1eee <__udivmodhi4_loop>
    1f04:	80 95       	com	r24
    1f06:	90 95       	com	r25
    1f08:	bc 01       	movw	r22, r24
    1f0a:	cd 01       	movw	r24, r26
    1f0c:	08 95       	ret

00001f0e <__divmodhi4>:
    1f0e:	97 fb       	bst	r25, 7
    1f10:	07 2e       	mov	r0, r23
    1f12:	16 f4       	brtc	.+4      	; 0x1f18 <__divmodhi4+0xa>
    1f14:	00 94       	com	r0
    1f16:	07 d0       	rcall	.+14     	; 0x1f26 <__divmodhi4_neg1>
    1f18:	77 fd       	sbrc	r23, 7
    1f1a:	09 d0       	rcall	.+18     	; 0x1f2e <__divmodhi4_neg2>
    1f1c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <__udivmodhi4>
    1f20:	07 fc       	sbrc	r0, 7
    1f22:	05 d0       	rcall	.+10     	; 0x1f2e <__divmodhi4_neg2>
    1f24:	3e f4       	brtc	.+14     	; 0x1f34 <__divmodhi4_exit>

00001f26 <__divmodhi4_neg1>:
    1f26:	90 95       	com	r25
    1f28:	81 95       	neg	r24
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	08 95       	ret

00001f2e <__divmodhi4_neg2>:
    1f2e:	70 95       	com	r23
    1f30:	61 95       	neg	r22
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255

00001f34 <__divmodhi4_exit>:
    1f34:	08 95       	ret

00001f36 <__divmodsi4>:
    1f36:	05 2e       	mov	r0, r21
    1f38:	97 fb       	bst	r25, 7
    1f3a:	1e f4       	brtc	.+6      	; 0x1f42 <__divmodsi4+0xc>
    1f3c:	00 94       	com	r0
    1f3e:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__negsi2>
    1f42:	57 fd       	sbrc	r21, 7
    1f44:	07 d0       	rcall	.+14     	; 0x1f54 <__divmodsi4_neg2>
    1f46:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmodsi4>
    1f4a:	07 fc       	sbrc	r0, 7
    1f4c:	03 d0       	rcall	.+6      	; 0x1f54 <__divmodsi4_neg2>
    1f4e:	4e f4       	brtc	.+18     	; 0x1f62 <__divmodsi4_exit>
    1f50:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <__negsi2>

00001f54 <__divmodsi4_neg2>:
    1f54:	50 95       	com	r21
    1f56:	40 95       	com	r20
    1f58:	30 95       	com	r19
    1f5a:	21 95       	neg	r18
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5e:	4f 4f       	sbci	r20, 0xFF	; 255
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255

00001f62 <__divmodsi4_exit>:
    1f62:	08 95       	ret

00001f64 <__negsi2>:
    1f64:	90 95       	com	r25
    1f66:	80 95       	com	r24
    1f68:	70 95       	com	r23
    1f6a:	61 95       	neg	r22
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f70:	9f 4f       	sbci	r25, 0xFF	; 255
    1f72:	08 95       	ret

00001f74 <__tablejump2__>:
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	05 90       	lpm	r0, Z+
    1f7a:	f4 91       	lpm	r31, Z
    1f7c:	e0 2d       	mov	r30, r0
    1f7e:	09 94       	ijmp

00001f80 <__udivmodsi4>:
    1f80:	a1 e2       	ldi	r26, 0x21	; 33
    1f82:	1a 2e       	mov	r1, r26
    1f84:	aa 1b       	sub	r26, r26
    1f86:	bb 1b       	sub	r27, r27
    1f88:	fd 01       	movw	r30, r26
    1f8a:	0d c0       	rjmp	.+26     	; 0x1fa6 <__udivmodsi4_ep>

00001f8c <__udivmodsi4_loop>:
    1f8c:	aa 1f       	adc	r26, r26
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	ee 1f       	adc	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	a2 17       	cp	r26, r18
    1f96:	b3 07       	cpc	r27, r19
    1f98:	e4 07       	cpc	r30, r20
    1f9a:	f5 07       	cpc	r31, r21
    1f9c:	20 f0       	brcs	.+8      	; 0x1fa6 <__udivmodsi4_ep>
    1f9e:	a2 1b       	sub	r26, r18
    1fa0:	b3 0b       	sbc	r27, r19
    1fa2:	e4 0b       	sbc	r30, r20
    1fa4:	f5 0b       	sbc	r31, r21

00001fa6 <__udivmodsi4_ep>:
    1fa6:	66 1f       	adc	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	88 1f       	adc	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	1a 94       	dec	r1
    1fb0:	69 f7       	brne	.-38     	; 0x1f8c <__udivmodsi4_loop>
    1fb2:	60 95       	com	r22
    1fb4:	70 95       	com	r23
    1fb6:	80 95       	com	r24
    1fb8:	90 95       	com	r25
    1fba:	9b 01       	movw	r18, r22
    1fbc:	ac 01       	movw	r20, r24
    1fbe:	bd 01       	movw	r22, r26
    1fc0:	cf 01       	movw	r24, r30
    1fc2:	08 95       	ret

00001fc4 <atof>:
    1fc4:	66 27       	eor	r22, r22
    1fc6:	77 27       	eor	r23, r23
    1fc8:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <strtod>

00001fcc <__itoa_ncheck>:
    1fcc:	bb 27       	eor	r27, r27
    1fce:	4a 30       	cpi	r20, 0x0A	; 10
    1fd0:	31 f4       	brne	.+12     	; 0x1fde <__itoa_ncheck+0x12>
    1fd2:	99 23       	and	r25, r25
    1fd4:	22 f4       	brpl	.+8      	; 0x1fde <__itoa_ncheck+0x12>
    1fd6:	bd e2       	ldi	r27, 0x2D	; 45
    1fd8:	90 95       	com	r25
    1fda:	81 95       	neg	r24
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__utoa_common>

00001fe2 <__utoa_ncheck>:
    1fe2:	bb 27       	eor	r27, r27

00001fe4 <__utoa_common>:
    1fe4:	fb 01       	movw	r30, r22
    1fe6:	55 27       	eor	r21, r21
    1fe8:	aa 27       	eor	r26, r26
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	aa 1f       	adc	r26, r26
    1ff0:	a4 17       	cp	r26, r20
    1ff2:	10 f0       	brcs	.+4      	; 0x1ff8 <__utoa_common+0x14>
    1ff4:	a4 1b       	sub	r26, r20
    1ff6:	83 95       	inc	r24
    1ff8:	50 51       	subi	r21, 0x10	; 16
    1ffa:	b9 f7       	brne	.-18     	; 0x1fea <__utoa_common+0x6>
    1ffc:	a0 5d       	subi	r26, 0xD0	; 208
    1ffe:	aa 33       	cpi	r26, 0x3A	; 58
    2000:	08 f0       	brcs	.+2      	; 0x2004 <__utoa_common+0x20>
    2002:	a9 5d       	subi	r26, 0xD9	; 217
    2004:	a1 93       	st	Z+, r26
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	79 f7       	brne	.-34     	; 0x1fe8 <__utoa_common+0x4>
    200a:	b1 11       	cpse	r27, r1
    200c:	b1 93       	st	Z+, r27
    200e:	11 92       	st	Z+, r1
    2010:	cb 01       	movw	r24, r22
    2012:	0c 94 7a 11 	jmp	0x22f4	; 0x22f4 <strrev>

00002016 <strtod>:
    2016:	a0 e0       	ldi	r26, 0x00	; 0
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	e1 e1       	ldi	r30, 0x11	; 17
    201c:	f0 e1       	ldi	r31, 0x10	; 16
    201e:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__prologue_saves__+0xc>
    2022:	ec 01       	movw	r28, r24
    2024:	6b 01       	movw	r12, r22
    2026:	61 15       	cp	r22, r1
    2028:	71 05       	cpc	r23, r1
    202a:	19 f0       	breq	.+6      	; 0x2032 <strtod+0x1c>
    202c:	fb 01       	movw	r30, r22
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	80 83       	st	Z, r24
    2032:	7e 01       	movw	r14, r28
    2034:	ff ef       	ldi	r31, 0xFF	; 255
    2036:	ef 1a       	sub	r14, r31
    2038:	ff 0a       	sbc	r15, r31
    203a:	08 81       	ld	r16, Y
    203c:	80 2f       	mov	r24, r16
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 59 11 	call	0x22b2	; 0x22b2 <isspace>
    2044:	89 2b       	or	r24, r25
    2046:	11 f0       	breq	.+4      	; 0x204c <strtod+0x36>
    2048:	e7 01       	movw	r28, r14
    204a:	f3 cf       	rjmp	.-26     	; 0x2032 <strtod+0x1c>
    204c:	0d 32       	cpi	r16, 0x2D	; 45
    204e:	39 f4       	brne	.+14     	; 0x205e <strtod+0x48>
    2050:	7e 01       	movw	r14, r28
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	e8 0e       	add	r14, r24
    2056:	f1 1c       	adc	r15, r1
    2058:	09 81       	ldd	r16, Y+1	; 0x01
    205a:	11 e0       	ldi	r17, 0x01	; 1
    205c:	08 c0       	rjmp	.+16     	; 0x206e <strtod+0x58>
    205e:	0b 32       	cpi	r16, 0x2B	; 43
    2060:	29 f4       	brne	.+10     	; 0x206c <strtod+0x56>
    2062:	7e 01       	movw	r14, r28
    2064:	92 e0       	ldi	r25, 0x02	; 2
    2066:	e9 0e       	add	r14, r25
    2068:	f1 1c       	adc	r15, r1
    206a:	09 81       	ldd	r16, Y+1	; 0x01
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	e7 01       	movw	r28, r14
    2070:	21 97       	sbiw	r28, 0x01	; 1
    2072:	43 e0       	ldi	r20, 0x03	; 3
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	66 e7       	ldi	r22, 0x76	; 118
    2078:	70 e0       	ldi	r23, 0x00	; 0
    207a:	ce 01       	movw	r24, r28
    207c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <strncasecmp_P>
    2080:	89 2b       	or	r24, r25
    2082:	c1 f4       	brne	.+48     	; 0x20b4 <strtod+0x9e>
    2084:	23 96       	adiw	r28, 0x03	; 3
    2086:	45 e0       	ldi	r20, 0x05	; 5
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	61 e7       	ldi	r22, 0x71	; 113
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	ce 01       	movw	r24, r28
    2090:	0e 94 62 11 	call	0x22c4	; 0x22c4 <strncasecmp_P>
    2094:	89 2b       	or	r24, r25
    2096:	09 f4       	brne	.+2      	; 0x209a <strtod+0x84>
    2098:	25 96       	adiw	r28, 0x05	; 5
    209a:	c1 14       	cp	r12, r1
    209c:	d1 04       	cpc	r13, r1
    209e:	19 f0       	breq	.+6      	; 0x20a6 <strtod+0x90>
    20a0:	f6 01       	movw	r30, r12
    20a2:	d1 83       	std	Z+1, r29	; 0x01
    20a4:	c0 83       	st	Z, r28
    20a6:	11 11       	cpse	r17, r1
    20a8:	f6 c0       	rjmp	.+492    	; 0x2296 <strtod+0x280>
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	80 e8       	ldi	r24, 0x80	; 128
    20b0:	9f e7       	ldi	r25, 0x7F	; 127
    20b2:	fa c0       	rjmp	.+500    	; 0x22a8 <strtod+0x292>
    20b4:	43 e0       	ldi	r20, 0x03	; 3
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	6e e6       	ldi	r22, 0x6E	; 110
    20ba:	70 e0       	ldi	r23, 0x00	; 0
    20bc:	ce 01       	movw	r24, r28
    20be:	0e 94 62 11 	call	0x22c4	; 0x22c4 <strncasecmp_P>
    20c2:	89 2b       	or	r24, r25
    20c4:	59 f4       	brne	.+22     	; 0x20dc <strtod+0xc6>
    20c6:	c1 14       	cp	r12, r1
    20c8:	d1 04       	cpc	r13, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <strtod+0xb8>
    20cc:	e9 c0       	rjmp	.+466    	; 0x22a0 <strtod+0x28a>
    20ce:	f2 e0       	ldi	r31, 0x02	; 2
    20d0:	ef 0e       	add	r14, r31
    20d2:	f1 1c       	adc	r15, r1
    20d4:	f6 01       	movw	r30, r12
    20d6:	f1 82       	std	Z+1, r15	; 0x01
    20d8:	e0 82       	st	Z, r14
    20da:	e2 c0       	rjmp	.+452    	; 0x22a0 <strtod+0x28a>
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	a9 01       	movw	r20, r18
    20e2:	c0 e0       	ldi	r28, 0x00	; 0
    20e4:	d0 e0       	ldi	r29, 0x00	; 0
    20e6:	f7 01       	movw	r30, r14
    20e8:	80 ed       	ldi	r24, 0xD0	; 208
    20ea:	a8 2e       	mov	r10, r24
    20ec:	a0 0e       	add	r10, r16
    20ee:	89 e0       	ldi	r24, 0x09	; 9
    20f0:	8a 15       	cp	r24, r10
    20f2:	30 f1       	brcs	.+76     	; 0x2140 <strtod+0x12a>
    20f4:	91 2f       	mov	r25, r17
    20f6:	92 60       	ori	r25, 0x02	; 2
    20f8:	b9 2e       	mov	r11, r25
    20fa:	81 2f       	mov	r24, r17
    20fc:	88 70       	andi	r24, 0x08	; 8
    20fe:	12 ff       	sbrs	r17, 2
    2100:	04 c0       	rjmp	.+8      	; 0x210a <strtod+0xf4>
    2102:	81 11       	cpse	r24, r1
    2104:	24 c0       	rjmp	.+72     	; 0x214e <strtod+0x138>
    2106:	21 96       	adiw	r28, 0x01	; 1
    2108:	22 c0       	rjmp	.+68     	; 0x214e <strtod+0x138>
    210a:	81 11       	cpse	r24, r1
    210c:	21 97       	sbiw	r28, 0x01	; 1
    210e:	a5 e0       	ldi	r26, 0x05	; 5
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	0e 94 92 11 	call	0x2324	; 0x2324 <__muluhisi3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	aa 1f       	adc	r26, r26
    2120:	bb 1f       	adc	r27, r27
    2122:	9c 01       	movw	r18, r24
    2124:	ad 01       	movw	r20, r26
    2126:	2a 0d       	add	r18, r10
    2128:	31 1d       	adc	r19, r1
    212a:	41 1d       	adc	r20, r1
    212c:	51 1d       	adc	r21, r1
    212e:	28 39       	cpi	r18, 0x98	; 152
    2130:	89 e9       	ldi	r24, 0x99	; 153
    2132:	38 07       	cpc	r19, r24
    2134:	48 07       	cpc	r20, r24
    2136:	89 e1       	ldi	r24, 0x19	; 25
    2138:	58 07       	cpc	r21, r24
    213a:	48 f0       	brcs	.+18     	; 0x214e <strtod+0x138>
    213c:	16 60       	ori	r17, 0x06	; 6
    213e:	06 c0       	rjmp	.+12     	; 0x214c <strtod+0x136>
    2140:	9e ef       	ldi	r25, 0xFE	; 254
    2142:	a9 12       	cpse	r10, r25
    2144:	0a c0       	rjmp	.+20     	; 0x215a <strtod+0x144>
    2146:	13 fd       	sbrc	r17, 3
    2148:	40 c0       	rjmp	.+128    	; 0x21ca <strtod+0x1b4>
    214a:	18 60       	ori	r17, 0x08	; 8
    214c:	b1 2e       	mov	r11, r17
    214e:	8f ef       	ldi	r24, 0xFF	; 255
    2150:	e8 1a       	sub	r14, r24
    2152:	f8 0a       	sbc	r15, r24
    2154:	00 81       	ld	r16, Z
    2156:	1b 2d       	mov	r17, r11
    2158:	c6 cf       	rjmp	.-116    	; 0x20e6 <strtod+0xd0>
    215a:	80 2f       	mov	r24, r16
    215c:	8f 7d       	andi	r24, 0xDF	; 223
    215e:	85 34       	cpi	r24, 0x45	; 69
    2160:	a1 f5       	brne	.+104    	; 0x21ca <strtod+0x1b4>
    2162:	80 81       	ld	r24, Z
    2164:	8d 32       	cpi	r24, 0x2D	; 45
    2166:	11 f4       	brne	.+4      	; 0x216c <strtod+0x156>
    2168:	10 61       	ori	r17, 0x10	; 16
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <strtod+0x162>
    216c:	8b 32       	cpi	r24, 0x2B	; 43
    216e:	21 f0       	breq	.+8      	; 0x2178 <strtod+0x162>
    2170:	31 96       	adiw	r30, 0x01	; 1
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <strtod+0x16a>
    2178:	81 81       	ldd	r24, Z+1	; 0x01
    217a:	32 96       	adiw	r30, 0x02	; 2
    217c:	62 e0       	ldi	r22, 0x02	; 2
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	80 53       	subi	r24, 0x30	; 48
    2182:	8a 30       	cpi	r24, 0x0A	; 10
    2184:	18 f0       	brcs	.+6      	; 0x218c <strtod+0x176>
    2186:	e6 1b       	sub	r30, r22
    2188:	f7 0b       	sbc	r31, r23
    218a:	1f c0       	rjmp	.+62     	; 0x21ca <strtod+0x1b4>
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	60 38       	cpi	r22, 0x80	; 128
    2192:	9c e0       	ldi	r25, 0x0C	; 12
    2194:	79 07       	cpc	r23, r25
    2196:	5c f4       	brge	.+22     	; 0x21ae <strtod+0x198>
    2198:	db 01       	movw	r26, r22
    219a:	aa 0f       	add	r26, r26
    219c:	bb 1f       	adc	r27, r27
    219e:	aa 0f       	add	r26, r26
    21a0:	bb 1f       	adc	r27, r27
    21a2:	6a 0f       	add	r22, r26
    21a4:	7b 1f       	adc	r23, r27
    21a6:	66 0f       	add	r22, r22
    21a8:	77 1f       	adc	r23, r23
    21aa:	68 0f       	add	r22, r24
    21ac:	71 1d       	adc	r23, r1
    21ae:	31 96       	adiw	r30, 0x01	; 1
    21b0:	df 01       	movw	r26, r30
    21b2:	11 97       	sbiw	r26, 0x01	; 1
    21b4:	8c 91       	ld	r24, X
    21b6:	80 53       	subi	r24, 0x30	; 48
    21b8:	8a 30       	cpi	r24, 0x0A	; 10
    21ba:	50 f3       	brcs	.-44     	; 0x2190 <strtod+0x17a>
    21bc:	14 ff       	sbrs	r17, 4
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <strtod+0x1b0>
    21c0:	71 95       	neg	r23
    21c2:	61 95       	neg	r22
    21c4:	71 09       	sbc	r23, r1
    21c6:	c6 0f       	add	r28, r22
    21c8:	d7 1f       	adc	r29, r23
    21ca:	11 ff       	sbrs	r17, 1
    21cc:	08 c0       	rjmp	.+16     	; 0x21de <strtod+0x1c8>
    21ce:	c1 14       	cp	r12, r1
    21d0:	d1 04       	cpc	r13, r1
    21d2:	29 f0       	breq	.+10     	; 0x21de <strtod+0x1c8>
    21d4:	cf 01       	movw	r24, r30
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f6 01       	movw	r30, r12
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	ca 01       	movw	r24, r20
    21e0:	b9 01       	movw	r22, r18
    21e2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__floatunsisf>
    21e6:	21 2f       	mov	r18, r17
    21e8:	23 70       	andi	r18, 0x03	; 3
    21ea:	23 30       	cpi	r18, 0x03	; 3
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <strtod+0x1de>
    21ee:	4b 01       	movw	r8, r22
    21f0:	5c 01       	movw	r10, r24
    21f2:	06 c0       	rjmp	.+12     	; 0x2200 <strtod+0x1ea>
    21f4:	4b 01       	movw	r8, r22
    21f6:	5c 01       	movw	r10, r24
    21f8:	b7 fa       	bst	r11, 7
    21fa:	b0 94       	com	r11
    21fc:	b7 f8       	bld	r11, 7
    21fe:	b0 94       	com	r11
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	a9 01       	movw	r20, r18
    2206:	c5 01       	movw	r24, r10
    2208:	b4 01       	movw	r22, r8
    220a:	0e 94 8a 11 	call	0x2314	; 0x2314 <__cmpsf2>
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <strtod+0x1fe>
    2212:	3e c0       	rjmp	.+124    	; 0x2290 <strtod+0x27a>
    2214:	d7 ff       	sbrs	r29, 7
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <strtod+0x20e>
    2218:	d1 95       	neg	r29
    221a:	c1 95       	neg	r28
    221c:	d1 09       	sbc	r29, r1
    221e:	0d e8       	ldi	r16, 0x8D	; 141
    2220:	10 e0       	ldi	r17, 0x00	; 0
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <strtod+0x212>
    2224:	05 ea       	ldi	r16, 0xA5	; 165
    2226:	10 e0       	ldi	r17, 0x00	; 0
    2228:	68 01       	movw	r12, r16
    222a:	f8 e1       	ldi	r31, 0x18	; 24
    222c:	cf 1a       	sub	r12, r31
    222e:	d1 08       	sbc	r13, r1
    2230:	90 e2       	ldi	r25, 0x20	; 32
    2232:	e9 2e       	mov	r14, r25
    2234:	f1 2c       	mov	r15, r1
    2236:	ce 15       	cp	r28, r14
    2238:	df 05       	cpc	r29, r15
    223a:	74 f0       	brlt	.+28     	; 0x2258 <strtod+0x242>
    223c:	f8 01       	movw	r30, r16
    223e:	25 91       	lpm	r18, Z+
    2240:	35 91       	lpm	r19, Z+
    2242:	45 91       	lpm	r20, Z+
    2244:	54 91       	lpm	r21, Z
    2246:	c5 01       	movw	r24, r10
    2248:	b4 01       	movw	r22, r8
    224a:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__mulsf3>
    224e:	4b 01       	movw	r8, r22
    2250:	5c 01       	movw	r10, r24
    2252:	ce 19       	sub	r28, r14
    2254:	df 09       	sbc	r29, r15
    2256:	ef cf       	rjmp	.-34     	; 0x2236 <strtod+0x220>
    2258:	04 50       	subi	r16, 0x04	; 4
    225a:	11 09       	sbc	r17, r1
    225c:	f5 94       	asr	r15
    225e:	e7 94       	ror	r14
    2260:	0c 15       	cp	r16, r12
    2262:	1d 05       	cpc	r17, r13
    2264:	41 f7       	brne	.-48     	; 0x2236 <strtod+0x220>
    2266:	8a 2d       	mov	r24, r10
    2268:	88 0f       	add	r24, r24
    226a:	8b 2d       	mov	r24, r11
    226c:	88 1f       	adc	r24, r24
    226e:	8f 3f       	cpi	r24, 0xFF	; 255
    2270:	49 f0       	breq	.+18     	; 0x2284 <strtod+0x26e>
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	a9 01       	movw	r20, r18
    2278:	c5 01       	movw	r24, r10
    227a:	b4 01       	movw	r22, r8
    227c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__cmpsf2>
    2280:	81 11       	cpse	r24, r1
    2282:	06 c0       	rjmp	.+12     	; 0x2290 <strtod+0x27a>
    2284:	82 e2       	ldi	r24, 0x22	; 34
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <errno+0x1>
    228c:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <errno>
    2290:	c5 01       	movw	r24, r10
    2292:	b4 01       	movw	r22, r8
    2294:	09 c0       	rjmp	.+18     	; 0x22a8 <strtod+0x292>
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	9f ef       	ldi	r25, 0xFF	; 255
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <strtod+0x292>
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	80 ec       	ldi	r24, 0xC0	; 192
    22a6:	9f e7       	ldi	r25, 0x7F	; 127
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	ec e0       	ldi	r30, 0x0C	; 12
    22ae:	0c 94 bf 11 	jmp	0x237e	; 0x237e <__epilogue_restores__+0xc>

000022b2 <isspace>:
    22b2:	91 11       	cpse	r25, r1
    22b4:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__ctype_isfalse>
    22b8:	80 32       	cpi	r24, 0x20	; 32
    22ba:	19 f0       	breq	.+6      	; 0x22c2 <isspace+0x10>
    22bc:	89 50       	subi	r24, 0x09	; 9
    22be:	85 50       	subi	r24, 0x05	; 5
    22c0:	c8 f7       	brcc	.-14     	; 0x22b4 <isspace+0x2>
    22c2:	08 95       	ret

000022c4 <strncasecmp_P>:
    22c4:	fb 01       	movw	r30, r22
    22c6:	dc 01       	movw	r26, r24
    22c8:	41 50       	subi	r20, 0x01	; 1
    22ca:	50 40       	sbci	r21, 0x00	; 0
    22cc:	88 f0       	brcs	.+34     	; 0x22f0 <strncasecmp_P+0x2c>
    22ce:	8d 91       	ld	r24, X+
    22d0:	81 34       	cpi	r24, 0x41	; 65
    22d2:	1c f0       	brlt	.+6      	; 0x22da <strncasecmp_P+0x16>
    22d4:	8b 35       	cpi	r24, 0x5B	; 91
    22d6:	0c f4       	brge	.+2      	; 0x22da <strncasecmp_P+0x16>
    22d8:	80 5e       	subi	r24, 0xE0	; 224
    22da:	65 91       	lpm	r22, Z+
    22dc:	61 34       	cpi	r22, 0x41	; 65
    22de:	1c f0       	brlt	.+6      	; 0x22e6 <strncasecmp_P+0x22>
    22e0:	6b 35       	cpi	r22, 0x5B	; 91
    22e2:	0c f4       	brge	.+2      	; 0x22e6 <strncasecmp_P+0x22>
    22e4:	60 5e       	subi	r22, 0xE0	; 224
    22e6:	86 1b       	sub	r24, r22
    22e8:	61 11       	cpse	r22, r1
    22ea:	71 f3       	breq	.-36     	; 0x22c8 <strncasecmp_P+0x4>
    22ec:	99 0b       	sbc	r25, r25
    22ee:	08 95       	ret
    22f0:	88 1b       	sub	r24, r24
    22f2:	fc cf       	rjmp	.-8      	; 0x22ec <strncasecmp_P+0x28>

000022f4 <strrev>:
    22f4:	dc 01       	movw	r26, r24
    22f6:	fc 01       	movw	r30, r24
    22f8:	67 2f       	mov	r22, r23
    22fa:	71 91       	ld	r23, Z+
    22fc:	77 23       	and	r23, r23
    22fe:	e1 f7       	brne	.-8      	; 0x22f8 <strrev+0x4>
    2300:	32 97       	sbiw	r30, 0x02	; 2
    2302:	04 c0       	rjmp	.+8      	; 0x230c <strrev+0x18>
    2304:	7c 91       	ld	r23, X
    2306:	6d 93       	st	X+, r22
    2308:	70 83       	st	Z, r23
    230a:	62 91       	ld	r22, -Z
    230c:	ae 17       	cp	r26, r30
    230e:	bf 07       	cpc	r27, r31
    2310:	c8 f3       	brcs	.-14     	; 0x2304 <strrev+0x10>
    2312:	08 95       	ret

00002314 <__cmpsf2>:
    2314:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <__fp_cmp>
    2318:	08 f4       	brcc	.+2      	; 0x231c <__cmpsf2+0x8>
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	08 95       	ret

0000231e <__ctype_isfalse>:
    231e:	99 27       	eor	r25, r25
    2320:	88 27       	eor	r24, r24

00002322 <__ctype_istrue>:
    2322:	08 95       	ret

00002324 <__muluhisi3>:
    2324:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <__umulhisi3>
    2328:	a5 9f       	mul	r26, r21
    232a:	90 0d       	add	r25, r0
    232c:	b4 9f       	mul	r27, r20
    232e:	90 0d       	add	r25, r0
    2330:	a4 9f       	mul	r26, r20
    2332:	80 0d       	add	r24, r0
    2334:	91 1d       	adc	r25, r1
    2336:	11 24       	eor	r1, r1
    2338:	08 95       	ret

0000233a <__prologue_saves__>:
    233a:	2f 92       	push	r2
    233c:	3f 92       	push	r3
    233e:	4f 92       	push	r4
    2340:	5f 92       	push	r5
    2342:	6f 92       	push	r6
    2344:	7f 92       	push	r7
    2346:	8f 92       	push	r8
    2348:	9f 92       	push	r9
    234a:	af 92       	push	r10
    234c:	bf 92       	push	r11
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	ca 1b       	sub	r28, r26
    2364:	db 0b       	sbc	r29, r27
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	09 94       	ijmp

00002372 <__epilogue_restores__>:
    2372:	2a 88       	ldd	r2, Y+18	; 0x12
    2374:	39 88       	ldd	r3, Y+17	; 0x11
    2376:	48 88       	ldd	r4, Y+16	; 0x10
    2378:	5f 84       	ldd	r5, Y+15	; 0x0f
    237a:	6e 84       	ldd	r6, Y+14	; 0x0e
    237c:	7d 84       	ldd	r7, Y+13	; 0x0d
    237e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2380:	9b 84       	ldd	r9, Y+11	; 0x0b
    2382:	aa 84       	ldd	r10, Y+10	; 0x0a
    2384:	b9 84       	ldd	r11, Y+9	; 0x09
    2386:	c8 84       	ldd	r12, Y+8	; 0x08
    2388:	df 80       	ldd	r13, Y+7	; 0x07
    238a:	ee 80       	ldd	r14, Y+6	; 0x06
    238c:	fd 80       	ldd	r15, Y+5	; 0x05
    238e:	0c 81       	ldd	r16, Y+4	; 0x04
    2390:	1b 81       	ldd	r17, Y+3	; 0x03
    2392:	aa 81       	ldd	r26, Y+2	; 0x02
    2394:	b9 81       	ldd	r27, Y+1	; 0x01
    2396:	ce 0f       	add	r28, r30
    2398:	d1 1d       	adc	r29, r1
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	ed 01       	movw	r28, r26
    23a6:	08 95       	ret

000023a8 <__umulhisi3>:
    23a8:	a2 9f       	mul	r26, r18
    23aa:	b0 01       	movw	r22, r0
    23ac:	b3 9f       	mul	r27, r19
    23ae:	c0 01       	movw	r24, r0
    23b0:	a3 9f       	mul	r26, r19
    23b2:	70 0d       	add	r23, r0
    23b4:	81 1d       	adc	r24, r1
    23b6:	11 24       	eor	r1, r1
    23b8:	91 1d       	adc	r25, r1
    23ba:	b2 9f       	mul	r27, r18
    23bc:	70 0d       	add	r23, r0
    23be:	81 1d       	adc	r24, r1
    23c0:	11 24       	eor	r1, r1
    23c2:	91 1d       	adc	r25, r1
    23c4:	08 95       	ret

000023c6 <_exit>:
    23c6:	f8 94       	cli

000023c8 <__stop_program>:
    23c8:	ff cf       	rjmp	.-2      	; 0x23c8 <__stop_program>
