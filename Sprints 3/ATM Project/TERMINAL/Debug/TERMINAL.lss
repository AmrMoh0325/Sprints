
Terminal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002be  00800060  000023ec  00002480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000435  0080031e  0080031e  0000273e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000273e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e0c  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001490  00000000  00000000  000079cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026fb  00000000  00000000  00008e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b14  00000000  00000000  0000b558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001664  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002efa  00000000  00000000  0000d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  000105ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
       4:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <__vector_1>
       8:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_2>
       c:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__vector_3>
      10:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      14:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      18:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      1c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      20:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      24:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      2c:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      30:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      34:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__vector_13>
      38:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      3c:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__vector_15>
      40:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      44:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      48:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      4c:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_19>
      50:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__bad_interrupt>
      54:	77 06       	cpc	r7, r23
      56:	97 06       	cpc	r9, r23
      58:	79 06       	cpc	r7, r25
      5a:	7b 06       	cpc	r7, r27
      5c:	7f 06       	cpc	r7, r31
      5e:	81 06       	cpc	r8, r17
      60:	83 06       	cpc	r8, r19
      62:	87 06       	cpc	r8, r23
      64:	89 06       	cpc	r8, r25
      66:	8b 06       	cpc	r8, r27
      68:	8f 06       	cpc	r8, r31
      6a:	91 06       	cpc	r9, r17
      6c:	93 06       	cpc	r9, r19

0000006e <__trampolines_end>:
      6e:	4e 41       	sbci	r20, 0x1E	; 30
      70:	4e 49       	Address 0x00000070 is out of bounds.
.word	0xffff	; ????

00000071 <pstr_inity>:
      71:	49 4e 49 54 59                                      INITY

00000076 <pstr_inf>:
      76:	49 4e 46                                            INF

00000079 <pwr_m10>:
      79:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      89:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000091 <pwr_p10>:
      91:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      a1:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d8 e0       	ldi	r29, 0x08	; 8
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	13 e0       	ldi	r17, 0x03	; 3
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	ec ee       	ldi	r30, 0xEC	; 236
      be:	f3 e2       	ldi	r31, 0x23	; 35
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ae 31       	cpi	r26, 0x1E	; 30
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	27 e0       	ldi	r18, 0x07	; 7
      ce:	ae e1       	ldi	r26, 0x1E	; 30
      d0:	b3 e0       	ldi	r27, 0x03	; 3
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a3 35       	cpi	r26, 0x53	; 83
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>
      dc:	0e 94 40 09 	call	0x1280	; 0x1280 <main>
      e0:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <_exit>

000000e4 <__bad_interrupt>:
      e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e8 <String_compare>:
* Parameters (out): sint8_t
* Return value: 0= if strings are identical -- 1=str1>str2 -- -1=str1<str2
* Description: A function to compare two strings
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
      e8:	dc 01       	movw	r26, r24
   uint16_t u16i;
   //Traverse both strings
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	0a c0       	rjmp	.+20     	; 0x104 <String_compare+0x1c>
   {
      // look for any difference
      if      (str1[u16i] < str2[u16i])     return -1;
      f0:	fb 01       	movw	r30, r22
      f2:	e2 0f       	add	r30, r18
      f4:	f3 1f       	adc	r31, r19
      f6:	40 81       	ld	r20, Z
      f8:	94 17       	cp	r25, r20
      fa:	88 f0       	brcs	.+34     	; 0x11e <String_compare+0x36>
      else if (str1[u16i] > str2[u16i])     return 1;
      fc:	49 17       	cp	r20, r25
      fe:	88 f0       	brcs	.+34     	; 0x122 <String_compare+0x3a>
************************************************************************************/
static sint8_t String_compare(uint8_t *str1,uint8_t *str2)
{
   uint16_t u16i;
   //Traverse both strings
   for(u16i=0;str1[u16i] || str2[u16i];u16i++)
     100:	2f 5f       	subi	r18, 0xFF	; 255
     102:	3f 4f       	sbci	r19, 0xFF	; 255
     104:	fd 01       	movw	r30, r26
     106:	e2 0f       	add	r30, r18
     108:	f3 1f       	adc	r31, r19
     10a:	90 81       	ld	r25, Z
     10c:	91 11       	cpse	r25, r1
     10e:	f0 cf       	rjmp	.-32     	; 0xf0 <String_compare+0x8>
     110:	fb 01       	movw	r30, r22
     112:	e2 0f       	add	r30, r18
     114:	f3 1f       	adc	r31, r19
     116:	80 81       	ld	r24, Z
     118:	81 11       	cpse	r24, r1
     11a:	ea cf       	rjmp	.-44     	; 0xf0 <String_compare+0x8>
     11c:	08 95       	ret
   {
      // look for any difference
      if      (str1[u16i] < str2[u16i])     return -1;
     11e:	8f ef       	ldi	r24, 0xFF	; 255
     120:	08 95       	ret
      else if (str1[u16i] > str2[u16i])     return 1;
     122:	81 e0       	ldi	r24, 0x01	; 1
   }
   return 0;
}
     124:	08 95       	ret

00000126 <APP_Delay>:
	}
}


static void APP_Delay(void)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	00 d0       	rcall	.+0      	; 0x12c <APP_Delay+0x6>
     12c:	00 d0       	rcall	.+0      	; 0x12e <APP_Delay+0x8>
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32DelayValue;
	for(u32DelayValue = 0; u32DelayValue < 250000; u32DelayValue++);
     132:	19 82       	std	Y+1, r1	; 0x01
     134:	1a 82       	std	Y+2, r1	; 0x02
     136:	1b 82       	std	Y+3, r1	; 0x03
     138:	1c 82       	std	Y+4, r1	; 0x04
     13a:	0b c0       	rjmp	.+22     	; 0x152 <APP_Delay+0x2c>
     13c:	89 81       	ldd	r24, Y+1	; 0x01
     13e:	9a 81       	ldd	r25, Y+2	; 0x02
     140:	ab 81       	ldd	r26, Y+3	; 0x03
     142:	bc 81       	ldd	r27, Y+4	; 0x04
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	a1 1d       	adc	r26, r1
     148:	b1 1d       	adc	r27, r1
     14a:	89 83       	std	Y+1, r24	; 0x01
     14c:	9a 83       	std	Y+2, r25	; 0x02
     14e:	ab 83       	std	Y+3, r26	; 0x03
     150:	bc 83       	std	Y+4, r27	; 0x04
     152:	89 81       	ldd	r24, Y+1	; 0x01
     154:	9a 81       	ldd	r25, Y+2	; 0x02
     156:	ab 81       	ldd	r26, Y+3	; 0x03
     158:	bc 81       	ldd	r27, Y+4	; 0x04
     15a:	80 39       	cpi	r24, 0x90	; 144
     15c:	90 4d       	sbci	r25, 0xD0	; 208
     15e:	a3 40       	sbci	r26, 0x03	; 3
     160:	b1 05       	cpc	r27, r1
     162:	60 f3       	brcs	.-40     	; 0x13c <APP_Delay+0x16>
}
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <doubletostr>:

static void doubletostr (double num,char *str, int precision)
{
     172:	2f 92       	push	r2
     174:	3f 92       	push	r3
     176:	4f 92       	push	r4
     178:	5f 92       	push	r5
     17a:	6f 92       	push	r6
     17c:	7f 92       	push	r7
     17e:	8f 92       	push	r8
     180:	9f 92       	push	r9
     182:	af 92       	push	r10
     184:	bf 92       	push	r11
     186:	cf 92       	push	r12
     188:	df 92       	push	r13
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	2b 01       	movw	r4, r22
     198:	3c 01       	movw	r6, r24
     19a:	6a 01       	movw	r12, r20
     19c:	79 01       	movw	r14, r18
    int int_exponent=1,frac_exponent=1;

    for (int temp=num/10;temp;temp/=10)
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	40 e2       	ldi	r20, 0x20	; 32
     1a4:	51 e4       	ldi	r21, 0x41	; 65
     1a6:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__divsf3>
     1aa:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fixsfsi>
	for(u32DelayValue = 0; u32DelayValue < 250000; u32DelayValue++);
}

static void doubletostr (double num,char *str, int precision)
{
    int int_exponent=1,frac_exponent=1;
     1ae:	c1 e0       	ldi	r28, 0x01	; 1
     1b0:	d0 e0       	ldi	r29, 0x00	; 0

    for (int temp=num/10;temp;temp/=10)
     1b2:	10 c0       	rjmp	.+32     	; 0x1d4 <doubletostr+0x62>
    {
        int_exponent*=10;
     1b4:	ce 01       	movw	r24, r28
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	cc 0f       	add	r28, r28
     1bc:	dd 1f       	adc	r29, r29
     1be:	cc 0f       	add	r28, r28
     1c0:	dd 1f       	adc	r29, r29
     1c2:	cc 0f       	add	r28, r28
     1c4:	dd 1f       	adc	r29, r29
     1c6:	c8 0f       	add	r28, r24
     1c8:	d9 1f       	adc	r29, r25

static void doubletostr (double num,char *str, int precision)
{
    int int_exponent=1,frac_exponent=1;

    for (int temp=num/10;temp;temp/=10)
     1ca:	cb 01       	movw	r24, r22
     1cc:	6a e0       	ldi	r22, 0x0A	; 10
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     1d4:	61 15       	cp	r22, r1
     1d6:	71 05       	cpc	r23, r1
     1d8:	69 f7       	brne	.-38     	; 0x1b4 <doubletostr+0x42>
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	01 e0       	ldi	r16, 0x01	; 1
     1e0:	10 e0       	ldi	r17, 0x00	; 0
     1e2:	0c c0       	rjmp	.+24     	; 0x1fc <doubletostr+0x8a>
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
    {
        frac_exponent*=10;
     1e4:	98 01       	movw	r18, r16
     1e6:	22 0f       	add	r18, r18
     1e8:	33 1f       	adc	r19, r19
     1ea:	00 0f       	add	r16, r16
     1ec:	11 1f       	adc	r17, r17
     1ee:	00 0f       	add	r16, r16
     1f0:	11 1f       	adc	r17, r17
     1f2:	00 0f       	add	r16, r16
     1f4:	11 1f       	adc	r17, r17
     1f6:	02 0f       	add	r16, r18
     1f8:	13 1f       	adc	r17, r19

    for (int temp=num/10;temp;temp/=10)
    {
        int_exponent*=10;
    }
    for (int i=0;i<precision;i++)
     1fa:	01 96       	adiw	r24, 0x01	; 1
     1fc:	8e 15       	cp	r24, r14
     1fe:	9f 05       	cpc	r25, r15
     200:	8c f3       	brlt	.-30     	; 0x1e4 <doubletostr+0x72>
    {
        frac_exponent*=10;
    }
    long int integer=num;
     202:	c3 01       	movw	r24, r6
     204:	b2 01       	movw	r22, r4
     206:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fixsfsi>
     20a:	4b 01       	movw	r8, r22
     20c:	5c 01       	movw	r10, r24
    long int fraction=(num-integer)*frac_exponent;
     20e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__floatsisf>
     212:	9b 01       	movw	r18, r22
     214:	ac 01       	movw	r20, r24
     216:	c3 01       	movw	r24, r6
     218:	b2 01       	movw	r22, r4
     21a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__subsf3>
     21e:	2b 01       	movw	r4, r22
     220:	3c 01       	movw	r6, r24
     222:	b8 01       	movw	r22, r16
     224:	01 2e       	mov	r0, r17
     226:	00 0c       	add	r0, r0
     228:	88 0b       	sbc	r24, r24
     22a:	99 0b       	sbc	r25, r25
     22c:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__floatsisf>
     230:	a3 01       	movw	r20, r6
     232:	92 01       	movw	r18, r4
     234:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
     238:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__fixsfsi>
     23c:	2b 01       	movw	r4, r22
     23e:	3c 01       	movw	r6, r24
    int i=0;
    for(i=0;int_exponent;i++)
     240:	e1 2c       	mov	r14, r1
     242:	f1 2c       	mov	r15, r1
     244:	20 c0       	rjmp	.+64     	; 0x286 <doubletostr+0x114>
    {
        str[i]=((integer/int_exponent)%10)+'0';
     246:	16 01       	movw	r2, r12
     248:	2e 0c       	add	r2, r14
     24a:	3f 1c       	adc	r3, r15
     24c:	9e 01       	movw	r18, r28
     24e:	0d 2e       	mov	r0, r29
     250:	00 0c       	add	r0, r0
     252:	44 0b       	sbc	r20, r20
     254:	55 0b       	sbc	r21, r21
     256:	c5 01       	movw	r24, r10
     258:	b4 01       	movw	r22, r8
     25a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__divmodsi4>
     25e:	ca 01       	movw	r24, r20
     260:	b9 01       	movw	r22, r18
     262:	2a e0       	ldi	r18, 0x0A	; 10
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__divmodsi4>
     26e:	60 5d       	subi	r22, 0xD0	; 208
     270:	f1 01       	movw	r30, r2
     272:	60 83       	st	Z, r22
        int_exponent/=10;
     274:	ce 01       	movw	r24, r28
     276:	6a e0       	ldi	r22, 0x0A	; 10
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     27e:	eb 01       	movw	r28, r22
        frac_exponent*=10;
    }
    long int integer=num;
    long int fraction=(num-integer)*frac_exponent;
    int i=0;
    for(i=0;int_exponent;i++)
     280:	ff ef       	ldi	r31, 0xFF	; 255
     282:	ef 1a       	sub	r14, r31
     284:	ff 0a       	sbc	r15, r31
     286:	20 97       	sbiw	r28, 0x00	; 0
     288:	f1 f6       	brne	.-68     	; 0x246 <doubletostr+0xd4>
    {
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
     28a:	e7 01       	movw	r28, r14
     28c:	21 96       	adiw	r28, 0x01	; 1
     28e:	f6 01       	movw	r30, r12
     290:	ee 0d       	add	r30, r14
     292:	ff 1d       	adc	r31, r15
     294:	8e e2       	ldi	r24, 0x2E	; 46
     296:	80 83       	st	Z, r24
    frac_exponent/=10;
     298:	c8 01       	movw	r24, r16
     29a:	6a e0       	ldi	r22, 0x0A	; 10
     29c:	70 e0       	ldi	r23, 0x00	; 0
     29e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     2a2:	8b 01       	movw	r16, r22
    for(;frac_exponent;i++)
     2a4:	1e c0       	rjmp	.+60     	; 0x2e2 <doubletostr+0x170>
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
     2a6:	76 01       	movw	r14, r12
     2a8:	ec 0e       	add	r14, r28
     2aa:	fd 1e       	adc	r15, r29
     2ac:	98 01       	movw	r18, r16
     2ae:	01 2e       	mov	r0, r17
     2b0:	00 0c       	add	r0, r0
     2b2:	44 0b       	sbc	r20, r20
     2b4:	55 0b       	sbc	r21, r21
     2b6:	c3 01       	movw	r24, r6
     2b8:	b2 01       	movw	r22, r4
     2ba:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__divmodsi4>
     2be:	ca 01       	movw	r24, r20
     2c0:	b9 01       	movw	r22, r18
     2c2:	2a e0       	ldi	r18, 0x0A	; 10
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__divmodsi4>
     2ce:	60 5d       	subi	r22, 0xD0	; 208
     2d0:	f7 01       	movw	r30, r14
     2d2:	60 83       	st	Z, r22
        frac_exponent/=10;
     2d4:	c8 01       	movw	r24, r16
     2d6:	6a e0       	ldi	r22, 0x0A	; 10
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     2de:	8b 01       	movw	r16, r22
        str[i]=((integer/int_exponent)%10)+'0';
        int_exponent/=10;
    }
    str[i++]='.';
    frac_exponent/=10;
    for(;frac_exponent;i++)
     2e0:	21 96       	adiw	r28, 0x01	; 1
     2e2:	01 15       	cp	r16, r1
     2e4:	11 05       	cpc	r17, r1
     2e6:	f9 f6       	brne	.-66     	; 0x2a6 <doubletostr+0x134>
    {
        str[i]=((fraction/frac_exponent)%10)+'0';
        frac_exponent/=10;
    }
    str[i++]=0;
     2e8:	cc 0d       	add	r28, r12
     2ea:	dd 1d       	adc	r29, r13
     2ec:	18 82       	st	Y, r1
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	9f 90       	pop	r9
     304:	8f 90       	pop	r8
     306:	7f 90       	pop	r7
     308:	6f 90       	pop	r6
     30a:	5f 90       	pop	r5
     30c:	4f 90       	pop	r4
     30e:	3f 90       	pop	r3
     310:	2f 90       	pop	r2
     312:	08 95       	ret

00000314 <Card>:
   }
   return 0;
}

static void Card(void)
{
     314:	4f 92       	push	r4
     316:	5f 92       	push	r5
     318:	6f 92       	push	r6
     31a:	7f 92       	push	r7
     31c:	8f 92       	push	r8
     31e:	9f 92       	push	r9
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	e5 97       	sbiw	r28, 0x35	; 53
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8LoopIndex;
	static uint8_t u8Flag = LOW;
	static uint8_t u8CardsNo=0;

	//admin mode and button is pressed
	if(gu8BTNFlag==1)
     344:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     348:	81 30       	cpi	r24, 0x01	; 1
     34a:	d9 f4       	brne	.+54     	; 0x382 <Card+0x6e>
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     34c:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
		/* Displaying "ADMIN MODE" on the LCD screen */
		LCD_SetCursorPosition(0, 0);
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Card not allowed");
     358:	81 e6       	ldi	r24, 0x61	; 97
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
		LCD_SetCursorPosition(0, 1);
     360:	61 e0       	ldi	r22, 0x01	; 1
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"in ADMIN mode");
     368:	82 e7       	ldi	r24, 0x72	; 114
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
		APP_Delay();
     370:	0e 94 93 00 	call	0x126	; 0x126 <APP_Delay>
		/* Clearing the LCD screen */
		LCD_Clear();
     374:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
		/* Displaying "ADMIN MODE" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ADMIN MODE");
     378:	80 e8       	ldi	r24, 0x80	; 128
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
     380:	96 c1       	rjmp	.+812    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
	}
	//user mode and button is pressed (card is inserted)
	else if(gu8BTNFlag==0)
     382:	81 11       	cpse	r24, r1
     384:	72 c1       	rjmp	.+740    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
	{
		gu8BTNFlag=2;
     386:	82 e0       	ldi	r24, 0x02	; 2
     388:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		{
			/* Clearing the SS pin to start reception */
			DIO_PinWrite(PB4, LOW);
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	8c e0       	ldi	r24, 0x0C	; 12
     390:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
			/* Reading from the CARD slave the card data */
			SPI_receiveString(au8CardData, 15);
     394:	6f e0       	ldi	r22, 0x0F	; 15
     396:	ce 01       	movw	r24, r28
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <SPI_receiveString>
			/* Clearing the SS pin to stop reception */
			DIO_PinWrite(PB4, HIGH);
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	8c e0       	ldi	r24, 0x0C	; 12
     3a2:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
			EEPROM_ReadByte(0x020, &u8CardsNo);
     3a6:	60 e2       	ldi	r22, 0x20	; 32
     3a8:	73 e0       	ldi	r23, 0x03	; 3
     3aa:	80 e2       	ldi	r24, 0x20	; 32
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 b9 05 	call	0xb72	; 0xb72 <EEPROM_ReadByte>
			/**/
			for(u8LoopIndex = 0; u8LoopIndex < u8CardsNo; u8LoopIndex++)
     3b2:	10 e0       	ldi	r17, 0x00	; 0
     3b4:	35 c0       	rjmp	.+106    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
			{

				/* Reading the stored PAN from EEPROM */
				EEPROM_ReadString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
     3b6:	81 2f       	mov	r24, r17
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	40 96       	adiw	r24, 0x10	; 16
     3bc:	ae 01       	movw	r20, r28
     3be:	4f 5e       	subi	r20, 0xEF	; 239
     3c0:	5f 4f       	sbci	r21, 0xFF	; 255
     3c2:	69 e0       	ldi	r22, 0x09	; 9
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	82 95       	swap	r24
     3c8:	92 95       	swap	r25
     3ca:	90 7f       	andi	r25, 0xF0	; 240
     3cc:	98 27       	eor	r25, r24
     3ce:	80 7f       	andi	r24, 0xF0	; 240
     3d0:	98 27       	eor	r25, r24
     3d2:	0e 94 1b 06 	call	0xc36	; 0xc36 <EEPROM_ReadString>
				/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
				if((au8CardData[0] == au8PAN[0]) && (au8CardData[1] == au8PAN[1]) && (au8CardData[2] == au8PAN[2]) &&
     3d6:	99 81       	ldd	r25, Y+1	; 0x01
     3d8:	89 89       	ldd	r24, Y+17	; 0x11
     3da:	98 13       	cpse	r25, r24
     3dc:	20 c0       	rjmp	.+64     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     3de:	9a 81       	ldd	r25, Y+2	; 0x02
     3e0:	8a 89       	ldd	r24, Y+18	; 0x12
     3e2:	98 13       	cpse	r25, r24
     3e4:	1c c0       	rjmp	.+56     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     3e6:	9b 81       	ldd	r25, Y+3	; 0x03
     3e8:	8b 89       	ldd	r24, Y+19	; 0x13
     3ea:	98 13       	cpse	r25, r24
     3ec:	18 c0       	rjmp	.+48     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				   (au8CardData[3] == au8PAN[3]) && (au8CardData[4] == au8PAN[4]) && (au8CardData[5] == au8PAN[5]) &&
     3ee:	9c 81       	ldd	r25, Y+4	; 0x04
     3f0:	8c 89       	ldd	r24, Y+20	; 0x14
			{

				/* Reading the stored PAN from EEPROM */
				EEPROM_ReadString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
				/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
				if((au8CardData[0] == au8PAN[0]) && (au8CardData[1] == au8PAN[1]) && (au8CardData[2] == au8PAN[2]) &&
     3f2:	98 13       	cpse	r25, r24
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				   (au8CardData[3] == au8PAN[3]) && (au8CardData[4] == au8PAN[4]) && (au8CardData[5] == au8PAN[5]) &&
     3f6:	9d 81       	ldd	r25, Y+5	; 0x05
     3f8:	8d 89       	ldd	r24, Y+21	; 0x15
     3fa:	98 13       	cpse	r25, r24
     3fc:	10 c0       	rjmp	.+32     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     3fe:	9e 81       	ldd	r25, Y+6	; 0x06
     400:	8e 89       	ldd	r24, Y+22	; 0x16
     402:	98 13       	cpse	r25, r24
     404:	0c c0       	rjmp	.+24     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				   (au8CardData[6] == au8PAN[6]) && (au8CardData[7] == au8PAN[7]) && (au8CardData[8] == au8PAN[8]))
     406:	9f 81       	ldd	r25, Y+7	; 0x07
     408:	8f 89       	ldd	r24, Y+23	; 0x17

				/* Reading the stored PAN from EEPROM */
				EEPROM_ReadString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
				/* Checking if the PAN of the card is similar to the stored PAN in EEPROM */
				if((au8CardData[0] == au8PAN[0]) && (au8CardData[1] == au8PAN[1]) && (au8CardData[2] == au8PAN[2]) &&
				   (au8CardData[3] == au8PAN[3]) && (au8CardData[4] == au8PAN[4]) && (au8CardData[5] == au8PAN[5]) &&
     40a:	98 13       	cpse	r25, r24
     40c:	08 c0       	rjmp	.+16     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				   (au8CardData[6] == au8PAN[6]) && (au8CardData[7] == au8PAN[7]) && (au8CardData[8] == au8PAN[8]))
     40e:	98 85       	ldd	r25, Y+8	; 0x08
     410:	88 8d       	ldd	r24, Y+24	; 0x18
     412:	98 13       	cpse	r25, r24
     414:	04 c0       	rjmp	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     416:	99 85       	ldd	r25, Y+9	; 0x09
     418:	89 8d       	ldd	r24, Y+25	; 0x19
     41a:	98 17       	cp	r25, r24
     41c:	29 f0       	breq	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			SPI_receiveString(au8CardData, 15);
			/* Clearing the SS pin to stop reception */
			DIO_PinWrite(PB4, HIGH);
			EEPROM_ReadByte(0x020, &u8CardsNo);
			/**/
			for(u8LoopIndex = 0; u8LoopIndex < u8CardsNo; u8LoopIndex++)
     41e:	1f 5f       	subi	r17, 0xFF	; 255
     420:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <u8CardsNo.2089>
     424:	18 17       	cp	r17, r24
     426:	38 f2       	brcs	.-114    	; 0x3b6 <Card+0xa2>
				else
				{
				}
			}
			/* Checking if the card is present or not */
			if(u8LoopIndex < u8CardsNo)
     428:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <u8CardsNo.2089>
     42c:	18 17       	cp	r17, r24
     42e:	08 f0       	brcs	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     430:	07 c1       	rjmp	.+526    	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
			{
			/**/
				/* Clearing the LCD screen */
				LCD_Clear();
     432:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
				/* Displaying "Enter PIN:" on the LCD screen */
				LCD_DisplayString((uint8_t*)"Enter PIN:");
     436:	8e e8       	ldi	r24, 0x8E	; 142
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
				/* Getting the first PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[0]);
     446:	ce 01       	movw	r24, r28
     448:	c2 96       	adiw	r24, 0x32	; 50
     44a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     44e:	8a e2       	ldi	r24, 0x2A	; 42
     450:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
				/* Getting the second PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[1]);
     454:	ce 01       	movw	r24, r28
     456:	c3 96       	adiw	r24, 0x33	; 51
     458:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     45c:	8a e2       	ldi	r24, 0x2A	; 42
     45e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
				/* Getting the third PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[2]);
     462:	ce 01       	movw	r24, r28
     464:	c4 96       	adiw	r24, 0x34	; 52
     466:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     46a:	8a e2       	ldi	r24, 0x2A	; 42
     46c:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
				/* Getting the forth PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[3]);
     470:	ce 01       	movw	r24, r28
     472:	c5 96       	adiw	r24, 0x35	; 53
     474:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
     478:	8a e2       	ldi	r24, 0x2A	; 42
     47a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
				/* Checking if the PIN of the card is similar to the entered PIN from the keypad */
				if((au8CardData[10] == au8KeypadPIN[0]) && (au8CardData[11] == au8KeypadPIN[1]) &&
     47e:	9b 85       	ldd	r25, Y+11	; 0x0b
     480:	8a a9       	ldd	r24, Y+50	; 0x32
     482:	98 13       	cpse	r25, r24
     484:	cc c0       	rjmp	.+408    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     486:	9c 85       	ldd	r25, Y+12	; 0x0c
     488:	8b a9       	ldd	r24, Y+51	; 0x33
     48a:	98 13       	cpse	r25, r24
     48c:	c8 c0       	rjmp	.+400    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
				   (au8CardData[12] == au8KeypadPIN[2]) && (au8CardData[13] == au8KeypadPIN[3]))
     48e:	9d 85       	ldd	r25, Y+13	; 0x0d
     490:	8c a9       	ldd	r24, Y+52	; 0x34
				/* Getting the forth PIN value from the keypad */
				Keypad_GetChar(&au8KeypadPIN[3]);
				/* Displaying '*' on the LCD screen */
				LCD_DisplayChar('*');
				/* Checking if the PIN of the card is similar to the entered PIN from the keypad */
				if((au8CardData[10] == au8KeypadPIN[0]) && (au8CardData[11] == au8KeypadPIN[1]) &&
     492:	98 13       	cpse	r25, r24
     494:	c4 c0       	rjmp	.+392    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
				   (au8CardData[12] == au8KeypadPIN[2]) && (au8CardData[13] == au8KeypadPIN[3]))
     496:	9e 85       	ldd	r25, Y+14	; 0x0e
     498:	8d a9       	ldd	r24, Y+53	; 0x35
     49a:	98 13       	cpse	r25, r24
     49c:	c0 c0       	rjmp	.+384    	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     49e:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
					/* Displaying "Enter amount:" on the LCD screen */
					LCD_DisplayString((uint8_t*)"Enter amount:");
     4a2:	89 e9       	ldi	r24, 0x99	; 153
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
					/* Getting the thousands amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[0]);
     4b2:	ce 01       	movw	r24, r28
     4b4:	8b 96       	adiw	r24, 0x2b	; 43
     4b6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
					/* Displaying the thousands amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[0]);
     4ba:	8b a5       	ldd	r24, Y+43	; 0x2b
     4bc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
					/* Getting the hundreds amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[1]);
     4c0:	ce 01       	movw	r24, r28
     4c2:	8c 96       	adiw	r24, 0x2c	; 44
     4c4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
					/* Displaying the hundreds amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[1]);
     4c8:	8c a5       	ldd	r24, Y+44	; 0x2c
     4ca:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
					/* Getting the tens amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[2]);
     4ce:	ce 01       	movw	r24, r28
     4d0:	8d 96       	adiw	r24, 0x2d	; 45
     4d2:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
					/* Displaying the tens amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[2]);
     4d6:	8d a5       	ldd	r24, Y+45	; 0x2d
     4d8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
					/* Getting the units amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[3]);
     4dc:	ce 01       	movw	r24, r28
     4de:	8e 96       	adiw	r24, 0x2e	; 46
     4e0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
					/* Displaying the units amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[3]);
     4e4:	8e a5       	ldd	r24, Y+46	; 0x2e
     4e6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
					/* Displaying the decimal point of amount value on the LCD screen */
					au8KeypadAmount[4]='.';
     4ea:	8e e2       	ldi	r24, 0x2E	; 46
     4ec:	8f a7       	std	Y+47, r24	; 0x2f
					/* Displaying the decimal point on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[4]);
     4ee:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
					/* Getting the tenths amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[5]);
     4f2:	ce 01       	movw	r24, r28
     4f4:	c0 96       	adiw	r24, 0x30	; 48
     4f6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
					/* Displaying the tenths amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[5]);
     4fa:	88 a9       	ldd	r24, Y+48	; 0x30
     4fc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
					/* Getting the hundredths amount value from the keypad */
					Keypad_GetChar(&au8KeypadAmount[6]);
     500:	ce 01       	movw	r24, r28
     502:	c1 96       	adiw	r24, 0x31	; 49
     504:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
					/* Displaying the hundredths amount value on the LCD screen */
					LCD_DisplayChar(au8KeypadAmount[6]);
     508:	89 a9       	ldd	r24, Y+49	; 0x31
     50a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_DisplayChar>
					/* Converting the entered amount value from ASCII characters to double */
					dKeypadAmount = atof((char*)au8KeypadAmount);
     50e:	ce 01       	movw	r24, r28
     510:	8b 96       	adiw	r24, 0x2b	; 43
     512:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <atof>
     516:	4b 01       	movw	r8, r22
     518:	5c 01       	movw	r10, r24
					/* Reading the stored maximum amount value from EEPROM */
					EEPROM_ReadString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
     51a:	ae 01       	movw	r20, r28
     51c:	4d 5d       	subi	r20, 0xDD	; 221
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	67 e0       	ldi	r22, 0x07	; 7
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e3       	ldi	r24, 0x30	; 48
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 1b 06 	call	0xc36	; 0xc36 <EEPROM_ReadString>
					/* Converting the stored maximum amount value from ASCII characters to double */
					dMaxAmount = atof((char*)au8MaxAmount);
     52c:	ce 01       	movw	r24, r28
     52e:	83 96       	adiw	r24, 0x23	; 35
     530:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <atof>
     534:	2b 01       	movw	r4, r22
     536:	3c 01       	movw	r6, r24
					/* Reading the stored balance value from EEPROM */
					EEPROM_ReadString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
     538:	81 2f       	mov	r24, r17
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	80 5b       	subi	r24, 0xB0	; 176
     53e:	9f 4f       	sbci	r25, 0xFF	; 255
     540:	8c 01       	movw	r16, r24
     542:	02 95       	swap	r16
     544:	12 95       	swap	r17
     546:	10 7f       	andi	r17, 0xF0	; 240
     548:	10 27       	eor	r17, r16
     54a:	00 7f       	andi	r16, 0xF0	; 240
     54c:	10 27       	eor	r17, r16
     54e:	ae 01       	movw	r20, r28
     550:	45 5e       	subi	r20, 0xE5	; 229
     552:	5f 4f       	sbci	r21, 0xFF	; 255
     554:	67 e0       	ldi	r22, 0x07	; 7
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	c8 01       	movw	r24, r16
     55a:	0e 94 1b 06 	call	0xc36	; 0xc36 <EEPROM_ReadString>
					/* Converting the stored balance value from ASCII characters to double */
					dBalance = atof((char*)au8Balance);
     55e:	ce 01       	movw	r24, r28
     560:	4b 96       	adiw	r24, 0x1b	; 27
     562:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <atof>
     566:	6b 01       	movw	r12, r22
     568:	7c 01       	movw	r14, r24
					/* Clearing the LCD screen */
					LCD_Clear();
     56a:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
					/* Checking if the entered amount is greater than the stored maximum amount */
					if(dKeypadAmount > dMaxAmount)
     56e:	a3 01       	movw	r20, r6
     570:	92 01       	movw	r18, r4
     572:	c5 01       	movw	r24, r10
     574:	b4 01       	movw	r22, r8
     576:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
     57a:	18 16       	cp	r1, r24
     57c:	7c f4       	brge	.+30     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
					{
						/* Displaying "Maximum Amount" on the LCD screen */
						LCD_DisplayString((uint8_t*)" Maximum Amount");
     57e:	87 ea       	ldi	r24, 0xA7	; 167
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
						/* Displaying "Exceeded" on the LCD screen */
						LCD_DisplayString((uint8_t*)"    Exceeded");
     58e:	87 eb       	ldi	r24, 0xB7	; 183
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Giving a sufficient time delay to show the message on the LCD screen */
						APP_Delay();
     596:	0e 94 93 00 	call	0x126	; 0x126 <APP_Delay>
     59a:	89 c0       	rjmp	.+274    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
						u8Flag = LOW;
					}
					/* Checking if the entered amount is greater than the stored balance */
					else if(dKeypadAmount > dBalance)
     59c:	a7 01       	movw	r20, r14
     59e:	96 01       	movw	r18, r12
     5a0:	c5 01       	movw	r24, r10
     5a2:	b4 01       	movw	r22, r8
     5a4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__gesf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	7c f4       	brge	.+30     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
					{
						/* Displaying "Insufficient" on the LCD screen */
						LCD_DisplayString((uint8_t*)"  Insufficient");
     5ac:	84 ec       	ldi	r24, 0xC4	; 196
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
						/* Displaying "Fund" on the LCD screen */
						LCD_DisplayString((uint8_t*)"      Fund");
     5bc:	83 ed       	ldi	r24, 0xD3	; 211
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Giving a sufficient time delay to show the message on the LCD screen */
						APP_Delay();
     5c4:	0e 94 93 00 	call	0x126	; 0x126 <APP_Delay>
     5c8:	72 c0       	rjmp	.+228    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
						u8Flag = LOW;
					}
					else
					{
						/* Displaying "Transaction" on the LCD screen */
						LCD_DisplayString((uint8_t*)"  Transaction");
     5ca:	8e ed       	ldi	r24, 0xDE	; 222
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
						/* Displaying "APPROVED" on the LCD screen */
						LCD_DisplayString((uint8_t*)"    Approved");
     5da:	8c ee       	ldi	r24, 0xEC	; 236
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Subtracting the withdrawn money after the transaction has successfully completed */
						dBalance -= dKeypadAmount;
     5e2:	a5 01       	movw	r20, r10
     5e4:	94 01       	movw	r18, r8
     5e6:	c7 01       	movw	r24, r14
     5e8:	b6 01       	movw	r22, r12
     5ea:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__subsf3>
						/* Converting the balance from double to ASCII characters */
						doubletostr(dBalance, (char*)au8Balance, 2);
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	ae 01       	movw	r20, r28
     5f4:	45 5e       	subi	r20, 0xE5	; 229
     5f6:	5f 4f       	sbci	r21, 0xFF	; 255
     5f8:	0e 94 b9 00 	call	0x172	; 0x172 <doubletostr>
						/* Writing the balance inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_BALANCE_ADDRESS(u8LoopIndex), 9, au8Balance);
     5fc:	ae 01       	movw	r20, r28
     5fe:	45 5e       	subi	r20, 0xE5	; 229
     600:	5f 4f       	sbci	r21, 0xFF	; 255
     602:	69 e0       	ldi	r22, 0x09	; 9
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	c8 01       	movw	r24, r16
     608:	0e 94 dd 05 	call	0xbba	; 0xbba <EEPROM_WriteString>
						/* Starting the DC fan to run */
						DCFan_Start(PB1);
     60c:	89 e0       	ldi	r24, 0x09	; 9
     60e:	0e 94 7e 05 	call	0xafc	; 0xafc <DCFan_Start>
						/* Giving a sufficient time delay to make the DC fan run */
						APP_Delay();
     612:	0e 94 93 00 	call	0x126	; 0x126 <APP_Delay>
						/* Stopping the DC Fan */
						DCFan_Stop(PB1);
     616:	89 e0       	ldi	r24, 0x09	; 9
     618:	0e 94 8c 05 	call	0xb18	; 0xb18 <DCFan_Stop>
     61c:	48 c0       	rjmp	.+144    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
					}
				}
				else
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     61e:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
					/* Displaying "Incorrect PIN" on the LCD screen */
					LCD_DisplayString((uint8_t*)" Incorrect PIN");
     622:	89 ef       	ldi	r24, 0xF9	; 249
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
					/* Displaying "Card is ejected" on the LCD screen */
					LCD_DisplayString((uint8_t*)"Card is ejected");
     632:	88 e0       	ldi	r24, 0x08	; 8
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
					/* Giving a sufficient time delay to show the message on the LCD screen */
					APP_Delay();
     63a:	0e 94 93 00 	call	0x126	; 0x126 <APP_Delay>
     63e:	37 c0       	rjmp	.+110    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
					u8Flag = LOW;
				}
			}
			else if (gu8BTNFlag==2)
     640:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     644:	82 30       	cpi	r24, 0x02	; 2
     646:	99 f5       	brne	.+102    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
			{
				/* Clearing the LCD screen */
				LCD_Clear();
     648:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
				/* Displaying "Invalid Card" on the LCD screen */
				LCD_DisplayString((uint8_t*)"  Invalid Card");
     64c:	88 e1       	ldi	r24, 0x18	; 24
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
				/* Displaying "Card is ejected" on the LCD screen */
				LCD_DisplayString((uint8_t*)"Card is ejected");
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
				/* Giving a sufficient time delay to show the message on the LCD screen */
				APP_Delay();
     664:	0e 94 93 00 	call	0x126	; 0x126 <APP_Delay>
     668:	22 c0       	rjmp	.+68     	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
	}
	//in case no mode is entered and button pressed
	else
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     66a:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
		LCD_SetCursorPosition(0, 0);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Card ejected");
     676:	87 e2       	ldi	r24, 0x27	; 39
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
		LCD_SetCursorPosition(0, 1);
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
		LCD_DisplayString((uint8_t*)"Pls choose mode");
     686:	84 e3       	ldi	r24, 0x34	; 52
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
		APP_Delay();
     68e:	0e 94 93 00 	call	0x126	; 0x126 <APP_Delay>
		/* Clearing the LCD screen */
		LCD_Clear();
     692:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
		/* Displaying "Welcome to" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   Welcome to");
     696:	84 e4       	ldi	r24, 0x44	; 68
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
		/* Setting the position of the cursor at the second row of the LCD screen */
		LCD_SetCursorPosition(0, 1);
     69e:	61 e0       	ldi	r22, 0x01	; 1
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
		/* Displaying "ATM System" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ATM System");
     6a6:	82 e5       	ldi	r24, 0x52	; 82
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
	}
}
     6ae:	e5 96       	adiw	r28, 0x35	; 53
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	7f 90       	pop	r7
     6d4:	6f 90       	pop	r6
     6d6:	5f 90       	pop	r5
     6d8:	4f 90       	pop	r4
     6da:	08 95       	ret

000006dc <APP_Init>:
* Description     : A function to initialize the application
*************************************************************************************************/
void APP_Init(void)
{
	/* Initializing the UART MCAL driver */
	UART_Init();
     6dc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <UART_Init>
	/* Initializing the SPI MCAL driver */
	SPI_init();
     6e0:	0e 94 45 0c 	call	0x188a	; 0x188a <SPI_init>
	/* Initializing the LCD ECUAL driver */
	LCD_Init(LCD_DATA_FOUR_BIT_MODE, LCD_CURSOR_OFF);
     6e4:	60 e0       	ldi	r22, 0x00	; 0
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <LCD_Init>
	/* Initializing the Keypad ECUAL driver */
	Keypad_Init(KEYPAD_4X3);
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	0e 94 9f 06 	call	0xd3e	; 0xd3e <Keypad_Init>
	/* Initializing the Button ECUAL driver */
	Button_Init(PB2, BUTTON_ACTIVE_HIGH);
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	8a e0       	ldi	r24, 0x0A	; 10
     6f6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <Button_Init>
	/* Initializing the DC Fan ECUAL driver */
	DCFan_Init(PB1);
     6fa:	89 e0       	ldi	r24, 0x09	; 9
     6fc:	0e 94 6c 05 	call	0xad8	; 0xad8 <DCFan_Init>
	/* Initializing the LM35 ECUAL driver */
	LM35_Init();
     700:	0e 94 04 09 	call	0x1208	; 0x1208 <LM35_Init>
	/* Initializing the EEPROM ECUAL driver */
	EEPROM_Init();
     704:	0e 94 9a 05 	call	0xb34	; 0xb34 <EEPROM_Init>
	/* Initializing the EXT interrupt MCUAL driver */
	EXTINT_Init(EXTINT_INT2);
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <EXTINT_Init>
	EXTINT_SetSenseMode(EXT_RAISING_MODE, EXTINT_INT2);
     70e:	62 e0       	ldi	r22, 0x02	; 2
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <EXTINT_SetSenseMode>

	/* Setting the SS pin to stop any incoming transmission/reception process */
	DIO_PinWrite(PB4, HIGH);
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	8c e0       	ldi	r24, 0x0C	; 12
     71a:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	/* Writing "admin" inside the EEPROM */
	EEPROM_WriteString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, (uint8_t*)"admin");
     71e:	40 e6       	ldi	r20, 0x60	; 96
     720:	51 e0       	ldi	r21, 0x01	; 1
     722:	65 e0       	ldi	r22, 0x05	; 5
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e1       	ldi	r24, 0x10	; 16
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 dd 05 	call	0xbba	; 0xbba <EEPROM_WriteString>

	/* Setting callBack function for the EXT interrupt MCUAL driver */
	EXTINT_SetCallBack(Card, EXTINT_INT2);
     72e:	62 e0       	ldi	r22, 0x02	; 2
     730:	8a e8       	ldi	r24, 0x8A	; 138
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 ab 0a 	call	0x1556	; 0x1556 <EXTINT_SetCallBack>
     738:	08 95       	ret

0000073a <APP_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void APP_Update()
{
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	e0 97       	sbiw	r28, 0x30	; 48
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
	uint8_t au8Mode[6];
	uint8_t au8AdminPassword[6];
	uint8_t au8EEPROMAdminPassword[6];
	uint8_t au8Temperature[2];
	uint8_t u8KeypadChar;
	uint8_t u8Temperature = 0;
     754:	18 aa       	std	Y+48, r1	; 0x30
	uint8_t u8LoopIndex;
	static uint8_t u8Flag = LOW;
	static uint8_t u8CardsNo=0;
	/* Checking if the system is blocked or not */
	if(u8Flag == LOW)
     756:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <u8Flag.2108>
     75a:	81 11       	cpse	r24, r1
     75c:	73 c1       	rjmp	.+742    	; 0xa44 <__stack+0x1e5>
	{
		/* Clearing the LCD screen */
		LCD_Clear();
     75e:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
		/* Displaying "Welcome to" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   Welcome to");
     762:	84 e4       	ldi	r24, 0x44	; 68
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
		/* Setting the position of the cursor at the second row of the LCD screen */
		LCD_SetCursorPosition(0, 1);
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
		/* Displaying "ATM System" on the LCD screen */
		LCD_DisplayString((uint8_t*)"   ATM System");
     772:	82 e5       	ldi	r24, 0x52	; 82
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
		/* Sending "Enter the used mode (ADMIN - USER):" on the terminal by UART */
		UART_SendString((uint8_t*)"Enter the used mode (ADMIN - USER):\r");
     77a:	86 e6       	ldi	r24, 0x66	; 102
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
		/* Receiving the entered mode from the terminal by UART */
		UART_ReceiveString(au8Mode, MAX_LEN);
     782:	6f ef       	ldi	r22, 0xFF	; 255
     784:	ce 01       	movw	r24, r28
     786:	4b 96       	adiw	r24, 0x1b	; 27
     788:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_ReceiveString>
		/* Sending new line on the terminal by UART */
		UART_SendData((uint8_t)'\r');
     78c:	8d e0       	ldi	r24, 0x0D	; 13
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
		/* Checking if the received mode is ADMIN mode */
		if(!String_compare(au8Mode,(uint8_t *)"ADMIN"))
     794:	6b e8       	ldi	r22, 0x8B	; 139
     796:	71 e0       	ldi	r23, 0x01	; 1
     798:	ce 01       	movw	r24, r28
     79a:	4b 96       	adiw	r24, 0x1b	; 27
     79c:	0e 94 74 00 	call	0xe8	; 0xe8 <String_compare>
     7a0:	81 11       	cpse	r24, r1
     7a2:	c3 c0       	rjmp	.+390    	; 0x92a <__stack+0xcb>
		{
			gu8BTNFlag=1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			/* Clearing the LCD screen */
			LCD_Clear();
     7aa:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
			/* Displaying "ADMIN MODE" on the LCD screen */
			LCD_DisplayString((uint8_t*)"   ADMIN MODE");
     7ae:	80 e8       	ldi	r24, 0x80	; 128
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
			/* Sending "Enter Password:" on the terminal by UART */
			UART_SendString((uint8_t*)"Enter Password:\r");
     7b6:	81 e9       	ldi	r24, 0x91	; 145
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
			/* Receiving the entered admin password from the terminal by UART */
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
     7be:	6f ef       	ldi	r22, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	81 96       	adiw	r24, 0x21	; 33
     7c4:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_ReceiveString>
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
     7c8:	ae 01       	movw	r20, r28
     7ca:	49 5d       	subi	r20, 0xD9	; 217
     7cc:	5f 4f       	sbci	r21, 0xFF	; 255
     7ce:	65 e0       	ldi	r22, 0x05	; 5
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 e1       	ldi	r24, 0x10	; 16
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 1b 06 	call	0xc36	; 0xc36 <EEPROM_ReadString>
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
     7da:	99 a1       	ldd	r25, Y+33	; 0x21
     7dc:	8f a1       	ldd	r24, Y+39	; 0x27
     7de:	98 13       	cpse	r25, r24
     7e0:	99 c0       	rjmp	.+306    	; 0x914 <__stack+0xb5>
     7e2:	9a a1       	ldd	r25, Y+34	; 0x22
     7e4:	88 a5       	ldd	r24, Y+40	; 0x28
     7e6:	98 13       	cpse	r25, r24
     7e8:	95 c0       	rjmp	.+298    	; 0x914 <__stack+0xb5>
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7ea:	9b a1       	ldd	r25, Y+35	; 0x23
     7ec:	89 a5       	ldd	r24, Y+41	; 0x29
			/* Receiving the entered admin password from the terminal by UART */
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
     7ee:	98 13       	cpse	r25, r24
     7f0:	91 c0       	rjmp	.+290    	; 0x914 <__stack+0xb5>
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7f2:	9c a1       	ldd	r25, Y+36	; 0x24
     7f4:	8a a5       	ldd	r24, Y+42	; 0x2a
     7f6:	98 13       	cpse	r25, r24
     7f8:	8d c0       	rjmp	.+282    	; 0x914 <__stack+0xb5>
			   (au8AdminPassword[4] == au8EEPROMAdminPassword[4]))
     7fa:	9d a1       	ldd	r25, Y+37	; 0x25
     7fc:	8b a5       	ldd	r24, Y+43	; 0x2b
			UART_ReceiveString(au8AdminPassword, MAX_LEN);
			/* Reading the stored admin password "admin" from EEPROM */
			EEPROM_ReadString(APP_EEPROM_ADMIN_PASSWORD_ADDRESS, 5, au8EEPROMAdminPassword);
			/* Checking if the entered admin password is the same as the stored admin password in EEPROM */
			if((au8AdminPassword[0] == au8EEPROMAdminPassword[0]) && (au8AdminPassword[1] == au8EEPROMAdminPassword[1]) &&
			   (au8AdminPassword[2] == au8EEPROMAdminPassword[2]) && (au8AdminPassword[3] == au8EEPROMAdminPassword[3]) &&
     7fe:	98 13       	cpse	r25, r24
     800:	89 c0       	rjmp	.+274    	; 0x914 <__stack+0xb5>
			{
				/* Breaking the loop process if Exit (3) is inserted */
				do
				{
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
     802:	8d e0       	ldi	r24, 0x0D	; 13
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
					/* Sending "Please select one of the following:" on the terminal by UART */
					UART_SendString((uint8_t*)"Please select one of the following:\r");
     80a:	82 ea       	ldi	r24, 0xA2	; 162
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
					/* Sending "1- Customer Data" on the terminal by UART */
					UART_SendString((uint8_t*)"1- Customer Data\r");
     812:	87 ec       	ldi	r24, 0xC7	; 199
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
					/* Sending "2- Maximum Amount" on the terminal by UART */
					UART_SendString((uint8_t*)"2- Maximum Amount\r");
     81a:	89 ed       	ldi	r24, 0xD9	; 217
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
					/* Sending "3- Exit\r" on the terminal by UART */
					UART_SendString((uint8_t*)"3- Exit\r");
     822:	8c ee       	ldi	r24, 0xEC	; 236
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
					/* Sending new line on the terminal by UART */
					UART_SendData((uint8_t)'\r');
     82a:	8d e0       	ldi	r24, 0x0D	; 13
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
					/* Getting the selected mode from the keypad */
					Keypad_GetChar(&u8KeypadChar);
     832:	ce 01       	movw	r24, r28
     834:	8f 96       	adiw	r24, 0x2f	; 47
     836:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
					/* Checking if the selected mode is "Customer Data" */
					if(u8KeypadChar == '1')
     83a:	8f a5       	ldd	r24, Y+47	; 0x2f
     83c:	81 33       	cpi	r24, 0x31	; 49
     83e:	09 f0       	breq	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     840:	50 c0       	rjmp	.+160    	; 0x8e2 <__stack+0x83>
					{
						UART_SendString((uint8_t*)"Pls enter number of cards: ");
     842:	85 ef       	ldi	r24, 0xF5	; 245
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
						UART_ReceiveData((uint16_t*)&u8CardsNo);
     84a:	8e e1       	ldi	r24, 0x1E	; 30
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_ReceiveData>
						u8CardsNo=u8CardsNo-'0';
     852:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <__data_end>
     856:	60 53       	subi	r22, 0x30	; 48
     858:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <__data_end>
						EEPROM_WriteByte(0x020, u8CardsNo);
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 9e 05 	call	0xb3c	; 0xb3c <EEPROM_WriteByte>
						UART_SendData('\r');
     864:	8d e0       	ldi	r24, 0x0D	; 13
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
						for(u8LoopIndex=0;u8LoopIndex<u8CardsNo;u8LoopIndex++)
     86c:	10 e0       	ldi	r17, 0x00	; 0
     86e:	34 c0       	rjmp	.+104    	; 0x8d8 <__stack+0x79>
						{
							/* Sending "Please enter PAN:" on the terminal by UART */
							UART_SendString((uint8_t*)"Please enter PAN:\r");
     870:	81 e1       	ldi	r24, 0x11	; 17
     872:	92 e0       	ldi	r25, 0x02	; 2
     874:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
							/* Receiving the entered PAN from the terminal by UART */
							UART_ReceiveString(au8PAN, MAX_LEN);
     878:	6f ef       	ldi	r22, 0xFF	; 255
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_ReceiveString>
							/**/
							/* Writing the PAN inside the EEPROM */
							EEPROM_WriteString(0x100 + (0x10 * u8LoopIndex), 9, au8PAN);
     882:	e1 2e       	mov	r14, r17
     884:	f1 2c       	mov	r15, r1
     886:	c7 01       	movw	r24, r14
     888:	40 96       	adiw	r24, 0x10	; 16
     88a:	ae 01       	movw	r20, r28
     88c:	4f 5f       	subi	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	69 e0       	ldi	r22, 0x09	; 9
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	82 95       	swap	r24
     896:	92 95       	swap	r25
     898:	90 7f       	andi	r25, 0xF0	; 240
     89a:	98 27       	eor	r25, r24
     89c:	80 7f       	andi	r24, 0xF0	; 240
     89e:	98 27       	eor	r25, r24
     8a0:	0e 94 dd 05 	call	0xbba	; 0xbba <EEPROM_WriteString>
							/* Sending "Please enter balance:" on the terminal by UART */
							UART_SendString((uint8_t*)"Please enter balance:\r");
     8a4:	84 e2       	ldi	r24, 0x24	; 36
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
							/* Receiving the entered balance from the terminal by UART */
							UART_ReceiveString(au8Balance, MAX_LEN);
     8ac:	6f ef       	ldi	r22, 0xFF	; 255
     8ae:	ce 01       	movw	r24, r28
     8b0:	0b 96       	adiw	r24, 0x0b	; 11
     8b2:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_ReceiveString>
							/* Writing the balance inside the EEPROM */
							EEPROM_WriteString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
     8b6:	c7 01       	movw	r24, r14
     8b8:	80 5b       	subi	r24, 0xB0	; 176
     8ba:	9f 4f       	sbci	r25, 0xFF	; 255
     8bc:	ae 01       	movw	r20, r28
     8be:	45 5f       	subi	r20, 0xF5	; 245
     8c0:	5f 4f       	sbci	r21, 0xFF	; 255
     8c2:	67 e0       	ldi	r22, 0x07	; 7
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	82 95       	swap	r24
     8c8:	92 95       	swap	r25
     8ca:	90 7f       	andi	r25, 0xF0	; 240
     8cc:	98 27       	eor	r25, r24
     8ce:	80 7f       	andi	r24, 0xF0	; 240
     8d0:	98 27       	eor	r25, r24
     8d2:	0e 94 dd 05 	call	0xbba	; 0xbba <EEPROM_WriteString>
						UART_SendString((uint8_t*)"Pls enter number of cards: ");
						UART_ReceiveData((uint16_t*)&u8CardsNo);
						u8CardsNo=u8CardsNo-'0';
						EEPROM_WriteByte(0x020, u8CardsNo);
						UART_SendData('\r');
						for(u8LoopIndex=0;u8LoopIndex<u8CardsNo;u8LoopIndex++)
     8d6:	1f 5f       	subi	r17, 0xFF	; 255
     8d8:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <__data_end>
     8dc:	18 17       	cp	r17, r24
     8de:	40 f2       	brcs	.-112    	; 0x870 <__stack+0x11>
     8e0:	14 c0       	rjmp	.+40     	; 0x90a <__stack+0xab>
							/* Writing the balance inside the EEPROM */
							EEPROM_WriteString(0x500 + (0x10 * u8LoopIndex), 7, au8Balance);
						}
					}
					/* Checking if the selected mode is "Maximum Amount" */
					else if(u8KeypadChar == '2')
     8e2:	82 33       	cpi	r24, 0x32	; 50
     8e4:	91 f4       	brne	.+36     	; 0x90a <__stack+0xab>
					{
						/* Sending "Please enter maximum amount:" on the terminal by UART */
						UART_SendString((uint8_t*)"Please enter maximum amount:\r");
     8e6:	8b e3       	ldi	r24, 0x3B	; 59
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
						/* Receiving the entered maximmum amount from the terminal by UART */
						UART_ReceiveString(au8MaxAmount, MAX_LEN);
     8ee:	6f ef       	ldi	r22, 0xFF	; 255
     8f0:	ce 01       	movw	r24, r28
     8f2:	43 96       	adiw	r24, 0x13	; 19
     8f4:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_ReceiveString>
						/* Writing the maximum amount inside the EEPROM */
						EEPROM_WriteString(APP_EEPROM_MAX_AMOUNT_ADDRESS, 7, au8MaxAmount);
     8f8:	ae 01       	movw	r20, r28
     8fa:	4d 5e       	subi	r20, 0xED	; 237
     8fc:	5f 4f       	sbci	r21, 0xFF	; 255
     8fe:	67 e0       	ldi	r22, 0x07	; 7
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e3       	ldi	r24, 0x30	; 48
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 dd 05 	call	0xbba	; 0xbba <EEPROM_WriteString>
					}
					else
					{
					}
				} while(u8KeypadChar != '3');
     90a:	8f a5       	ldd	r24, Y+47	; 0x2f
     90c:	83 33       	cpi	r24, 0x33	; 51
     90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0xb3>
     910:	78 cf       	rjmp	.-272    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     912:	08 c0       	rjmp	.+16     	; 0x924 <__stack+0xc5>
			}
			else
			{
				/* Sending "Invalid Password" on the terminal by UART if wrong admin password is inserted */
				UART_SendString((uint8_t*)"Invalid Password\r");
     914:	89 e5       	ldi	r24, 0x59	; 89
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
				/* Sending new line on the terminal by UART */
				UART_SendData((uint8_t)'\r');
     91c:	8d e0       	ldi	r24, 0x0D	; 13
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
			}
			u8Flag = LOW;
     924:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2108>
     928:	8d c0       	rjmp	.+282    	; 0xa44 <__stack+0x1e5>
		}
		/* Checking if the received mode is USER mode */
		else if(!String_compare(au8Mode,(uint8_t *)"USER"))
     92a:	6b e6       	ldi	r22, 0x6B	; 107
     92c:	72 e0       	ldi	r23, 0x02	; 2
     92e:	ce 01       	movw	r24, r28
     930:	4b 96       	adiw	r24, 0x1b	; 27
     932:	0e 94 74 00 	call	0xe8	; 0xe8 <String_compare>
     936:	81 11       	cpse	r24, r1
     938:	7d c0       	rjmp	.+250    	; 0xa34 <__stack+0x1d5>
		{
			gu8BTNFlag=2;
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			u8Flag = LOW;
     940:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2108>
			while(u8Flag == LOW)
     944:	71 c0       	rjmp	.+226    	; 0xa28 <__stack+0x1c9>
			{
				/* Clearing the LCD screen */
				LCD_Clear();
     946:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
				/* Displaying "1- Insert a Card" on the LCD screen */
				LCD_DisplayString((uint8_t*)"1- Insert a Card");
     94a:	80 e7       	ldi	r24, 0x70	; 112
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
				/* Setting the position of the cursor at the second row of the LCD screen */
				LCD_SetCursorPosition(0, 1);
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
				/* Displaying "2- Display Temp" on the LCD screen */
				LCD_DisplayString((uint8_t*)"2- Display Temp");
     95a:	81 e8       	ldi	r24, 0x81	; 129
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
				/* Getting the selected mode from the keypad */
				Keypad_GetChar(&u8KeypadChar);
     962:	ce 01       	movw	r24, r28
     964:	8f 96       	adiw	r24, 0x2f	; 47
     966:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
				/* Checking if the selected mode is to use the ATM */
				if(u8KeypadChar == '1')
     96a:	8f a5       	ldd	r24, Y+47	; 0x2f
     96c:	81 33       	cpi	r24, 0x31	; 49
     96e:	d9 f4       	brne	.+54     	; 0x9a6 <__stack+0x147>
				{
					/* Clearing the LCD screen */
					LCD_Clear();
     970:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
					/* Displaying "Please Enter" on the LCD screen */
					LCD_DisplayString((uint8_t*)"  Please Enter");
     974:	81 e9       	ldi	r24, 0x91	; 145
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
					/* Setting the position of the cursor at the second row of the LCD screen */
					LCD_SetCursorPosition(0, 1);
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
					/* Displaying "Your Card!" on the LCD screen */
					LCD_DisplayString((uint8_t*)"   Your Card!");
     984:	80 ea       	ldi	r24, 0xA0	; 160
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
					gu8BTNFlag=0;
     98c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
               UART_SendData(gu8BTNFlag);
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
					while(gu8BTNFlag!=2);
     998:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	e1 f7       	brne	.-8      	; 0x998 <__stack+0x139>
					u8Flag = LOW;
     9a0:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2108>
     9a4:	41 c0       	rjmp	.+130    	; 0xa28 <__stack+0x1c9>
				}
				/* Checking if the selected mode is to display the temperature */
				else if(u8KeypadChar == '2')
     9a6:	82 33       	cpi	r24, 0x32	; 50
     9a8:	e9 f5       	brne	.+122    	; 0xa24 <__stack+0x1c5>
				{
					u8Flag=HIGH;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <u8Flag.2108>
					/* Reading the current temperature of the LM35 sensor */
					LM35_ReadTemperature(&u8Temperature);
     9b0:	ce 01       	movw	r24, r28
     9b2:	c0 96       	adiw	r24, 0x30	; 48
     9b4:	0e 94 0d 09 	call	0x121a	; 0x121a <LM35_ReadTemperature>
					/* Clearing the LCD screen */
					LCD_Clear();
     9b8:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
					/* Displaying "Current Temp: " on the LCD screen */
					LCD_DisplayString((uint8_t*)"Current Temp: ");
     9bc:	8e ea       	ldi	r24, 0xAE	; 174
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
					/* Converting the temperature read from the LM35 sensor from integer to array of ASCII characters */
					itoa(u8Temperature, (char*)au8Temperature, 10);
     9c4:	88 a9       	ldd	r24, Y+48	; 0x30
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9c6:	4a e0       	ldi	r20, 0x0A	; 10
     9c8:	be 01       	movw	r22, r28
     9ca:	63 5d       	subi	r22, 0xD3	; 211
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <__itoa_ncheck>
					/* Displaying the temperature read from the LM35 sensor on the LCD screen */
					LCD_DisplayString(au8Temperature);
     9d4:	ce 01       	movw	r24, r28
     9d6:	8d 96       	adiw	r24, 0x2d	; 45
     9d8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
					/* Checking if the temperature read from the LM35 sensor is greater than 50 */
					if(u8Temperature > 50)
     9dc:	88 a9       	ldd	r24, Y+48	; 0x30
     9de:	83 33       	cpi	r24, 0x33	; 51
     9e0:	90 f0       	brcs	.+36     	; 0xa06 <__stack+0x1a7>
					{
						/* Clearing the LCD screen */
						LCD_Clear();
     9e2:	0e 94 c3 08 	call	0x1186	; 0x1186 <LCD_Clear>
						/* Displaying "System blocked!" on the LCD screen */
						LCD_DisplayString((uint8_t*)"System blocked!");
     9e6:	8d eb       	ldi	r24, 0xBD	; 189
     9e8:	92 e0       	ldi	r25, 0x02	; 2
     9ea:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
						/* Displaying "Temp is above 50" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Temp is above 50");
     9f6:	8d ec       	ldi	r24, 0xCD	; 205
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Setting the system block flag to one to block the whole system */
						u8Flag = HIGH;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <u8Flag.2108>
     a04:	11 c0       	rjmp	.+34     	; 0xa28 <__stack+0x1c9>
					}
					else
					{
						/* Setting the position of the cursor at the second row of the LCD screen */
						LCD_SetCursorPosition(0, 1);
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 cd 08 	call	0x119a	; 0x119a <LCD_SetCursorPosition>
						/* Displaying "Press any key" on the LCD screen */
						LCD_DisplayString((uint8_t*)"Press any key");
     a0e:	8e ed       	ldi	r24, 0xDE	; 222
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <LCD_DisplayString>
						/* Waiting for any key to be pressed from the keypad */
						Keypad_GetChar(&u8KeypadChar);
     a16:	ce 01       	movw	r24, r28
     a18:	8f 96       	adiw	r24, 0x2f	; 47
     a1a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Keypad_GetChar>
						u8Flag = LOW;
     a1e:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2108>
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <__stack+0x1c9>
					}
				}
				else
				{
					/* Invalid keypad input, 1 or 2 must be inserted */
					u8Flag = LOW;
     a24:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <u8Flag.2108>
		/* Checking if the received mode is USER mode */
		else if(!String_compare(au8Mode,(uint8_t *)"USER"))
		{
			gu8BTNFlag=2;
			u8Flag = LOW;
			while(u8Flag == LOW)
     a28:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <u8Flag.2108>
     a2c:	88 23       	and	r24, r24
     a2e:	09 f4       	brne	.+2      	; 0xa32 <__stack+0x1d3>
     a30:	8a cf       	rjmp	.-236    	; 0x946 <__stack+0xe7>
     a32:	08 c0       	rjmp	.+16     	; 0xa44 <__stack+0x1e5>
			}
		}
		else
		{
			/* Sending "Invalid mode is inserted" on the terminal by UART */
			UART_SendString((uint8_t*)"Invalid mode is inserted\r");
     a34:	8c ee       	ldi	r24, 0xEC	; 236
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	0e 94 a7 0c 	call	0x194e	; 0x194e <UART_SendString>
			/* Sending new line on the terminal by UART */
			UART_SendData((uint8_t)'\r');
     a3c:	8d e0       	ldi	r24, 0x0D	; 13
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
	}
	else
	{
		/* System is blocked */
	}
}
     a44:	e0 96       	adiw	r28, 0x30	; 48
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	08 95       	ret

00000a5c <Button_Init>:
* Parameters	: enuDIOPinNo, enuButtonConnectionType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the button according to the configuration
*************************************************************************************************/
enuErrorStatus_t Button_Init(enuDIOPinNo_t enuDIOPinNo, enuButtonConnectionType_t enuButtonConnectionType)
{
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	1f 92       	push	r1
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
   enuErrorStatus_t enuRetVar;
   uint8_t u8Data;
   
	if((enuButtonConnectionType > BUTTON_CONNECTION_TYPE_MIN_VALUE) && (enuButtonConnectionType < BUTTON_CONNECTION_TYPE_MAX_VALUE))
     a6a:	62 30       	cpi	r22, 0x02	; 2
     a6c:	70 f5       	brcc	.+92     	; 0xaca <Button_Init+0x6e>
     a6e:	06 2f       	mov	r16, r22
     a70:	18 2f       	mov	r17, r24
	{
		/* Initialize the button with the connected DIO pin */
		DIO_PinInit(enuDIOPinNo, INPUT, enuButtonConnectionType);
     a72:	46 2f       	mov	r20, r22
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
		/* Reading the current state of the button */
		DIO_PinRead(enuDIOPinNo, &u8Data);
     a7a:	be 01       	movw	r22, r28
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	81 2f       	mov	r24, r17
     a82:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_PinRead>
		/* Checking if the current state of the button according to the configuration is true */
		if(((u8Data == LOW) && (enuButtonConnectionType == BUTTON_ACTIVE_HIGH)) || ((u8Data == HIGH) && (enuButtonConnectionType == BUTTON_ACTIVE_LOW)))
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	81 11       	cpse	r24, r1
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <Button_Init+0x34>
     a8c:	00 23       	and	r16, r16
     a8e:	21 f0       	breq	.+8      	; 0xa98 <Button_Init+0x3c>
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	41 f4       	brne	.+16     	; 0xaa4 <Button_Init+0x48>
     a94:	01 30       	cpi	r16, 0x01	; 1
     a96:	31 f4       	brne	.+12     	; 0xaa4 <Button_Init+0x48>
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_OFF;
     a98:	e1 2f       	mov	r30, r17
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	e0 5e       	subi	r30, 0xE0	; 224
     a9e:	fb 4f       	sbci	r31, 0xFB	; 251
     aa0:	10 82       	st	Z, r1
     aa2:	06 c0       	rjmp	.+12     	; 0xab0 <Button_Init+0x54>
		}
		else
		{
			enuButtonStates[enuDIOPinNo] = BUTTON_ON;
     aa4:	e1 2f       	mov	r30, r17
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	e0 5e       	subi	r30, 0xE0	; 224
     aaa:	fb 4f       	sbci	r31, 0xFB	; 251
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	80 83       	st	Z, r24
		}
		enuButtonConnectionTypeState[enuDIOPinNo] = enuButtonConnectionType;
     ab0:	81 2f       	mov	r24, r17
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	fc 01       	movw	r30, r24
     ab6:	ef 5d       	subi	r30, 0xDF	; 223
     ab8:	fc 4f       	sbci	r31, 0xFC	; 252
     aba:	00 83       	st	Z, r16
		enuButtonState[enuDIOPinNo] = BUTTON_INIT_DONE;
     abc:	fc 01       	movw	r30, r24
     abe:	e1 5e       	subi	r30, 0xE1	; 225
     ac0:	fa 4f       	sbci	r31, 0xFA	; 250
     ac2:	21 e0       	ldi	r18, 0x01	; 1
     ac4:	20 83       	st	Z, r18
		enuRetVar = E_OK;		
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <Button_Init+0x70>
	}	
	else
	{
		enuRetVar = E_ERROR;
     aca:	80 e0       	ldi	r24, 0x00	; 0
	}
   return enuRetVar;	
}
     acc:	0f 90       	pop	r0
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <DCFan_Init>:
* Parameters	: enuDIOPinNo
* Return Value	: void
* Description  : Initialize the DC Fan data pin
*************************************************************************************************/
void DCFan_Init(enuDIOPinNo_t enuDIOPinNo)
{	
     ad8:	cf 93       	push	r28
     ada:	c8 2f       	mov	r28, r24
	/* Initializing the DC Fan data pin as output */
	DIO_PinInit(enuDIOPinNo, OUTPUT, NO_CONNECTION);
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
	/* Stopping the DC Fan before the system starts */
	DIO_PinWrite(enuDIOPinNo, LOW);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	8c 2f       	mov	r24, r28
     ae8:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	enuDCFanState[enuDIOPinNo] = DCFAN_INIT_DONE;
     aec:	ec 2f       	mov	r30, r28
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	e2 5e       	subi	r30, 0xE2	; 226
     af2:	f9 4f       	sbci	r31, 0xF9	; 249
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 83       	st	Z, r24
}
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <DCFan_Start>:
*************************************************************************************************/
enuErrorStatus_t DCFan_Start(enuDIOPinNo_t enuDIOPinNo)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
     afc:	e8 2f       	mov	r30, r24
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	e2 5e       	subi	r30, 0xE2	; 226
     b02:	f9 4f       	sbci	r31, 0xF9	; 249
     b04:	90 81       	ld	r25, Z
     b06:	91 30       	cpi	r25, 0x01	; 1
     b08:	29 f4       	brne	.+10     	; 0xb14 <DCFan_Start+0x18>
	{
		/* Starting the DC Fan */
		DIO_PinWrite(enuDIOPinNo, HIGH);
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		enuRetVar = E_OK;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     b14:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
     b16:	08 95       	ret

00000b18 <DCFan_Stop>:
*************************************************************************************************/
enuErrorStatus_t DCFan_Stop(enuDIOPinNo_t enuDIOPinNo)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuDCFanState[enuDIOPinNo] == DCFAN_INIT_DONE)
     b18:	e8 2f       	mov	r30, r24
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	e2 5e       	subi	r30, 0xE2	; 226
     b1e:	f9 4f       	sbci	r31, 0xF9	; 249
     b20:	90 81       	ld	r25, Z
     b22:	91 30       	cpi	r25, 0x01	; 1
     b24:	29 f4       	brne	.+10     	; 0xb30 <DCFan_Stop+0x18>
	{
		/* Stopping the DC Fan */
		DIO_PinWrite(enuDIOPinNo, LOW);
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		enuRetVar = E_OK;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
     b30:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
     b32:	08 95       	ret

00000b34 <EEPROM_Init>:
* Description: A function to initialize EEPROM device
************************************************************************************/
enuErrorStatus_t EEPROM_Init      (void)
{
   //initialize I2C Bus
   I2C_Init();
     b34:	0e 94 47 0b 	call	0x168e	; 0x168e <I2C_Init>
   return E_OK;
}
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	08 95       	ret

00000b3c <EEPROM_WriteByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a byte in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteByte (uint16_t u16ByteAddress,uint8_t u8Data)
{
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	18 2f       	mov	r17, r24
     b44:	d6 2f       	mov	r29, r22
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     b46:	97 70       	andi	r25, 0x07	; 7
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     b48:	c9 2f       	mov	r28, r25
     b4a:	c0 65       	ori	r28, 0x50	; 80
   
   //send a start condition
   I2C_Start();
     b4c:	0e 94 6f 0b 	call	0x16de	; 0x16de <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	8c 2f       	mov	r24, r28
     b54:	0e 94 8d 0b 	call	0x171a	; 0x171a <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
     b58:	81 2f       	mov	r24, r17
     b5a:	0e 94 b5 0b 	call	0x176a	; 0x176a <I2C_SendDataFrame>
   //send the data
   I2C_SendDataFrame(u8Data);
     b5e:	8d 2f       	mov	r24, r29
     b60:	0e 94 b5 0b 	call	0x176a	; 0x176a <I2C_SendDataFrame>
   //send a stop bit
   I2C_Stop();
     b64:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2C_Stop>
   return E_OK;
}
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	08 95       	ret

00000b72 <EEPROM_ReadByte>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a byte from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadByte  (uint16_t u16ByteAddress,uint8_t *pu8Data)
{
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	d8 2f       	mov	r29, r24
     b7c:	8b 01       	movw	r16, r22
   //transform the byte address into a page number and a byte address within the page
   uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
   uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     b7e:	97 70       	andi	r25, 0x07	; 7
   //set up the EEPROM page address frame
   uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     b80:	c9 2f       	mov	r28, r25
     b82:	c0 65       	ori	r28, 0x50	; 80
   
   //send a start condition
   I2C_Start();
     b84:	0e 94 6f 0b 	call	0x16de	; 0x16de <I2C_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Write);
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	8c 2f       	mov	r24, r28
     b8c:	0e 94 8d 0b 	call	0x171a	; 0x171a <I2C_SendAddressFrame>
   //send the byte address frame
   I2C_SendDataFrame(u8ByteAddress_Page);
     b90:	8d 2f       	mov	r24, r29
     b92:	0e 94 b5 0b 	call	0x176a	; 0x176a <I2C_SendDataFrame>
   //send a repeated start condition
   I2C_Repeated_Start();
     b96:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_Repeated_Start>
   //send the EEPROM page address frame
   I2C_SendAddressFrame(u8EEPROM_Address,Read);
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	8c 2f       	mov	r24, r28
     b9e:	0e 94 8d 0b 	call	0x171a	; 0x171a <I2C_SendAddressFrame>
   //receive the data from the EEPROM and send a NACK condition
   I2C_RecieveDataFrame(pu8Data,NACK);
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	c8 01       	movw	r24, r16
     ba6:	0e 94 ce 0b 	call	0x179c	; 0x179c <I2C_RecieveDataFrame>
   //send a stop bit
   I2C_Stop();
     baa:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2C_Stop>
   
   
   return E_OK;
}
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <EEPROM_WriteString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a string in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteString (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
     bba:	cf 92       	push	r12
     bbc:	df 92       	push	r13
     bbe:	ef 92       	push	r14
     bc0:	ff 92       	push	r15
     bc2:	0f 93       	push	r16
     bc4:	1f 93       	push	r17
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
	if (pu8Data==NULLPTR)		return E_ERROR;
     bca:	41 15       	cp	r20, r1
     bcc:	51 05       	cpc	r21, r1
     bce:	39 f1       	breq	.+78     	; 0xc1e <EEPROM_WriteString+0x64>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     bd0:	29 2f       	mov	r18, r25
     bd2:	27 70       	andi	r18, 0x07	; 7
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     bd4:	c2 2f       	mov	r28, r18
     bd6:	c0 65       	ori	r28, 0x50	; 80
	
	if (u16ByteAddress+u16ByteCount>2047)
     bd8:	9c 01       	movw	r18, r24
     bda:	26 0f       	add	r18, r22
     bdc:	37 1f       	adc	r19, r23
     bde:	21 15       	cp	r18, r1
     be0:	38 40       	sbci	r19, 0x08	; 8
     be2:	f8 f4       	brcc	.+62     	; 0xc22 <EEPROM_WriteString+0x68>
     be4:	7a 01       	movw	r14, r20
     be6:	8b 01       	movw	r16, r22
     be8:	6c 01       	movw	r12, r24
	{
		return E_ERROR;
	}
	//send a start condition
	I2C_Start();
     bea:	0e 94 6f 0b 	call	0x16de	; 0x16de <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	8c 2f       	mov	r24, r28
     bf2:	0e 94 8d 0b 	call	0x171a	; 0x171a <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
     bf6:	8c 2d       	mov	r24, r12
     bf8:	0e 94 b5 0b 	call	0x176a	; 0x176a <I2C_SendDataFrame>
	
	for (uint16_t i=0;i<u16ByteCount;i++)
     bfc:	c0 e0       	ldi	r28, 0x00	; 0
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
     c00:	07 c0       	rjmp	.+14     	; 0xc10 <EEPROM_WriteString+0x56>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
     c02:	f7 01       	movw	r30, r14
     c04:	ec 0f       	add	r30, r28
     c06:	fd 1f       	adc	r31, r29
     c08:	80 81       	ld	r24, Z
     c0a:	0e 94 b5 0b 	call	0x176a	; 0x176a <I2C_SendDataFrame>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
	
	for (uint16_t i=0;i<u16ByteCount;i++)
     c0e:	21 96       	adiw	r28, 0x01	; 1
     c10:	c0 17       	cp	r28, r16
     c12:	d1 07       	cpc	r29, r17
     c14:	b0 f3       	brcs	.-20     	; 0xc02 <EEPROM_WriteString+0x48>
	{
		//send the data
		I2C_SendDataFrame(pu8Data[i]);
	}
	//send a stop bit
	I2C_Stop();
     c16:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2C_Stop>
	return E_OK;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <EEPROM_WriteString+0x6a>
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to write a string in the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_WriteString (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
	if (pu8Data==NULLPTR)		return E_ERROR;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <EEPROM_WriteString+0x6a>
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
	
	if (u16ByteAddress+u16ByteCount>2047)
	{
		return E_ERROR;
     c22:	80 e0       	ldi	r24, 0x00	; 0
		I2C_SendDataFrame(pu8Data[i]);
	}
	//send a stop bit
	I2C_Stop();
	return E_OK;
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	08 95       	ret

00000c36 <EEPROM_ReadString>:
* Parameters (out): enuErrorStatus_t
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a string from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadString  (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
	if (pu8Data==NULLPTR)		return E_ERROR;
     c44:	41 15       	cp	r20, r1
     c46:	51 05       	cpc	r21, r1
     c48:	a9 f1       	breq	.+106    	; 0xcb4 <EEPROM_ReadString+0x7e>
	//transform the byte address into a page number and a byte address within the page
	uint8_t u8ByteAddress_Page=(uint8_t)u16ByteAddress;
	uint8_t u8PageAddress=(u16ByteAddress>>8)& 0b00000111;
     c4a:	29 2f       	mov	r18, r25
     c4c:	27 70       	andi	r18, 0x07	; 7
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
     c4e:	c2 2f       	mov	r28, r18
     c50:	c0 65       	ori	r28, 0x50	; 80
	
	if (u16ByteAddress+u16ByteCount>2047)
     c52:	9c 01       	movw	r18, r24
     c54:	26 0f       	add	r18, r22
     c56:	37 1f       	adc	r19, r23
     c58:	21 15       	cp	r18, r1
     c5a:	38 40       	sbci	r19, 0x08	; 8
     c5c:	68 f5       	brcc	.+90     	; 0xcb8 <EEPROM_ReadString+0x82>
     c5e:	8a 01       	movw	r16, r20
     c60:	7b 01       	movw	r14, r22
     c62:	6c 01       	movw	r12, r24
	{
		return E_ERROR;
	}
	
	//send a start condition
	I2C_Start();
     c64:	0e 94 6f 0b 	call	0x16de	; 0x16de <I2C_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Write);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	8c 2f       	mov	r24, r28
     c6c:	0e 94 8d 0b 	call	0x171a	; 0x171a <I2C_SendAddressFrame>
	//send the byte address frame
	I2C_SendDataFrame(u8ByteAddress_Page);
     c70:	8c 2d       	mov	r24, r12
     c72:	0e 94 b5 0b 	call	0x176a	; 0x176a <I2C_SendDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
     c76:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <I2C_Repeated_Start>
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	8c 2f       	mov	r24, r28
     c7e:	0e 94 8d 0b 	call	0x171a	; 0x171a <I2C_SendAddressFrame>
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
     c82:	c0 e0       	ldi	r28, 0x00	; 0
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <EEPROM_ReadString+0x5c>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	80 0f       	add	r24, r16
     c8a:	91 1f       	adc	r25, r17
     c8c:	0e 94 ce 0b 	call	0x179c	; 0x179c <I2C_RecieveDataFrame>
	//send a repeated start condition
	I2C_Repeated_Start();
	//send the EEPROM page address frame
	I2C_SendAddressFrame(u8EEPROM_Address,Read);
	uint8_t i;
	for (i=0;i<u16ByteCount-1;i++)
     c90:	cf 5f       	subi	r28, 0xFF	; 255
     c92:	8c 2f       	mov	r24, r28
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	97 01       	movw	r18, r14
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	31 09       	sbc	r19, r1
     c9c:	82 17       	cp	r24, r18
     c9e:	93 07       	cpc	r25, r19
     ca0:	90 f3       	brcs	.-28     	; 0xc86 <EEPROM_ReadString+0x50>
	{
		//receive the data from the EEPROM and send a ACK condition
		I2C_RecieveDataFrame(&pu8Data[i],ACK);
	}	
	//receive the data from the EEPROM and send a NACK condition
	I2C_RecieveDataFrame(&pu8Data[i],NACK);
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	80 0f       	add	r24, r16
     ca6:	91 1f       	adc	r25, r17
     ca8:	0e 94 ce 0b 	call	0x179c	; 0x179c <I2C_RecieveDataFrame>
	//send a stop bit
	I2C_Stop();
     cac:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2C_Stop>
	return E_OK;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <EEPROM_ReadString+0x84>
* Return value: 0=ERROR or 1=SUCCESS
* Description: A function to read a string from the EEPROM in a specific address
************************************************************************************/
enuErrorStatus_t EEPROM_ReadString  (uint16_t u16ByteAddress,uint16_t u16ByteCount,uint8_t *pu8Data)
{
	if (pu8Data==NULLPTR)		return E_ERROR;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <EEPROM_ReadString+0x84>
	//set up the EEPROM page address frame
	uint8_t u8EEPROM_Address= EEPROM_DEVICE_BASE_ADDRESS | u8PageAddress;
	
	if (u16ByteAddress+u16ByteCount>2047)
	{
		return E_ERROR;
     cb8:	80 e0       	ldi	r24, 0x00	; 0
	I2C_RecieveDataFrame(&pu8Data[i],NACK);
	//send a stop bit
	I2C_Stop();
	return E_OK;

}
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	08 95       	ret

00000cca <Keypad_CharMapping>:
{
    uint8_t u8OutChar;
	 
    /* Calculating the value the corresponds the current row and column indexes         *
     * e.g: If 8 is pressed (Row = 2, Col = 1) -> Char = (1 + 1) + (3 * 2) = 2 + 6 = 8  */
    switch(KEYPAD_CALCULATE_CORRESPONDING_KEY_VALUE(u8ColIndex, u8RowIndex))
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	61 50       	subi	r22, 0x01	; 1
     cce:	71 09       	sbc	r23, r1
     cd0:	fb 01       	movw	r30, r22
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	e6 0f       	add	r30, r22
     cd8:	f7 1f       	adc	r31, r23
     cda:	e8 0f       	add	r30, r24
     cdc:	f1 1d       	adc	r31, r1
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	ed 30       	cpi	r30, 0x0D	; 13
     ce2:	f1 05       	cpc	r31, r1
     ce4:	10 f5       	brcc	.+68     	; 0xd2a <Keypad_CharMapping+0x60>
     ce6:	e6 5d       	subi	r30, 0xD6	; 214
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__tablejump2__>
    {
        case 1:     u8OutChar = '1';
     cee:	81 e3       	ldi	r24, 0x31	; 49
     cf0:	08 95       	ret
                    break;
        case 2:     u8OutChar = '2';
                    break;
        case 3:     u8OutChar = '3';
     cf2:	83 e3       	ldi	r24, 0x33	; 51
                    break;
     cf4:	08 95       	ret
        case 4:     (u8ColIndex == 1) ? (u8OutChar = '4') : (u8OutChar = 'A');
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	e1 f4       	brne	.+56     	; 0xd32 <Keypad_CharMapping+0x68>
     cfa:	84 e3       	ldi	r24, 0x34	; 52
     cfc:	08 95       	ret
                    break;
        case 5:     u8OutChar = '5';
     cfe:	85 e3       	ldi	r24, 0x35	; 53
                    break;
     d00:	08 95       	ret
        case 6:     u8OutChar = '6';
     d02:	86 e3       	ldi	r24, 0x36	; 54
                    break;
     d04:	08 95       	ret
        case 7:     (u8ColIndex == 1) ? (u8OutChar = '7') : (u8OutChar = 'B');
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	b1 f4       	brne	.+44     	; 0xd36 <Keypad_CharMapping+0x6c>
     d0a:	87 e3       	ldi	r24, 0x37	; 55
     d0c:	08 95       	ret
                    break;
        case 8:     u8OutChar = '8';
     d0e:	88 e3       	ldi	r24, 0x38	; 56
                    break;
     d10:	08 95       	ret
        case 9:     u8OutChar = '9';
     d12:	89 e3       	ldi	r24, 0x39	; 57
                    break;
     d14:	08 95       	ret
        case 10:    (u8ColIndex == 1) ? (u8OutChar = '*') : (u8OutChar = 'C');
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	81 f4       	brne	.+32     	; 0xd3a <Keypad_CharMapping+0x70>
     d1a:	8a e2       	ldi	r24, 0x2A	; 42
     d1c:	08 95       	ret
                    break;
        case 11:    u8OutChar = '0';
     d1e:	80 e3       	ldi	r24, 0x30	; 48
                    break;
     d20:	08 95       	ret
        case 12:    u8OutChar = '#';
     d22:	83 e2       	ldi	r24, 0x23	; 35
                    break;
     d24:	08 95       	ret
        case 13:    u8OutChar = 'D';
     d26:	84 e4       	ldi	r24, 0x44	; 68
                    break;
     d28:	08 95       	ret
        default:    u8OutChar = ' ';
     d2a:	80 e2       	ldi	r24, 0x20	; 32
     d2c:	08 95       	ret
     * e.g: If 8 is pressed (Row = 2, Col = 1) -> Char = (1 + 1) + (3 * 2) = 2 + 6 = 8  */
    switch(KEYPAD_CALCULATE_CORRESPONDING_KEY_VALUE(u8ColIndex, u8RowIndex))
    {
        case 1:     u8OutChar = '1';
                    break;
        case 2:     u8OutChar = '2';
     d2e:	82 e3       	ldi	r24, 0x32	; 50
     d30:	08 95       	ret
                    break;
        case 3:     u8OutChar = '3';
                    break;
        case 4:     (u8ColIndex == 1) ? (u8OutChar = '4') : (u8OutChar = 'A');
     d32:	81 e4       	ldi	r24, 0x41	; 65
     d34:	08 95       	ret
                    break;
        case 5:     u8OutChar = '5';
                    break;
        case 6:     u8OutChar = '6';
                    break;
        case 7:     (u8ColIndex == 1) ? (u8OutChar = '7') : (u8OutChar = 'B');
     d36:	82 e4       	ldi	r24, 0x42	; 66
     d38:	08 95       	ret
                    break;
        case 8:     u8OutChar = '8';
                    break;
        case 9:     u8OutChar = '9';
                    break;
        case 10:    (u8ColIndex == 1) ? (u8OutChar = '*') : (u8OutChar = 'C');
     d3a:	83 e4       	ldi	r24, 0x43	; 67
        case 13:    u8OutChar = 'D';
                    break;
        default:    u8OutChar = ' ';
    }
    return u8OutChar;
}
     d3c:	08 95       	ret

00000d3e <Keypad_Init>:
* Parameters	: enuKeypadType
* Return Value	: enuErrorStatus_t
* Description  : Initialize the Keypad according to the configuration
*************************************************************************************************/
enuErrorStatus_t Keypad_Init(enuKeypadType_t enuKeypadType)
{
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	68 f0       	brcs	.+26     	; 0xd62 <Keypad_Init+0x24>
		enuKeypadState = KEYPAD_INIT_DONE;
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	2e c0       	rjmp	.+92     	; 0xda8 <Keypad_Init+0x6a>
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
     d4c:	ec 2f       	mov	r30, r28
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	ea 5f       	subi	r30, 0xFA	; 250
     d52:	fc 4f       	sbci	r31, 0xFC	; 252
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if((enuKeypadType > KEYPAD_TYPE_MIN_VALUE) && (enuKeypadType < KEYPAD_TYPE_MAX_VALUE))
	{
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
     d5e:	cf 5f       	subi	r28, 0xFF	; 255
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <Keypad_Init+0x28>
     d62:	d8 2f       	mov	r29, r24
     d64:	c0 e0       	ldi	r28, 0x00	; 0
     d66:	4c 2f       	mov	r20, r28
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	24 e0       	ldi	r18, 0x04	; 4
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	2d 1b       	sub	r18, r29
     d70:	31 09       	sbc	r19, r1
     d72:	42 17       	cp	r20, r18
     d74:	53 07       	cpc	r21, r19
     d76:	50 f3       	brcs	.-44     	; 0xd4c <Keypad_Init+0xe>
     d78:	c0 e0       	ldi	r28, 0x00	; 0
     d7a:	0f c0       	rjmp	.+30     	; 0xd9a <Keypad_Init+0x5c>
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
		{
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
     d7c:	ec 2f       	mov	r30, r28
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	e6 5f       	subi	r30, 0xF6	; 246
     d82:	fc 4f       	sbci	r31, 0xFC	; 252
     d84:	10 81       	ld	r17, Z
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	81 2f       	mov	r24, r17
     d8c:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
     d90:	61 e0       	ldi	r22, 0x01	; 1
     d92:	81 2f       	mov	r24, r17
     d94:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		for(u8LoopIndex = 0; (u8LoopIndex < (KEYPAD_COLS_NUMBER - enuKeypadType)); u8LoopIndex++)
		{
			/* Initializing all col pins as input */
			DIO_PinInit(au8KeypadCols[u8LoopIndex], INPUT, PULL_UP_ENABLE);
		}
		for(u8LoopIndex = 0; u8LoopIndex < KEYPAD_ROWS_NUMBER; u8LoopIndex++)
     d98:	cf 5f       	subi	r28, 0xFF	; 255
     d9a:	c4 30       	cpi	r28, 0x04	; 4
     d9c:	78 f3       	brcs	.-34     	; 0xd7c <Keypad_Init+0x3e>
			/* Initializing all row pins as output */
			DIO_PinInit(au8KeypadRows[u8LoopIndex], OUTPUT, NO_CONNECTION);
			/* Initializing all row pins to start detecting a LOW pulse from column pins */
			DIO_PinWrite(au8KeypadRows[u8LoopIndex], HIGH);
		}
		enuKeypadTypeState = enuKeypadType;
     d9e:	d0 93 1d 07 	sts	0x071D, r29	; 0x80071d <enuKeypadTypeState>
		enuKeypadState = KEYPAD_INIT_DONE;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <enuKeypadState>
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	08 95       	ret

00000db0 <Keypad_GetChar>:
* Parameters	: pu8Data
* Return Value	: enuErrorStatus_t
* Description  : Get the current character of the pressed key from the Keypad
*************************************************************************************************/
enuErrorStatus_t Keypad_GetChar(uint8_t* pu8Data)
{
     db0:	8f 92       	push	r8
     db2:	9f 92       	push	r9
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	1f 92       	push	r1
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	enuDigitalStates_t enuDigitalState;
	enuDigitalStates_t u8Flag = LOW;
	uint8_t u8RowIndex = 0;
	uint8_t u8ColIndex = 0;
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
     dcc:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <enuKeypadState>
     dd0:	21 30       	cpi	r18, 0x01	; 1
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <Keypad_GetChar+0x26>
     dd4:	49 c0       	rjmp	.+146    	; 0xe68 <Keypad_GetChar+0xb8>
		*pu8Data = Keypad_CharMapping(u8ColIndex, u8RowIndex);
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	54 c0       	rjmp	.+168    	; 0xe82 <Keypad_GetChar+0xd2>
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
     dda:	ec 2c       	mov	r14, r12
     ddc:	f1 2c       	mov	r15, r1
     dde:	f7 01       	movw	r30, r14
     de0:	e6 5f       	subi	r30, 0xF6	; 246
     de2:	fc 4f       	sbci	r31, 0xFC	; 252
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
     dec:	d1 2c       	mov	r13, r1
     dee:	1e c0       	rjmp	.+60     	; 0xe2c <Keypad_GetChar+0x7c>
				{
					/* Reading the value of the current column */
					DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);
     df0:	0d 2d       	mov	r16, r13
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	f8 01       	movw	r30, r16
     df6:	ea 5f       	subi	r30, 0xFA	; 250
     df8:	fc 4f       	sbci	r31, 0xFC	; 252
     dfa:	be 01       	movw	r22, r28
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	80 81       	ld	r24, Z
     e02:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_PinRead>
					/* Checking if a column is attached to a row / key is pressed to raise a flag and break the loop */
					if(enuDigitalState == LOW)
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	88 23       	and	r24, r24
     e0a:	51 f0       	breq	.+20     	; 0xe20 <Keypad_GetChar+0x70>
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <Keypad_GetChar+0x7a>
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
						{
							DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);						
     e0e:	be 01       	movw	r22, r28
     e10:	6f 5f       	subi	r22, 0xFF	; 255
     e12:	7f 4f       	sbci	r23, 0xFF	; 255
     e14:	f8 01       	movw	r30, r16
     e16:	ea 5f       	subi	r30, 0xFA	; 250
     e18:	fc 4f       	sbci	r31, 0xFC	; 252
     e1a:	80 81       	ld	r24, Z
     e1c:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_PinRead>
					if(enuDigitalState == LOW)
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
						/* Waiting for the key to be released */
						while(enuDigitalState == LOW)
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	88 23       	and	r24, r24
     e24:	a1 f3       	breq	.-24     	; 0xe0e <Keypad_GetChar+0x5e>
					DIO_PinRead(au8KeypadCols[u8ColIndex], &enuDigitalState);
					/* Checking if a column is attached to a row / key is pressed to raise a flag and break the loop */
					if(enuDigitalState == LOW)
					{
						/* Raising the flag to break the loop after a key is pressed */
						u8Flag = HIGH;
     e26:	bb 24       	eor	r11, r11
     e28:	b3 94       	inc	r11
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
			{
				/* Setting the value of one row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], LOW);
				/* Looping on each column to read their values */
				for(u8ColIndex = 0; ((u8ColIndex < (KEYPAD_COLS_NUMBER - enuKeypadTypeState)) && (u8Flag == LOW)); u8ColIndex++)
     e2a:	d3 94       	inc	r13
     e2c:	2d 2d       	mov	r18, r13
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 91 1d 07 	lds	r20, 0x071D	; 0x80071d <enuKeypadTypeState>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	84 1b       	sub	r24, r20
     e3a:	91 09       	sbc	r25, r1
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	10 f4       	brcc	.+4      	; 0xe46 <Keypad_GetChar+0x96>
     e42:	bb 20       	and	r11, r11
     e44:	a9 f2       	breq	.-86     	; 0xdf0 <Keypad_GetChar+0x40>
					else
					{
					}					
				}
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
     e46:	f7 01       	movw	r30, r14
     e48:	e6 5f       	subi	r30, 0xF6	; 246
     e4a:	fc 4f       	sbci	r31, 0xFC	; 252
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	80 81       	ld	r24, Z
     e50:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
		{
			for(u8RowIndex = 0; ((u8RowIndex < KEYPAD_ROWS_NUMBER) && (u8Flag == LOW)); u8RowIndex++)
     e54:	c3 94       	inc	r12
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <Keypad_GetChar+0xaa>
     e58:	c1 2c       	mov	r12, r1
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	8c 15       	cp	r24, r12
     e5e:	40 f0       	brcs	.+16     	; 0xe70 <Keypad_GetChar+0xc0>
     e60:	bb 20       	and	r11, r11
     e62:	09 f4       	brne	.+2      	; 0xe66 <Keypad_GetChar+0xb6>
     e64:	ba cf       	rjmp	.-140    	; 0xdda <Keypad_GetChar+0x2a>
     e66:	04 c0       	rjmp	.+8      	; 0xe70 <Keypad_GetChar+0xc0>
     e68:	4c 01       	movw	r8, r24
     e6a:	d1 2c       	mov	r13, r1
     e6c:	c1 2c       	mov	r12, r1
     e6e:	b1 2c       	mov	r11, r1
	uint8_t u8ColIndex = 0;
	
	if(enuKeypadState == KEYPAD_INIT_DONE)
	{
		/* Looping until a key is pressed */
		while(u8Flag == LOW)
     e70:	bb 20       	and	r11, r11
     e72:	91 f3       	breq	.-28     	; 0xe58 <Keypad_GetChar+0xa8>
				/* Clearing the value of the already set row */
				DIO_PinWrite(au8KeypadRows[u8RowIndex], HIGH);
			}
		}
		/* Mapping the pressed key to get its corresponding value */
		*pu8Data = Keypad_CharMapping(u8ColIndex, u8RowIndex);
     e74:	6c 2d       	mov	r22, r12
     e76:	8d 2d       	mov	r24, r13
     e78:	0e 94 65 06 	call	0xcca	; 0xcca <Keypad_CharMapping>
     e7c:	f4 01       	movw	r30, r8
     e7e:	80 83       	st	Z, r24
		enuRetVar = E_OK;
     e80:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
     e82:	0f 90       	pop	r0
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	9f 90       	pop	r9
     e98:	8f 90       	pop	r8
     e9a:	08 95       	ret

00000e9c <LCD_Delay>:
* Parameters	: u8DelayValue
* Return Value	: void
* Description  : Give the LCD controller sufficient time to receive commands
*************************************************************************************************/
static void LCD_Delay(uint16_t u16DelayValue)
{
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <LCD_Delay+0xa>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <LCD_Delay+0xc>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t u32LoopIndex;
	for(u32LoopIndex = 0; (u32LoopIndex < (u16DelayValue * 4)); u32LoopIndex++);
     eac:	19 82       	std	Y+1, r1	; 0x01
     eae:	1a 82       	std	Y+2, r1	; 0x02
     eb0:	1b 82       	std	Y+3, r1	; 0x03
     eb2:	1c 82       	std	Y+4, r1	; 0x04
     eb4:	0c c0       	rjmp	.+24     	; 0xece <LCD_Delay+0x32>
     eb6:	49 81       	ldd	r20, Y+1	; 0x01
     eb8:	5a 81       	ldd	r21, Y+2	; 0x02
     eba:	6b 81       	ldd	r22, Y+3	; 0x03
     ebc:	7c 81       	ldd	r23, Y+4	; 0x04
     ebe:	4f 5f       	subi	r20, 0xFF	; 255
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
     ec2:	6f 4f       	sbci	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	49 83       	std	Y+1, r20	; 0x01
     ec8:	5a 83       	std	Y+2, r21	; 0x02
     eca:	6b 83       	std	Y+3, r22	; 0x03
     ecc:	7c 83       	std	Y+4, r23	; 0x04
     ece:	ac 01       	movw	r20, r24
     ed0:	44 0f       	add	r20, r20
     ed2:	55 1f       	adc	r21, r21
     ed4:	44 0f       	add	r20, r20
     ed6:	55 1f       	adc	r21, r21
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	09 81       	ldd	r16, Y+1	; 0x01
     ede:	1a 81       	ldd	r17, Y+2	; 0x02
     ee0:	2b 81       	ldd	r18, Y+3	; 0x03
     ee2:	3c 81       	ldd	r19, Y+4	; 0x04
     ee4:	04 17       	cp	r16, r20
     ee6:	15 07       	cpc	r17, r21
     ee8:	26 07       	cpc	r18, r22
     eea:	37 07       	cpc	r19, r23
     eec:	20 f3       	brcs	.-56     	; 0xeb6 <LCD_Delay+0x1a>
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <LCD_SendCommand>:
* Parameters	: u8CommandId
* Return Value	: void
* Description  : Send a given Command to the LCD controller
*************************************************************************************************/
static void LCD_SendCommand(uint8_t u8CommandId)
{
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	c8 2f       	mov	r28, r24
	uint8_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

    /* Sending a LOW value on RS to select the u8Command mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, LOW);
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	85 e1       	ldi	r24, 0x15	; 21
     f0c:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	86 e1       	ldi	r24, 0x16	; 22
     f14:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
     f18:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     f1c:	88 30       	cpi	r24, 0x08	; 8
     f1e:	e1 f4       	brne	.+56     	; 0xf58 <LCD_SendCommand+0x58>
     f20:	0d c0       	rjmp	.+26     	; 0xf3c <LCD_SendCommand+0x3c>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
		{
			/* Getting the LSB of u8CommandId */
         u8DIOData = u8CommandId & 0x01;
     f22:	6c 2f       	mov	r22, r28
     f24:	61 70       	andi	r22, 0x01	; 1
         /* Converting from binary value into 8-bit value to be used in DIO_PinWrite() API *
          * e.g: u8DIOData = 0x01 -> u8DIOData = 0xFE + 1 = 0xFF (HIGH)                    *
          *      u8DIOData = 0x00 -> u8DIOData = 0xFF + 1 = 0x00 (LOW)                     */
			u8DIOData = (~u8DIOData)+ 1;
     f26:	61 95       	neg	r22
         /* Shifting the u8CommandId variable by one for the next loop iteration */
			u8CommandId = u8CommandId >> 1;
     f28:	c6 95       	lsr	r28
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
     f2a:	ed 2f       	mov	r30, r29
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	ee 5e       	subi	r30, 0xEE	; 238
     f30:	fc 4f       	sbci	r31, 0xFC	; 252
     f32:	80 81       	ld	r24, Z
     f34:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	/* Sending a LOW value on RW to specify a write to LCD */
   DIO_PinWrite(LCD_RW_PIN_NO, LOW);
   /* Sending the 8-bit u8Command on the 8 data pins once */
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f38:	df 5f       	subi	r29, 0xFF	; 255
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <LCD_SendCommand+0x3e>
     f3c:	d0 e0       	ldi	r29, 0x00	; 0
     f3e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     f42:	d8 17       	cp	r29, r24
     f44:	70 f3       	brcs	.-36     	; 0xf22 <LCD_SendCommand+0x22>
			u8CommandId = u8CommandId >> 1;
         /* Writing the selected bit on its corresponding LCD pin */
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	87 e1       	ldi	r24, 0x17	; 23
     f4a:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	87 e1       	ldi	r24, 0x17	; 23
     f52:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
     f56:	3e c0       	rjmp	.+124    	; 0xfd4 <LCD_SendCommand+0xd4>
	}
   /* Sending the 8-bit u8Command on the 4 data pins twice */
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	e1 f5       	brne	.+120    	; 0xfd4 <LCD_SendCommand+0xd4>
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
     f5c:	1c 2f       	mov	r17, r28
     f5e:	12 95       	swap	r17
     f60:	1f 70       	andi	r17, 0x0F	; 15
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f62:	d0 e0       	ldi	r29, 0x00	; 0
     f64:	0c c0       	rjmp	.+24     	; 0xf7e <LCD_SendCommand+0x7e>
		{
			u8DIOData = u8Command & 0x01;
     f66:	61 2f       	mov	r22, r17
     f68:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     f6a:	61 95       	neg	r22
			u8Command = u8Command >> 1;
     f6c:	16 95       	lsr	r17
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
     f6e:	ed 2f       	mov	r30, r29
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	e2 5f       	subi	r30, 0xF2	; 242
     f74:	fc 4f       	sbci	r31, 0xFC	; 252
     f76:	80 81       	ld	r24, Z
     f78:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		/* Specifying the 4 MSB of the u8CommandId */
      u8Command = (u8CommandId & 0xF0) >> 4;
      /* Sending the MSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f7c:	df 5f       	subi	r29, 0xFF	; 255
     f7e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     f82:	d8 17       	cp	r29, r24
     f84:	80 f3       	brcs	.-32     	; 0xf66 <LCD_SendCommand+0x66>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
      /* Triggering a falling edge on EN pin to send the MSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	87 e1       	ldi	r24, 0x17	; 23
     f8a:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	87 e1       	ldi	r24, 0x17	; 23
     f92:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
     f96:	cf 70       	andi	r28, 0x0F	; 15
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     f98:	d0 e0       	ldi	r29, 0x00	; 0
     f9a:	0c c0       	rjmp	.+24     	; 0xfb4 <LCD_SendCommand+0xb4>
		{
			u8DIOData = u8Command & 0x01;
     f9c:	6c 2f       	mov	r22, r28
     f9e:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
     fa0:	61 95       	neg	r22
			u8Command = u8Command >> 1;
     fa2:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
     fa4:	ed 2f       	mov	r30, r29
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	e2 5f       	subi	r30, 0xF2	; 242
     faa:	fc 4f       	sbci	r31, 0xFC	; 252
     fac:	80 81       	ld	r24, Z
     fae:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
      /* Specifying the 4 LSB of the u8CommandId*/
		u8Command = (u8CommandId & 0x0F);
      /* Sending the LSB on the 4-bit data pins */
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
     fb2:	df 5f       	subi	r29, 0xFF	; 255
     fb4:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     fb8:	d8 17       	cp	r29, r24
     fba:	80 f3       	brcs	.-32     	; 0xf9c <LCD_SendCommand+0x9c>
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
        /* Triggering a falling edge on EN pin to send the LSB of the u8Command */
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	87 e1       	ldi	r24, 0x17	; 23
     fc0:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	87 e1       	ldi	r24, 0x17	; 23
     fc8:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		LCD_Delay(200);
     fcc:	88 ec       	ldi	r24, 0xC8	; 200
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <LCD_Delay>
	}
	else
	{
	}
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	08 95       	ret

00000fdc <LCD_SendData>:
* Parameters	: u8DataId
* Return Value	: void
* Description  : Send a given Data to the LCD controller
*************************************************************************************************/
static void LCD_SendData(uint8_t u8DataId)
{
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	c8 2f       	mov	r28, r24
	uint16_t u8LoopIndex;
	uint8_t u8DIOData;
	uint8_t u8Command;

   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
     fe6:	61 e0       	ldi	r22, 0x01	; 1
     fe8:	85 e1       	ldi	r24, 0x15	; 21
     fea:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	86 e1       	ldi	r24, 0x16	; 22
     ff2:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
     ff6:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
     ffa:	88 30       	cpi	r24, 0x08	; 8
     ffc:	f9 f4       	brne	.+62     	; 0x103c <LCD_SendData+0x60>
     ffe:	0d c0       	rjmp	.+26     	; 0x101a <LCD_SendData+0x3e>
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
		{
			u8DIOData = u8DataId & 0x01;
    1000:	6c 2f       	mov	r22, r28
    1002:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
    1004:	61 95       	neg	r22
			u8DataId = u8DataId >> 1;
    1006:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
    1008:	f8 01       	movw	r30, r16
    100a:	ee 5e       	subi	r30, 0xEE	; 238
    100c:	fc 4f       	sbci	r31, 0xFC	; 252
    100e:	80 81       	ld	r24, Z
    1010:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
   /* Sending a HIGH value on RS to select the data mode on LCD */
	DIO_PinWrite(LCD_RS_PIN_NO, HIGH);
	DIO_PinWrite(LCD_RW_PIN_NO, LOW);
	if(enuLCDDataModeState == LCD_DATA_EIGHT_BIT_MODE)
	{
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1014:	0f 5f       	subi	r16, 0xFF	; 255
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	02 c0       	rjmp	.+4      	; 0x101e <LCD_SendData+0x42>
    101a:	00 e0       	ldi	r16, 0x00	; 0
    101c:	10 e0       	ldi	r17, 0x00	; 0
    101e:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	08 17       	cp	r16, r24
    1026:	19 07       	cpc	r17, r25
    1028:	58 f3       	brcs	.-42     	; 0x1000 <LCD_SendData+0x24>
			u8DIOData = u8DataId & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8DataId = u8DataId >> 1;
			DIO_PinWrite(au8LCDDataPins8BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	87 e1       	ldi	r24, 0x17	; 23
    102e:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	87 e1       	ldi	r24, 0x17	; 23
    1036:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
    103a:	40 c0       	rjmp	.+128    	; 0x10bc <LCD_SendData+0xe0>
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	f1 f5       	brne	.+124    	; 0x10bc <LCD_SendData+0xe0>
	{
		u8Command = (u8DataId & 0xF0) >> 4;
    1040:	dc 2f       	mov	r29, r28
    1042:	d2 95       	swap	r29
    1044:	df 70       	andi	r29, 0x0F	; 15
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1046:	00 e0       	ldi	r16, 0x00	; 0
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	0c c0       	rjmp	.+24     	; 0x1064 <LCD_SendData+0x88>
		{
			u8DIOData = u8Command & 0x01;
    104c:	6d 2f       	mov	r22, r29
    104e:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
    1050:	61 95       	neg	r22
			u8Command = u8Command >> 1;
    1052:	d6 95       	lsr	r29
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    1054:	f8 01       	movw	r30, r16
    1056:	e2 5f       	subi	r30, 0xF2	; 242
    1058:	fc 4f       	sbci	r31, 0xFC	; 252
    105a:	80 81       	ld	r24, Z
    105c:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
	}
	else if(enuLCDDataModeState == LCD_DATA_FOUR_BIT_MODE)
	{
		u8Command = (u8DataId & 0xF0) >> 4;
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1060:	0f 5f       	subi	r16, 0xFF	; 255
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	08 17       	cp	r16, r24
    106c:	19 07       	cpc	r17, r25
    106e:	70 f3       	brcs	.-36     	; 0x104c <LCD_SendData+0x70>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	87 e1       	ldi	r24, 0x17	; 23
    1074:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	87 e1       	ldi	r24, 0x17	; 23
    107c:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		u8Command = (u8DataId & 0x0F);
    1080:	cf 70       	andi	r28, 0x0F	; 15
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    1082:	00 e0       	ldi	r16, 0x00	; 0
    1084:	10 e0       	ldi	r17, 0x00	; 0
    1086:	0c c0       	rjmp	.+24     	; 0x10a0 <LCD_SendData+0xc4>
		{
			u8DIOData = u8Command & 0x01;
    1088:	6c 2f       	mov	r22, r28
    108a:	61 70       	andi	r22, 0x01	; 1
			u8DIOData = (~u8DIOData) + 1;
    108c:	61 95       	neg	r22
			u8Command = u8Command >> 1;
    108e:	c6 95       	lsr	r28
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
    1090:	f8 01       	movw	r30, r16
    1092:	e2 5f       	subi	r30, 0xF2	; 242
    1094:	fc 4f       	sbci	r31, 0xFC	; 252
    1096:	80 81       	ld	r24, Z
    1098:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
		u8Command = (u8DataId & 0x0F);
		for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataModeState; u8LoopIndex++)
    109c:	0f 5f       	subi	r16, 0xFF	; 255
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <enuLCDDataModeState>
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	08 17       	cp	r16, r24
    10a8:	19 07       	cpc	r17, r25
    10aa:	70 f3       	brcs	.-36     	; 0x1088 <LCD_SendData+0xac>
			u8DIOData = u8Command & 0x01;
			u8DIOData = (~u8DIOData) + 1;
			u8Command = u8Command >> 1;
			DIO_PinWrite(au8LCDDataPins4BitMode[u8LoopIndex], u8DIOData);
		}
		DIO_PinWrite(LCD_EN_PIN_NO, HIGH);
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	87 e1       	ldi	r24, 0x17	; 23
    10b0:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
		DIO_PinWrite(LCD_EN_PIN_NO, LOW);
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	87 e1       	ldi	r24, 0x17	; 23
    10b8:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
	}
	else
	{
	}
}
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	08 95       	ret

000010c6 <LCD_Init>:
* Parameters	: enuLCDDataMode, enuLCDCursorMode
* Return Value	: enuErrorStatus_t
* Description  : Initialize LCD module according to the configuration parameters
*************************************************************************************************/
enuErrorStatus_t LCD_Init(enuLCDDataMode_t enuLCDDataMode, enuLCDCursorMode_t enuLCDCursorMode)
{
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
	enuErrorStatus_t enuRetVar;
	uint8_t u8LoopIndex;
	
	if(((enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)		|| (enuLCDDataMode == LCD_DATA_EIGHT_BIT_MODE))	&&
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <LCD_Init+0x10>
    10d0:	88 30       	cpi	r24, 0x08	; 8
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <LCD_Init+0x10>
    10d4:	51 c0       	rjmp	.+162    	; 0x1178 <LCD_Init+0xb2>
		 (enuLCDCursorMode > LCD_CUROSR_MODE_MIN_VALUE)	&& (enuLCDCursorMode < LCD_CUROSR_MODE_MAX_VALUE))
    10d6:	62 30       	cpi	r22, 0x02	; 2
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <LCD_Init+0x16>
    10da:	50 c0       	rjmp	.+160    	; 0x117c <LCD_Init+0xb6>
    10dc:	16 2f       	mov	r17, r22
    10de:	c8 2f       	mov	r28, r24
	{
		enuLCDDataModeState = enuLCDDataMode;
    10e0:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <enuLCDDataModeState>
		/* Initializing RS pin as output */
		DIO_PinInit(LCD_RS_PIN_NO, OUTPUT, NO_CONNECTION);
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	85 e1       	ldi	r24, 0x15	; 21
    10ea:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
		/* Initializing RW pin as output */
		DIO_PinInit(LCD_RW_PIN_NO, OUTPUT, NO_CONNECTION);
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	86 e1       	ldi	r24, 0x16	; 22
    10f4:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
		/* Initializing EN pin as output */
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	87 e1       	ldi	r24, 0x17	; 23
    10fe:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
    1102:	c4 30       	cpi	r28, 0x04	; 4
    1104:	69 f0       	breq	.+26     	; 0x1120 <LCD_Init+0x5a>
    1106:	d0 e0       	ldi	r29, 0x00	; 0
    1108:	22 c0       	rjmp	.+68     	; 0x114e <LCD_Init+0x88>
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    110a:	ed 2f       	mov	r30, r29
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	e2 5f       	subi	r30, 0xF2	; 242
    1110:	fc 4f       	sbci	r31, 0xFC	; 252
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	80 81       	ld	r24, Z
    1118:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
		DIO_PinInit(LCD_EN_PIN_NO, OUTPUT, NO_CONNECTION);
		/* Selecting whether to interface LCD in 4-bit mode or 8-bit mode */
		if(enuLCDDataMode == LCD_DATA_FOUR_BIT_MODE)
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    111c:	df 5f       	subi	r29, 0xFF	; 255
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <LCD_Init+0x5c>
    1120:	d0 e0       	ldi	r29, 0x00	; 0
    1122:	dc 17       	cp	r29, r28
    1124:	90 f3       	brcs	.-28     	; 0x110a <LCD_Init+0x44>
			{
				DIO_PinInit(au8LCDDataPins4BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}
			/* Initializing the LCD module to work as 4-bit data mode */
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_ONE_COMMAND);
    1126:	83 e3       	ldi	r24, 0x33	; 51
    1128:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
			LCD_SendCommand(LCD_DATA_FOUR_BIT_MODE_CONFIG_TWO_COMMAND);
    112c:	82 e3       	ldi	r24, 0x32	; 50
    112e:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
    1132:	88 e2       	ldi	r24, 0x28	; 40
    1134:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <LCD_Init+0x92>
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
    113a:	ed 2f       	mov	r30, r29
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	ee 5e       	subi	r30, 0xEE	; 238
    1140:	fc 4f       	sbci	r31, 0xFC	; 252
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	80 81       	ld	r24, Z
    1148:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_FOUR_BIT_MODE_COMMAND);
		}
		else
		{
			/* Initializing all LCD data pins as outputs */
			for(u8LoopIndex = 0; u8LoopIndex < enuLCDDataMode; u8LoopIndex++)
    114c:	df 5f       	subi	r29, 0xFF	; 255
    114e:	dc 17       	cp	r29, r28
    1150:	a0 f3       	brcs	.-24     	; 0x113a <LCD_Init+0x74>
			{
				DIO_PinInit(au8LCDDataPins8BitMode[u8LoopIndex], OUTPUT, NO_CONNECTION);
			}		
			/* Initializing the LCD module to work as 8-bit data mode */
			LCD_SendCommand(LCD_TWO_LINES_FIVE_TIMES_SEVEN_MATRIX_EIGHT_BIT_MODE_COMMAND);
    1152:	88 e3       	ldi	r24, 0x38	; 56
    1154:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
		}
		/* Selecting whether to turn on/off the blinking cursor */
		if(enuLCDCursorMode == LCD_CURSOR_OFF)
    1158:	11 11       	cpse	r17, r1
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <LCD_Init+0x9e>
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_OFF_COMMAND);
    115c:	8c e0       	ldi	r24, 0x0C	; 12
    115e:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
    1162:	03 c0       	rjmp	.+6      	; 0x116a <LCD_Init+0xa4>
		}
		else
		{
			LCD_SendCommand(LCD_DISPLAY_ON_CURSOR_BLINKING_COMMAND);
    1164:	8e e0       	ldi	r24, 0x0E	; 14
    1166:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
		}
		/* Clearing the LCD screen before use */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
		enuLCDState = LCD_INIT_DONE;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <enuLCDState>
		enuRetVar = E_OK;
    1176:	03 c0       	rjmp	.+6      	; 0x117e <LCD_Init+0xb8>
	}
	else
	{
		enuRetVar = E_ERROR;
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	01 c0       	rjmp	.+2      	; 0x117e <LCD_Init+0xb8>
    117c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	08 95       	ret

00001186 <LCD_Clear>:
*************************************************************************************************/
enuErrorStatus_t LCD_Clear(void)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    1186:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <enuLCDState>
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	21 f4       	brne	.+8      	; 0x1196 <LCD_Clear+0x10>
	{
		/* Clearing the screen */
		LCD_SendCommand(LCD_CLEAR_DISPLAY_SCREEN_COMMAND);
    118e:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
		enuRetVar = E_OK;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    1196:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    1198:	08 95       	ret

0000119a <LCD_SetCursorPosition>:
*************************************************************************************************/
enuErrorStatus_t LCD_SetCursorPosition(uint8_t u8Horizontal, uint8_t u8Vertical)
{
	enuErrorStatus_t enuRetVar;
	
	if((u8Vertical == 0) && (enuLCDState == LCD_INIT_DONE))
    119a:	61 11       	cpse	r22, r1
    119c:	09 c0       	rjmp	.+18     	; 0x11b0 <LCD_SetCursorPosition+0x16>
    119e:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <enuLCDState>
    11a2:	91 30       	cpi	r25, 0x01	; 1
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <LCD_SetCursorPosition+0x16>
	{
		/* Moving the cursor in the selected place in the first row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_FIRST_LINE_COMMAND + u8Horizontal);
    11a6:	80 58       	subi	r24, 0x80	; 128
    11a8:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
		enuRetVar = E_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	08 95       	ret
	}
	else if((u8Vertical == 1) && (enuLCDState == LCD_INIT_DONE))
    11b0:	61 30       	cpi	r22, 0x01	; 1
    11b2:	49 f4       	brne	.+18     	; 0x11c6 <LCD_SetCursorPosition+0x2c>
    11b4:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <enuLCDState>
    11b8:	91 30       	cpi	r25, 0x01	; 1
    11ba:	39 f4       	brne	.+14     	; 0x11ca <LCD_SetCursorPosition+0x30>
	{
		/* Moving the cursor in the selected place in the second row */
		LCD_SendCommand(LCD_FORCE_CURSOR_TO_SECOND_LINE_COMMAND + u8Horizontal);
    11bc:	80 54       	subi	r24, 0x40	; 64
    11be:	0e 94 80 07 	call	0xf00	; 0xf00 <LCD_SendCommand>
		enuRetVar = E_OK;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret
    11ca:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    11cc:	08 95       	ret

000011ce <LCD_DisplayChar>:
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayChar(uint8_t u8Char)
{
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    11ce:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <enuLCDState>
    11d2:	91 30       	cpi	r25, 0x01	; 1
    11d4:	21 f4       	brne	.+8      	; 0x11de <LCD_DisplayChar+0x10>
	{
		/* Displaying the character data on the LCD */
      LCD_SendData(u8Char);
    11d6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <LCD_SendData>
		enuRetVar = E_OK;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    11de:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    11e0:	08 95       	ret

000011e2 <LCD_DisplayString>:
* Parameters	: pu8String
* Return Value	: enuErrorStatus_t
* Description  : Display a string on the LCD screen
*************************************************************************************************/
enuErrorStatus_t LCD_DisplayString(uint8_t* pu8String)
{
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	ec 01       	movw	r28, r24
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
    11e8:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <enuLCDState>
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	29 f0       	breq	.+10     	; 0x11fa <LCD_DisplayString+0x18>
		}
		enuRetVar = E_OK;
	}
	else
	{
		enuRetVar = E_ERROR;
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	07 c0       	rjmp	.+14     	; 0x1202 <LCD_DisplayString+0x20>
	if(enuLCDState == LCD_INIT_DONE)
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
		{
			LCD_SendData(*pu8String);
    11f4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <LCD_SendData>
			pu8String ++;
    11f8:	21 96       	adiw	r28, 0x01	; 1
	enuErrorStatus_t enuRetVar;
	
	if(enuLCDState == LCD_INIT_DONE)
	{
		/* Displaying the string data on the LCD */
		while((*pu8String) != '\0')
    11fa:	88 81       	ld	r24, Y
    11fc:	81 11       	cpse	r24, r1
    11fe:	fa cf       	rjmp	.-12     	; 0x11f4 <LCD_DisplayString+0x12>
		{
			LCD_SendData(*pu8String);
			pu8String ++;
		}
		enuRetVar = E_OK;
    1200:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;
}
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <LM35_Init>:
* Description  : Initialize the LM35 sensor with the ADC module
*************************************************************************************************/
void LM35_Init(void)
{
	/* Initializing the ADC module to start reading from the LM35 sensor */
	ADC_Init(ADC_AVCC, ADC_DISABLE_LEFT_ADJUST_RESULT, ADC_DIVISOR_FACTOR_IS_128);
    1208:	47 e0       	ldi	r20, 0x07	; 7
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <ADC_Init>
	enuLM35State = LM35_INIT_DONE;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <enuLM35State>
    1218:	08 95       	ret

0000121a <LM35_ReadTemperature>:
* Parameters	: pu8Temperature
* Return Value	: enuErrorStatus_t
* Description  : Read the value of the sensor's temperature
*************************************************************************************************/
enuErrorStatus_t LM35_ReadTemperature(uint8_t* pu8Temperature)
{
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	00 d0       	rcall	.+0      	; 0x1224 <LM35_ReadTemperature+0xa>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	9c 01       	movw	r18, r24
	enuErrorStatus_t enuRetVar;
	uint16_t u16ADCData;
	
	if(enuLM35State == LM35_INIT_DONE)
    122a:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <enuLM35State>
    122e:	91 30       	cpi	r25, 0x01	; 1
    1230:	f9 f4       	brne	.+62     	; 0x1270 <LM35_ReadTemperature+0x56>
    1232:	89 01       	movw	r16, r18
	{
		/* Reading the value of the ADC channel connected to the LM35 sensor */
		ADC_ReadChannel(LM35_ANALOG_DATA_PIN_NO, &u16ADCData);
    1234:	be 01       	movw	r22, r28
    1236:	6f 5f       	subi	r22, 0xFF	; 255
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <ADC_ReadChannel>
		/* Converting the ADC value from voltage to Celsius */
		*pu8Temperature = LM35_CALCULATE_TEMPERATURE(u16ADCData);
    1240:	69 81       	ldd	r22, Y+1	; 0x01
    1242:	7a 81       	ldd	r23, Y+2	; 0x02
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__floatunsisf>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e4       	ldi	r19, 0x40	; 64
    1250:	4c e9       	ldi	r20, 0x9C	; 156
    1252:	50 e4       	ldi	r21, 0x40	; 64
    1254:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e2       	ldi	r20, 0x20	; 32
    125e:	51 e4       	ldi	r21, 0x41	; 65
    1260:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__divsf3>
    1264:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fixunssfsi>
    1268:	f8 01       	movw	r30, r16
    126a:	60 83       	st	Z, r22
		enuRetVar = E_OK;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <LM35_ReadTemperature+0x58>
	}
	else
	{
		enuRetVar = E_ERROR;
    1270:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	08 95       	ret

00001280 <main>:



int main(void)
{
	APP_Init();
    1280:	0e 94 6e 03 	call	0x6dc	; 0x6dc <APP_Init>

	while(1)
	{
		APP_Update();
    1284:	0e 94 9d 03 	call	0x73a	; 0x73a <APP_Update>
    1288:	fd cf       	rjmp	.-6      	; 0x1284 <main+0x4>

0000128a <DIO_PinInit>:
	else
	{
		enuRetVar = E_ERROR;
	}
	return enuRetVar;	
}
    128a:	80 32       	cpi	r24, 0x20	; 32
    128c:	b0 f5       	brcc	.+108    	; 0x12fa <DIO_PinInit+0x70>
    128e:	62 30       	cpi	r22, 0x02	; 2
    1290:	b0 f5       	brcc	.+108    	; 0x12fe <DIO_PinInit+0x74>
    1292:	42 30       	cpi	r20, 0x02	; 2
    1294:	b0 f5       	brcc	.+108    	; 0x1302 <DIO_PinInit+0x78>
    1296:	e8 2f       	mov	r30, r24
    1298:	e6 95       	lsr	r30
    129a:	e6 95       	lsr	r30
    129c:	e6 95       	lsr	r30
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	e6 5e       	subi	r30, 0xE6	; 230
    12a2:	fc 4f       	sbci	r31, 0xFC	; 252
    12a4:	e0 81       	ld	r30, Z
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	df 01       	movw	r26, r30
    12aa:	5e 91       	ld	r21, -X
    12ac:	98 2f       	mov	r25, r24
    12ae:	97 70       	andi	r25, 0x07	; 7
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	09 2e       	mov	r0, r25
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_PinInit+0x32>
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_PinInit+0x2e>
    12c0:	20 95       	com	r18
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	09 2e       	mov	r0, r25
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_PinInit+0x42>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_PinInit+0x3e>
    12d0:	35 2f       	mov	r19, r21
    12d2:	32 23       	and	r19, r18
    12d4:	63 2b       	or	r22, r19
    12d6:	6c 93       	st	X, r22
    12d8:	30 81       	ld	r19, Z
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_PinInit+0x58>
    12de:	44 0f       	add	r20, r20
    12e0:	55 1f       	adc	r21, r21
    12e2:	9a 95       	dec	r25
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_PinInit+0x54>
    12e6:	23 23       	and	r18, r19
    12e8:	42 2b       	or	r20, r18
    12ea:	40 83       	st	Z, r20
    12ec:	e8 2f       	mov	r30, r24
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	ee 5d       	subi	r30, 0xDE	; 222
    12f2:	f8 4f       	sbci	r31, 0xF8	; 248
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 83       	st	Z, r24
    12f8:	08 95       	ret
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	08 95       	ret
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	08 95       	ret

00001306 <DIO_PinWrite>:
    1306:	e8 2f       	mov	r30, r24
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	ee 5d       	subi	r30, 0xDE	; 222
    130c:	f8 4f       	sbci	r31, 0xF8	; 248
    130e:	90 81       	ld	r25, Z
    1310:	91 30       	cpi	r25, 0x01	; 1
    1312:	f9 f4       	brne	.+62     	; 0x1352 <DIO_PinWrite+0x4c>
    1314:	e8 2f       	mov	r30, r24
    1316:	e6 95       	lsr	r30
    1318:	e6 95       	lsr	r30
    131a:	e6 95       	lsr	r30
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	e6 5e       	subi	r30, 0xE6	; 230
    1320:	fc 4f       	sbci	r31, 0xFC	; 252
    1322:	e0 81       	ld	r30, Z
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	90 81       	ld	r25, Z
    1328:	87 70       	andi	r24, 0x07	; 7
    132a:	21 e0       	ldi	r18, 0x01	; 1
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	08 2e       	mov	r0, r24
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <DIO_PinWrite+0x30>
    1332:	22 0f       	add	r18, r18
    1334:	33 1f       	adc	r19, r19
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <DIO_PinWrite+0x2c>
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_PinWrite+0x3c>
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	8a 95       	dec	r24
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_PinWrite+0x38>
    1346:	20 95       	com	r18
    1348:	29 23       	and	r18, r25
    134a:	62 2b       	or	r22, r18
    134c:	60 83       	st	Z, r22
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	08 95       	ret
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	08 95       	ret

00001356 <DIO_PinRead>:
*************************************************************************************************/
enuErrorStatus_t DIO_PinRead(enuDIOPinNo_t enuDIOPinNo, uint8_t* pu8PinData)
{
	enuErrorStatus_t enuRetVar;
	
	if(aenuDIOPinState[enuDIOPinNo] == DIO_INIT_DONE)
    1356:	e8 2f       	mov	r30, r24
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	ee 5d       	subi	r30, 0xDE	; 222
    135c:	f8 4f       	sbci	r31, 0xF8	; 248
    135e:	90 81       	ld	r25, Z
    1360:	91 30       	cpi	r25, 0x01	; 1
    1362:	19 f5       	brne	.+70     	; 0x13aa <DIO_PinRead+0x54>
	{
		/* Reading the value from the corresponding pin */
		*pu8PinData = GET_BIT(PINx_R(DIO_PORT_NO(enuDIOPinNo)), DIO_PIN_NO(enuDIOPinNo));
    1364:	e8 2f       	mov	r30, r24
    1366:	e6 95       	lsr	r30
    1368:	e6 95       	lsr	r30
    136a:	e6 95       	lsr	r30
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	e6 5e       	subi	r30, 0xE6	; 230
    1370:	fc 4f       	sbci	r31, 0xFC	; 252
    1372:	e0 81       	ld	r30, Z
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	32 97       	sbiw	r30, 0x02	; 2
    1378:	90 81       	ld	r25, Z
    137a:	87 70       	andi	r24, 0x07	; 7
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	08 2e       	mov	r0, r24
    1384:	02 c0       	rjmp	.+4      	; 0x138a <DIO_PinRead+0x34>
    1386:	44 0f       	add	r20, r20
    1388:	55 1f       	adc	r21, r21
    138a:	0a 94       	dec	r0
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <DIO_PinRead+0x30>
    138e:	29 2f       	mov	r18, r25
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	24 23       	and	r18, r20
    1394:	35 23       	and	r19, r21
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_PinRead+0x48>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_PinRead+0x44>
    13a2:	fb 01       	movw	r30, r22
    13a4:	40 83       	st	Z, r20
		enuRetVar = E_OK;
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;	
}
    13ac:	08 95       	ret

000013ae <ADC_Init>:
*************************************************************************************************/
enuErrorStatus_t ADC_Init(enuADCReferenceSelectionBits_t enuADCReferenceSelectionBits, enuADCLeftAdjustResult_t enuADCLeftAdjustResult, enuADCPrescalerSelectBits_t enuADCPrescalerSelectBits)
{
	enuErrorStatus_t enuRetVar;
    
	if((enuADCReferenceSelectionBits > ADC_REFERENCE_SELECTION_BITS_MIN_VALUE)				&& (enuADCReferenceSelectionBits < ADC_REFERENCE_SELECTION_BITS_MAX_VALUE) &&
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	48 f5       	brcc	.+82     	; 0x1404 <ADC_Init+0x56>
		(enuADCReferenceSelectionBits != ADC_REFERENCE_SELECTION_BITS_NOT_VALID_VALUE)	&& (enuADCLeftAdjustResult > ADC_LEFT_ADJUST_RESULT_MIN_VALUE)					&& 
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	49 f1       	breq	.+82     	; 0x1408 <ADC_Init+0x5a>
		(enuADCLeftAdjustResult < ADC_LEFT_ADJUST_RESULT_MAX_VALUE)								&& (enuADCPrescalerSelectBits > ADC_PRESCALER_SELECT_BITS_MIN_VALUE)			&& 
    13b6:	62 30       	cpi	r22, 0x02	; 2
    13b8:	48 f5       	brcc	.+82     	; 0x140c <ADC_Init+0x5e>
    13ba:	48 30       	cpi	r20, 0x08	; 8
    13bc:	48 f5       	brcc	.+82     	; 0x1410 <ADC_Init+0x62>
		(enuADCPrescalerSelectBits < ADC_PRESCALER_SELECT_BITS_MAX_VALUE))
	{	   
		/* Selecting whether the voltage reference is AREF, AVCC or Internal VREF */
		ASSIGN_BITS(ADMUX_R, ADC_REFERENCE_SELECT_START_BIT, enuADCReferenceSelectionBits, ADC_REFERENCE_SELECT_MASK);
    13be:	27 b1       	in	r18, 0x07	; 7
    13c0:	30 e4       	ldi	r19, 0x40	; 64
    13c2:	83 9f       	mul	r24, r19
    13c4:	c0 01       	movw	r24, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	92 2f       	mov	r25, r18
    13ca:	9f 73       	andi	r25, 0x3F	; 63
    13cc:	89 2b       	or	r24, r25
    13ce:	87 b9       	out	0x07, r24	; 7
		/* Selecting whether the output is right adjusted or left adjusted */
		ASSIGN_BIT(ADMUX_R, ADC_LEFT_ADJUST_RESULT_BIT, enuADCLeftAdjustResult);
    13d0:	27 b1       	in	r18, 0x07	; 7
    13d2:	30 e2       	ldi	r19, 0x20	; 32
    13d4:	63 9f       	mul	r22, r19
    13d6:	c0 01       	movw	r24, r0
    13d8:	11 24       	eor	r1, r1
    13da:	92 2f       	mov	r25, r18
    13dc:	9f 7d       	andi	r25, 0xDF	; 223
    13de:	89 2b       	or	r24, r25
    13e0:	87 b9       	out	0x07, r24	; 7
		/* Saving the state of left adjust result into a temporary variable to be used in the other API */
		enuADCLeftAdjustResultState = enuADCLeftAdjustResult;
    13e2:	60 93 42 07 	sts	0x0742, r22	; 0x800742 <enuADCLeftAdjustResultState>
		/* Selecting the value of the prescaler divisor factor */
		ASSIGN_BITS(ADCSRA_R, ADC_PRESCALER_SELECT_START_BIT, ADC_PRESCALER_SELECT_VALUE(enuADCPrescalerSelectBits), ADC_PRESCALER_SELECT_MASK);
    13e6:	86 b1       	in	r24, 0x06	; 6
    13e8:	88 7f       	andi	r24, 0xF8	; 248
    13ea:	4f 5f       	subi	r20, 0xFF	; 255
    13ec:	48 2b       	or	r20, r24
    13ee:	46 b9       	out	0x06, r20	; 6
		/* Enabling the ADC module */
		SET_BIT(ADCSRA_R, ADC_MODULE_EN_BIT);
    13f0:	86 b1       	in	r24, 0x06	; 6
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	86 b9       	out	0x06, r24	; 6
      CLEAR_BIT(ADCSRA_R,3);
    13f6:	86 b1       	in	r24, 0x06	; 6
    13f8:	87 7f       	andi	r24, 0xF7	; 247
    13fa:	86 b9       	out	0x06, r24	; 6
		enuADCState = ADC_INIT_DONE;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <enuADCState>
		enuRetVar = E_OK;
    1402:	08 95       	ret
	}
	else
	{
		enuRetVar = E_ERROR;
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	08 95       	ret
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	08 95       	ret
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	08 95       	ret
    1410:	80 e0       	ldi	r24, 0x00	; 0
	}
	return enuRetVar;
}
    1412:	08 95       	ret

00001414 <ADC_ReadChannel>:
*************************************************************************************************/
enuErrorStatus_t ADC_ReadChannel(enuADCAnalogChannel_t enuAnalogChannel, uint16_t* pu16Data)
{
	enuErrorStatus_t enuRetVar;
	
   if(enuADCState == ADC_INIT_DONE)
    1414:	90 91 43 07 	lds	r25, 0x0743	; 0x800743 <enuADCState>
    1418:	91 30       	cpi	r25, 0x01	; 1
    141a:	51 f5       	brne	.+84     	; 0x1470 <ADC_ReadChannel+0x5c>
   {
	   /* Selecting the analog channel(s) used (Single or Differential Input) */
	   ASSIGN_BITS(ADMUX_R, ADC_CHANNEL_SELECT_START_BIT, enuAnalogChannel, ADC_CHANNEL_SELECT_MASK);
    141c:	97 b1       	in	r25, 0x07	; 7
    141e:	90 7e       	andi	r25, 0xE0	; 224
    1420:	89 2b       	or	r24, r25
    1422:	87 b9       	out	0x07, r24	; 7
	   /* Starting the conversion process */
	   SET_BIT(ADCSRA_R, ADC_START_CONVERSION_EN_BIT);
    1424:	86 b1       	in	r24, 0x06	; 6
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	86 b9       	out	0x06, r24	; 6
		/* Waiting for the ADC conversion until it has successfully been completely */
		while(IS_BIT_CLEAR(ADCSRA_R, ADC_CONVERSION_COMPLETE_FLAG_BIT));
    142a:	34 9b       	sbis	0x06, 4	; 6
    142c:	fe cf       	rjmp	.-4      	; 0x142a <ADC_ReadChannel+0x16>
		/* Reading the value from the corresponding ADC channel */
      
		if(enuADCLeftAdjustResultState == ADC_DISABLE_LEFT_ADJUST_RESULT)
    142e:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <enuADCLeftAdjustResultState>
    1432:	81 11       	cpse	r24, r1
    1434:	0c c0       	rjmp	.+24     	; 0x144e <ADC_ReadChannel+0x3a>
		{
			*pu16Data = ADC_VALUE_RIGHT_ADJUSTED;
    1436:	24 b1       	in	r18, 0x04	; 4
    1438:	85 b1       	in	r24, 0x05	; 5
    143a:	83 70       	andi	r24, 0x03	; 3
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	98 2f       	mov	r25, r24
    1440:	88 27       	eor	r24, r24
    1442:	82 2b       	or	r24, r18
    1444:	fb 01       	movw	r30, r22
    1446:	91 83       	std	Z+1, r25	; 0x01
    1448:	80 83       	st	Z, r24
		}
		else
		{
			*pu16Data = ADC_VALUE_LEFT_ADJUSTED;
		}
	   enuRetVar = E_OK;
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	08 95       	ret
		{
			*pu16Data = ADC_VALUE_RIGHT_ADJUSTED;
		}
		else
		{
			*pu16Data = ADC_VALUE_LEFT_ADJUSTED;
    144e:	24 b1       	in	r18, 0x04	; 4
    1450:	22 95       	swap	r18
    1452:	26 95       	lsr	r18
    1454:	26 95       	lsr	r18
    1456:	23 70       	andi	r18, 0x03	; 3
    1458:	85 b1       	in	r24, 0x05	; 5
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	82 2b       	or	r24, r18
    1466:	fb 01       	movw	r30, r22
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
		}
	   enuRetVar = E_OK;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	08 95       	ret
   }
   else
   {
	   enuRetVar = E_ERROR;
    1470:	80 e0       	ldi	r24, 0x00	; 0
   }
   return enuRetVar;	
} 
    1472:	08 95       	ret

00001474 <EXTINT_Init>:
enuEXTINTErrorStatus EXTINT_Init(enuEXTINTNum enuInterruptNum)
{
	enuEXTINTErrorStatus enuStatus = EXTINT_ERROR;

	//Enable peripheral interrupt enable
	switch(enuInterruptNum)
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	41 f0       	breq	.+16     	; 0x1488 <EXTINT_Init+0x14>
    1478:	18 f0       	brcs	.+6      	; 0x1480 <EXTINT_Init+0xc>
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	49 f0       	breq	.+18     	; 0x1490 <EXTINT_Init+0x1c>
    147e:	0b c0       	rjmp	.+22     	; 0x1496 <EXTINT_Init+0x22>
	{
	case EXTINT_INT0:
		SET_BIT(GICR_R, INT0_B);
    1480:	8b b7       	in	r24, 0x3b	; 59
    1482:	80 64       	ori	r24, 0x40	; 64
    1484:	8b bf       	out	0x3b, r24	; 59
		break;
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <EXTINT_Init+0x22>
	case EXTINT_INT1:
		SET_BIT(GICR_R, INT1_B);
    1488:	8b b7       	in	r24, 0x3b	; 59
    148a:	80 68       	ori	r24, 0x80	; 128
    148c:	8b bf       	out	0x3b, r24	; 59
		break;
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <EXTINT_Init+0x22>
	case EXTINT_INT2:
		SET_BIT(GICR_R, INT2_B);
    1490:	8b b7       	in	r24, 0x3b	; 59
    1492:	80 62       	ori	r24, 0x20	; 32
    1494:	8b bf       	out	0x3b, r24	; 59
		break;
	default:
		break;
	}
    //Enable GIE
	SET_BIT(SREG_R, SREG_I_B);
    1496:	8f b7       	in	r24, 0x3f	; 63
    1498:	80 68       	ori	r24, 0x80	; 128
    149a:	8f bf       	out	0x3f, r24	; 63

	enuStatus = EXTINT_OK;

	return enuStatus;
}
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	08 95       	ret

000014a0 <EXTINT_SetSenseMode>:
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetSenseMode(enuEXTINTSenseControl enuSenseMode, enuEXTINTNum enuInterruptNum)
{
	enuEXTINTErrorStatus enuStatus = EXTINT_ERROR;

    if (enuInterruptNum==EXTINT_INT0)
    14a0:	61 11       	cpse	r22, r1
    14a2:	24 c0       	rjmp	.+72     	; 0x14ec <EXTINT_SetSenseMode+0x4c>
    {
		switch(enuSenseMode)
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	d9 f0       	breq	.+54     	; 0x14de <EXTINT_SetSenseMode+0x3e>
    14a8:	28 f0       	brcs	.+10     	; 0x14b4 <EXTINT_SetSenseMode+0x14>
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	89 f0       	breq	.+34     	; 0x14d0 <EXTINT_SetSenseMode+0x30>
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	41 f0       	breq	.+16     	; 0x14c2 <EXTINT_SetSenseMode+0x22>
    14b2:	4f c0       	rjmp	.+158    	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,0);
    14b4:	85 b7       	in	r24, 0x35	; 53
    14b6:	8e 7f       	andi	r24, 0xFE	; 254
    14b8:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,1);
    14ba:	85 b7       	in	r24, 0x35	; 53
    14bc:	8d 7f       	andi	r24, 0xFD	; 253
    14be:	85 bf       	out	0x35, r24	; 53
		  break;
    14c0:	48 c0       	rjmp	.+144    	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		 SET_BIT(MCUCR_R,0);
    14c2:	85 b7       	in	r24, 0x35	; 53
    14c4:	81 60       	ori	r24, 0x01	; 1
    14c6:	85 bf       	out	0x35, r24	; 53
		 SET_BIT(MCUCR_R,1);
    14c8:	85 b7       	in	r24, 0x35	; 53
    14ca:	82 60       	ori	r24, 0x02	; 2
    14cc:	85 bf       	out	0x35, r24	; 53
		  break;
    14ce:	41 c0       	rjmp	.+130    	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,0);
    14d0:	85 b7       	in	r24, 0x35	; 53
    14d2:	8e 7f       	andi	r24, 0xFE	; 254
    14d4:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,1);
    14d6:	85 b7       	in	r24, 0x35	; 53
    14d8:	82 60       	ori	r24, 0x02	; 2
    14da:	85 bf       	out	0x35, r24	; 53
		  break;
    14dc:	3a c0       	rjmp	.+116    	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,0);
    14de:	85 b7       	in	r24, 0x35	; 53
    14e0:	81 60       	ori	r24, 0x01	; 1
    14e2:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,1);
    14e4:	85 b7       	in	r24, 0x35	; 53
    14e6:	8d 7f       	andi	r24, 0xFD	; 253
    14e8:	85 bf       	out	0x35, r24	; 53
		  break;
    14ea:	33 c0       	rjmp	.+102    	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT1)
    14ec:	61 30       	cpi	r22, 0x01	; 1
    14ee:	21 f5       	brne	.+72     	; 0x1538 <EXTINT_SetSenseMode+0x98>
    {
		switch(enuSenseMode)
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	d9 f0       	breq	.+54     	; 0x152a <EXTINT_SetSenseMode+0x8a>
    14f4:	28 f0       	brcs	.+10     	; 0x1500 <EXTINT_SetSenseMode+0x60>
    14f6:	82 30       	cpi	r24, 0x02	; 2
    14f8:	89 f0       	breq	.+34     	; 0x151c <EXTINT_SetSenseMode+0x7c>
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	41 f0       	breq	.+16     	; 0x150e <EXTINT_SetSenseMode+0x6e>
    14fe:	29 c0       	rjmp	.+82     	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_LOW_MODE :
		  CLEAR_BIT(MCUCR_R,2);
    1500:	85 b7       	in	r24, 0x35	; 53
    1502:	8b 7f       	andi	r24, 0xFB	; 251
    1504:	85 bf       	out	0x35, r24	; 53
	      CLEAR_BIT(MCUCR_R,3);
    1506:	85 b7       	in	r24, 0x35	; 53
    1508:	87 7f       	andi	r24, 0xF7	; 247
    150a:	85 bf       	out	0x35, r24	; 53
		  break;
    150c:	22 c0       	rjmp	.+68     	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		case EXT_RAISING_MODE :
		  SET_BIT(MCUCR_R,2);
    150e:	85 b7       	in	r24, 0x35	; 53
    1510:	84 60       	ori	r24, 0x04	; 4
    1512:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,3);
    1514:	85 b7       	in	r24, 0x35	; 53
    1516:	88 60       	ori	r24, 0x08	; 8
    1518:	85 bf       	out	0x35, r24	; 53
		  break;
    151a:	1b c0       	rjmp	.+54     	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
		  CLEAR_BIT(MCUCR_R,2);
    151c:	85 b7       	in	r24, 0x35	; 53
    151e:	8b 7f       	andi	r24, 0xFB	; 251
    1520:	85 bf       	out	0x35, r24	; 53
		  SET_BIT(MCUCR_R,3);
    1522:	85 b7       	in	r24, 0x35	; 53
    1524:	88 60       	ori	r24, 0x08	; 8
    1526:	85 bf       	out	0x35, r24	; 53
		  break;
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		case EXT_CHANGE_MODE :
		  SET_BIT(MCUCR_R,2);
    152a:	85 b7       	in	r24, 0x35	; 53
    152c:	84 60       	ori	r24, 0x04	; 4
    152e:	85 bf       	out	0x35, r24	; 53
		  CLEAR_BIT(MCUCR_R,3);
    1530:	85 b7       	in	r24, 0x35	; 53
    1532:	87 7f       	andi	r24, 0xF7	; 247
    1534:	85 bf       	out	0x35, r24	; 53
		  break;
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		default:
			break;
		}
    }
    else if (enuInterruptNum==EXTINT_INT2)
    1538:	62 30       	cpi	r22, 0x02	; 2
    153a:	59 f4       	brne	.+22     	; 0x1552 <EXTINT_SetSenseMode+0xb2>
    {
		switch(enuSenseMode)
    153c:	82 30       	cpi	r24, 0x02	; 2
    153e:	31 f0       	breq	.+12     	; 0x154c <EXTINT_SetSenseMode+0xac>
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	39 f4       	brne	.+14     	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		{
		case EXT_RAISING_MODE :
			SET_BIT(MCUCR_R,6);
    1544:	85 b7       	in	r24, 0x35	; 53
    1546:	80 64       	ori	r24, 0x40	; 64
    1548:	85 bf       	out	0x35, r24	; 53
			break;
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <EXTINT_SetSenseMode+0xb2>
		case EXT_FAILLING_MODE :
			CLEAR_BIT(MCUCR_R,6);
    154c:	85 b7       	in	r24, 0x35	; 53
    154e:	8f 7b       	andi	r24, 0xBF	; 191
    1550:	85 bf       	out	0x35, r24	; 53
    }

	enuStatus = EXTINT_OK;

	return enuStatus;
}
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	08 95       	ret

00001556 <EXTINT_SetCallBack>:
* Return Value    : enuEXTINTErrorStatus - For error handling if the user input an invalid parameter
* Description     : A function to set the sense mode of the External interrupt
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
   if (pCallBack==NULLPTR)
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	c1 f0       	breq	.+48     	; 0x158a <EXTINT_SetCallBack+0x34>
   {
      return EXTINT_ERROR;
   }
	if(enuInterruptNum==EXTINT_INT0)
    155a:	61 11       	cpse	r22, r1
    155c:	06 c0       	rjmp	.+12     	; 0x156a <EXTINT_SetCallBack+0x14>
		pEXTINT0CallBack = pCallBack;
    155e:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <pEXTINT0CallBack+0x1>
    1562:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <pEXTINT0CallBack>
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	08 95       	ret
   {
      return EXTINT_ERROR;
   }
	if(enuInterruptNum==EXTINT_INT0)
		pEXTINT0CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT1)
    156a:	61 30       	cpi	r22, 0x01	; 1
    156c:	31 f4       	brne	.+12     	; 0x157a <EXTINT_SetCallBack+0x24>
		pEXTINT1CallBack = pCallBack;
    156e:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <pEXTINT1CallBack+0x1>
    1572:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <pEXTINT1CallBack>
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	08 95       	ret
   }
	if(enuInterruptNum==EXTINT_INT0)
		pEXTINT0CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
    157a:	62 30       	cpi	r22, 0x02	; 2
    157c:	41 f4       	brne	.+16     	; 0x158e <EXTINT_SetCallBack+0x38>
		pEXTINT2CallBack = pCallBack;
    157e:	90 93 4e 07 	sts	0x074E, r25	; 0x80074e <pEXTINT2CallBack+0x1>
    1582:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <pEXTINT2CallBack>

	return EXTINT_OK;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	08 95       	ret
************************************************************************************************/
enuEXTINTErrorStatus EXTINT_SetCallBack(void(*pCallBack)(void), enuEXTINTNum enuInterruptNum)
{
   if (pCallBack==NULLPTR)
   {
      return EXTINT_ERROR;
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	08 95       	ret
	else if(enuInterruptNum==EXTINT_INT1)
		pEXTINT1CallBack = pCallBack;
	else if(enuInterruptNum==EXTINT_INT2)
		pEXTINT2CallBack = pCallBack;

	return EXTINT_OK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
}
    1590:	08 95       	ret

00001592 <__vector_1>:
/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void) __attribute__ ((signal,used));

/* ISR to handle the External Interrupt Request 0 */
void __vector_1(void)
{
    1592:	1f 92       	push	r1
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	0f 92       	push	r0
    159a:	11 24       	eor	r1, r1
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	ef 93       	push	r30
    15b2:	ff 93       	push	r31
   if (pEXTINT0CallBack!=NULLPTR)
    15b4:	e0 91 4f 07 	lds	r30, 0x074F	; 0x80074f <pEXTINT0CallBack>
    15b8:	f0 91 50 07 	lds	r31, 0x0750	; 0x800750 <pEXTINT0CallBack+0x1>
    15bc:	30 97       	sbiw	r30, 0x00	; 0
    15be:	09 f0       	breq	.+2      	; 0x15c2 <__vector_1+0x30>
   {
      pEXTINT0CallBack();
    15c0:	09 95       	icall
   }
}
    15c2:	ff 91       	pop	r31
    15c4:	ef 91       	pop	r30
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <__vector_2>:

/* ISR to handle the External Interrupt Request 1 */
void __vector_2(void)
{
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	2f 93       	push	r18
    15f0:	3f 93       	push	r19
    15f2:	4f 93       	push	r20
    15f4:	5f 93       	push	r21
    15f6:	6f 93       	push	r22
    15f8:	7f 93       	push	r23
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	af 93       	push	r26
    1600:	bf 93       	push	r27
    1602:	ef 93       	push	r30
    1604:	ff 93       	push	r31
   if (pEXTINT1CallBack!=NULLPTR)
    1606:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <pEXTINT1CallBack>
    160a:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <pEXTINT1CallBack+0x1>
    160e:	30 97       	sbiw	r30, 0x00	; 0
    1610:	09 f0       	breq	.+2      	; 0x1614 <__vector_2+0x30>
   {
      pEXTINT1CallBack();
    1612:	09 95       	icall
   }
}
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	0f 90       	pop	r0
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	0f 90       	pop	r0
    1632:	1f 90       	pop	r1
    1634:	18 95       	reti

00001636 <__vector_3>:

/* ISR to handle the External Interrupt Request 2 */
void __vector_3(void)
{
    1636:	1f 92       	push	r1
    1638:	0f 92       	push	r0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	2f 93       	push	r18
    1642:	3f 93       	push	r19
    1644:	4f 93       	push	r20
    1646:	5f 93       	push	r21
    1648:	6f 93       	push	r22
    164a:	7f 93       	push	r23
    164c:	8f 93       	push	r24
    164e:	9f 93       	push	r25
    1650:	af 93       	push	r26
    1652:	bf 93       	push	r27
    1654:	ef 93       	push	r30
    1656:	ff 93       	push	r31
   if (pEXTINT2CallBack!=NULLPTR)
    1658:	e0 91 4d 07 	lds	r30, 0x074D	; 0x80074d <pEXTINT2CallBack>
    165c:	f0 91 4e 07 	lds	r31, 0x074E	; 0x80074e <pEXTINT2CallBack+0x1>
    1660:	30 97       	sbiw	r30, 0x00	; 0
    1662:	09 f0       	breq	.+2      	; 0x1666 <__vector_3+0x30>
   {
      pEXTINT2CallBack();
    1664:	09 95       	icall
   }
}
    1666:	ff 91       	pop	r31
    1668:	ef 91       	pop	r30
    166a:	bf 91       	pop	r27
    166c:	af 91       	pop	r26
    166e:	9f 91       	pop	r25
    1670:	8f 91       	pop	r24
    1672:	7f 91       	pop	r23
    1674:	6f 91       	pop	r22
    1676:	5f 91       	pop	r21
    1678:	4f 91       	pop	r20
    167a:	3f 91       	pop	r19
    167c:	2f 91       	pop	r18
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	0f 90       	pop	r0
    1684:	1f 90       	pop	r1
    1686:	18 95       	reti

00001688 <I2C_GetStatus>:
      return E_ERROR;
   }
   //set the callback function to the sent function pointer
   I2C_Callback=local_fptr;
   return E_OK;
}
    1688:	81 b1       	in	r24, 0x01	; 1
    168a:	88 7f       	andi	r24, 0xF8	; 248
    168c:	08 95       	ret

0000168e <I2C_Init>:
    168e:	81 b1       	in	r24, 0x01	; 1
    1690:	8c 7f       	andi	r24, 0xFC	; 252
    1692:	81 b9       	out	0x01, r24	; 1
    1694:	81 b1       	in	r24, 0x01	; 1
    1696:	83 60       	ori	r24, 0x03	; 3
    1698:	81 b9       	out	0x01, r24	; 1
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	64 e0       	ldi	r22, 0x04	; 4
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <I2C_Init+0x24>
    16a2:	9b 01       	movw	r18, r22
    16a4:	22 9f       	mul	r18, r18
    16a6:	b0 01       	movw	r22, r0
    16a8:	23 9f       	mul	r18, r19
    16aa:	70 0d       	add	r23, r0
    16ac:	70 0d       	add	r23, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	b0 f3       	brcs	.-20     	; 0x16a2 <I2C_Init+0x14>
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	80 e4       	ldi	r24, 0x40	; 64
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__udivmodhi4>
    16c2:	60 b9       	out	0x00, r22	; 0
    16c4:	85 e0       	ldi	r24, 0x05	; 5
    16c6:	82 b9       	out	0x02, r24	; 2
    16c8:	86 b7       	in	r24, 0x36	; 54
    16ca:	80 64       	ori	r24, 0x40	; 64
    16cc:	86 bf       	out	0x36, r24	; 54
    16ce:	86 b7       	in	r24, 0x36	; 54
    16d0:	80 68       	ori	r24, 0x80	; 128
    16d2:	86 bf       	out	0x36, r24	; 54
    16d4:	86 b7       	in	r24, 0x36	; 54
    16d6:	84 60       	ori	r24, 0x04	; 4
    16d8:	86 bf       	out	0x36, r24	; 54
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	08 95       	ret

000016de <I2C_Start>:
    16de:	84 ea       	ldi	r24, 0xA4	; 164
    16e0:	86 bf       	out	0x36, r24	; 54
    16e2:	06 b6       	in	r0, 0x36	; 54
    16e4:	07 fe       	sbrs	r0, 7
    16e6:	fd cf       	rjmp	.-6      	; 0x16e2 <I2C_Start+0x4>
    16e8:	0e 94 44 0b 	call	0x1688	; 0x1688 <I2C_GetStatus>
    16ec:	88 30       	cpi	r24, 0x08	; 8
    16ee:	11 f4       	brne	.+4      	; 0x16f4 <I2C_Start+0x16>
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	08 95       	ret
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	08 95       	ret

000016f8 <I2C_Repeated_Start>:
    16f8:	84 ea       	ldi	r24, 0xA4	; 164
    16fa:	86 bf       	out	0x36, r24	; 54
    16fc:	06 b6       	in	r0, 0x36	; 54
    16fe:	07 fe       	sbrs	r0, 7
    1700:	fd cf       	rjmp	.-6      	; 0x16fc <I2C_Repeated_Start+0x4>
    1702:	0e 94 44 0b 	call	0x1688	; 0x1688 <I2C_GetStatus>
    1706:	80 31       	cpi	r24, 0x10	; 16
    1708:	11 f0       	breq	.+4      	; 0x170e <I2C_Repeated_Start+0x16>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	08 95       	ret
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	08 95       	ret

00001712 <I2C_Stop>:
    1712:	84 e9       	ldi	r24, 0x94	; 148
    1714:	86 bf       	out	0x36, r24	; 54
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	08 95       	ret

0000171a <I2C_SendAddressFrame>:
    171a:	62 30       	cpi	r22, 0x02	; 2
    171c:	f0 f4       	brcc	.+60     	; 0x175a <I2C_SendAddressFrame+0x40>
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	86 2b       	or	r24, r22
    1726:	83 b9       	out	0x03, r24	; 3
    1728:	84 e8       	ldi	r24, 0x84	; 132
    172a:	86 bf       	out	0x36, r24	; 54
    172c:	06 b6       	in	r0, 0x36	; 54
    172e:	07 fe       	sbrs	r0, 7
    1730:	fd cf       	rjmp	.-6      	; 0x172c <I2C_SendAddressFrame+0x12>
    1732:	61 30       	cpi	r22, 0x01	; 1
    1734:	41 f4       	brne	.+16     	; 0x1746 <I2C_SendAddressFrame+0x2c>
    1736:	0e 94 44 0b 	call	0x1688	; 0x1688 <I2C_GetStatus>
    173a:	80 34       	cpi	r24, 0x40	; 64
    173c:	81 f0       	breq	.+32     	; 0x175e <I2C_SendAddressFrame+0x44>
    173e:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2C_Stop>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	08 95       	ret
    1746:	61 11       	cpse	r22, r1
    1748:	0c c0       	rjmp	.+24     	; 0x1762 <I2C_SendAddressFrame+0x48>
    174a:	0e 94 44 0b 	call	0x1688	; 0x1688 <I2C_GetStatus>
    174e:	88 31       	cpi	r24, 0x18	; 24
    1750:	51 f0       	breq	.+20     	; 0x1766 <I2C_SendAddressFrame+0x4c>
    1752:	0e 94 89 0b 	call	0x1712	; 0x1712 <I2C_Stop>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	08 95       	ret
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	08 95       	ret
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	08 95       	ret
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	08 95       	ret
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	08 95       	ret

0000176a <I2C_SendDataFrame>:
    176a:	06 b6       	in	r0, 0x36	; 54
    176c:	07 fe       	sbrs	r0, 7
    176e:	fd cf       	rjmp	.-6      	; 0x176a <I2C_SendDataFrame>
    1770:	83 b9       	out	0x03, r24	; 3
    1772:	84 e8       	ldi	r24, 0x84	; 132
    1774:	86 bf       	out	0x36, r24	; 54
    1776:	06 b6       	in	r0, 0x36	; 54
    1778:	07 fe       	sbrs	r0, 7
    177a:	fd cf       	rjmp	.-6      	; 0x1776 <I2C_SendDataFrame+0xc>
    177c:	0e 94 44 0b 	call	0x1688	; 0x1688 <I2C_GetStatus>
    1780:	88 32       	cpi	r24, 0x28	; 40
    1782:	31 f0       	breq	.+12     	; 0x1790 <I2C_SendDataFrame+0x26>
    1784:	88 3b       	cpi	r24, 0xB8	; 184
    1786:	31 f0       	breq	.+12     	; 0x1794 <I2C_SendDataFrame+0x2a>
    1788:	88 3c       	cpi	r24, 0xC8	; 200
    178a:	31 f4       	brne	.+12     	; 0x1798 <I2C_SendDataFrame+0x2e>
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	08 95       	ret
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	08 95       	ret
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	08 95       	ret
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	08 95       	ret

0000179c <I2C_RecieveDataFrame>:
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	39 f1       	breq	.+78     	; 0x17f4 <I2C_RecieveDataFrame+0x58>
    17a6:	06 b6       	in	r0, 0x36	; 54
    17a8:	07 fe       	sbrs	r0, 7
    17aa:	fd cf       	rjmp	.-6      	; 0x17a6 <I2C_RecieveDataFrame+0xa>
    17ac:	66 23       	and	r22, r22
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <I2C_RecieveDataFrame+0x1a>
    17b0:	61 30       	cpi	r22, 0x01	; 1
    17b2:	21 f0       	breq	.+8      	; 0x17bc <I2C_RecieveDataFrame+0x20>
    17b4:	21 c0       	rjmp	.+66     	; 0x17f8 <I2C_RecieveDataFrame+0x5c>
    17b6:	24 ec       	ldi	r18, 0xC4	; 196
    17b8:	26 bf       	out	0x36, r18	; 54
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <I2C_RecieveDataFrame+0x24>
    17bc:	24 e8       	ldi	r18, 0x84	; 132
    17be:	26 bf       	out	0x36, r18	; 54
    17c0:	06 b6       	in	r0, 0x36	; 54
    17c2:	07 fe       	sbrs	r0, 7
    17c4:	fd cf       	rjmp	.-6      	; 0x17c0 <I2C_RecieveDataFrame+0x24>
    17c6:	c6 2f       	mov	r28, r22
    17c8:	8c 01       	movw	r16, r24
    17ca:	0e 94 44 0b 	call	0x1688	; 0x1688 <I2C_GetStatus>
    17ce:	cc 23       	and	r28, r28
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <I2C_RecieveDataFrame+0x3c>
    17d2:	c1 30       	cpi	r28, 0x01	; 1
    17d4:	31 f0       	breq	.+12     	; 0x17e2 <I2C_RecieveDataFrame+0x46>
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <I2C_RecieveDataFrame+0x4e>
    17d8:	80 35       	cpi	r24, 0x50	; 80
    17da:	39 f0       	breq	.+14     	; 0x17ea <I2C_RecieveDataFrame+0x4e>
    17dc:	80 38       	cpi	r24, 0x80	; 128
    17de:	71 f4       	brne	.+28     	; 0x17fc <I2C_RecieveDataFrame+0x60>
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <I2C_RecieveDataFrame+0x4e>
    17e2:	88 35       	cpi	r24, 0x58	; 88
    17e4:	11 f0       	breq	.+4      	; 0x17ea <I2C_RecieveDataFrame+0x4e>
    17e6:	88 38       	cpi	r24, 0x88	; 136
    17e8:	59 f4       	brne	.+22     	; 0x1800 <I2C_RecieveDataFrame+0x64>
    17ea:	83 b1       	in	r24, 0x03	; 3
    17ec:	f8 01       	movw	r30, r16
    17ee:	80 83       	st	Z, r24
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	07 c0       	rjmp	.+14     	; 0x1802 <I2C_RecieveDataFrame+0x66>
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <I2C_RecieveDataFrame+0x66>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <I2C_RecieveDataFrame+0x66>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <I2C_RecieveDataFrame+0x66>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	cf 91       	pop	r28
    1804:	1f 91       	pop	r17
    1806:	0f 91       	pop	r16
    1808:	08 95       	ret

0000180a <__vector_19>:
* Parameters (out): void
* Return value: void
* Description: I2C event interrupt service routine
************************************************************************************/
ISR(TWI_vect)
{
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
   //check if callback function pointer points to a valid function
   if(I2C_Callback != NULLPTR)
    182c:	e0 91 44 07 	lds	r30, 0x0744	; 0x800744 <I2C_Callback>
    1830:	f0 91 45 07 	lds	r31, 0x0745	; 0x800745 <I2C_Callback+0x1>
    1834:	30 97       	sbiw	r30, 0x00	; 0
    1836:	09 f0       	breq	.+2      	; 0x183a <__vector_19+0x30>
   {
      //call the callback function
      I2C_Callback();
    1838:	09 95       	icall
   }
}
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <SPI_initMaster>:
    	SPI_sendData(*(pu8Data+u8i));
    }

    SPI_sendData('\0');
//    SPI_sendData('\n');
}
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	61 e0       	ldi	r22, 0x01	; 1
    1860:	8c e0       	ldi	r24, 0x0C	; 12
    1862:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	8d e0       	ldi	r24, 0x0D	; 13
    186c:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	8e e0       	ldi	r24, 0x0E	; 14
    1876:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
    187a:	40 e0       	ldi	r20, 0x00	; 0
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	8f e0       	ldi	r24, 0x0F	; 15
    1880:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_PinInit>
    1884:	85 e5       	ldi	r24, 0x55	; 85
    1886:	8d b9       	out	0x0d, r24	; 13
    1888:	08 95       	ret

0000188a <SPI_init>:
    188a:	0e 94 2e 0c 	call	0x185c	; 0x185c <SPI_initMaster>
    188e:	08 95       	ret

00001890 <SPI_receiveData>:
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	8c e0       	ldi	r24, 0x0C	; 12
    189a:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
    189e:	88 81       	ld	r24, Y
    18a0:	8f b9       	out	0x0f, r24	; 15
    18a2:	77 9b       	sbis	0x0e, 7	; 14
    18a4:	fe cf       	rjmp	.-4      	; 0x18a2 <SPI_receiveData+0x12>
    18a6:	8f b1       	in	r24, 0x0f	; 15
    18a8:	88 83       	st	Y, r24
    18aa:	61 e0       	ldi	r22, 0x01	; 1
    18ac:	8c e0       	ldi	r24, 0x0C	; 12
    18ae:	0e 94 83 09 	call	0x1306	; 0x1306 <DIO_PinWrite>
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <SPI_receiveString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	7c 01       	movw	r14, r24
    18c6:	d6 2f       	mov	r29, r22
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    18c8:	c0 e0       	ldi	r28, 0x00	; 0
    18ca:	0b c0       	rjmp	.+22     	; 0x18e2 <SPI_receiveString+0x2a>
    {

    	SPI_receiveData(&pu8Data[u8i]);
    18cc:	87 01       	movw	r16, r14
    18ce:	0c 0f       	add	r16, r28
    18d0:	11 1d       	adc	r17, r1
    18d2:	c8 01       	movw	r24, r16
    18d4:	0e 94 48 0c 	call	0x1890	; 0x1890 <SPI_receiveData>
        if (*(pu8Data+u8i)==0)
    18d8:	f8 01       	movw	r30, r16
    18da:	80 81       	ld	r24, Z
    18dc:	88 23       	and	r24, r24
    18de:	19 f0       	breq	.+6      	; 0x18e6 <SPI_receiveString+0x2e>
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *pu8Data, uint8_t u8BufferMaxSize)
{
    uint8_t u8i;
    for (u8i=0; u8i < u8BufferMaxSize;u8i++)
    18e0:	cf 5f       	subi	r28, 0xFF	; 255
    18e2:	cd 17       	cp	r28, r29
    18e4:	98 f3       	brcs	.-26     	; 0x18cc <SPI_receiveString+0x14>
           break;
        }
    }
    //end the string with null
    //pu8Data[u8i]='\0';
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	08 95       	ret

000018f4 <UART_Init>:
	//check if the sent pointer points to a valid position
	if (local_fptr== NULLPTR)     return E_ERROR;
	//if so, store the pointer address in the global pointer to function
	RXC_Callback=local_fptr;
	return E_OK;
}
    18f4:	10 bc       	out	0x20, r1	; 32
    18f6:	83 e3       	ldi	r24, 0x33	; 51
    18f8:	89 b9       	out	0x09, r24	; 9
    18fa:	88 e1       	ldi	r24, 0x18	; 24
    18fc:	8a b9       	out	0x0a, r24	; 10
    18fe:	86 e8       	ldi	r24, 0x86	; 134
    1900:	80 bd       	out	0x20, r24	; 32
    1902:	80 b5       	in	r24, 0x20	; 32
    1904:	8f 77       	andi	r24, 0x7F	; 127
    1906:	80 bd       	out	0x20, r24	; 32
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    190e:	08 95       	ret

00001910 <UART_SendData>:
    1910:	98 2f       	mov	r25, r24
    1912:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    1916:	88 23       	and	r24, r24
    1918:	41 f0       	breq	.+16     	; 0x192a <UART_SendData+0x1a>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    1920:	5d 9b       	sbis	0x0b, 5	; 11
    1922:	fe cf       	rjmp	.-4      	; 0x1920 <UART_SendData+0x10>
    1924:	9c b9       	out	0x0c, r25	; 12
    1926:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    192a:	08 95       	ret

0000192c <UART_ReceiveData>:
    192c:	fc 01       	movw	r30, r24
    192e:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    1932:	88 23       	and	r24, r24
    1934:	59 f0       	breq	.+22     	; 0x194c <UART_ReceiveData+0x20>
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    193c:	5f 9b       	sbis	0x0b, 7	; 11
    193e:	fe cf       	rjmp	.-4      	; 0x193c <UART_ReceiveData+0x10>
    1940:	2c b1       	in	r18, 0x0c	; 12
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	31 83       	std	Z+1, r19	; 0x01
    1946:	20 83       	st	Z, r18
    1948:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    194c:	08 95       	ret

0000194e <UART_SendString>:
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	7c 01       	movw	r14, r24
    195a:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    195e:	88 23       	and	r24, r24
    1960:	b1 f0       	breq	.+44     	; 0x198e <UART_SendString+0x40>
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    1968:	c0 e0       	ldi	r28, 0x00	; 0
    196a:	0d c0       	rjmp	.+26     	; 0x1986 <UART_SendString+0x38>
    196c:	87 01       	movw	r16, r14
    196e:	0c 0f       	add	r16, r28
    1970:	11 1d       	adc	r17, r1
    1972:	f8 01       	movw	r30, r16
    1974:	80 81       	ld	r24, Z
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 88 0c 	call	0x1910	; 0x1910 <UART_SendData>
    197c:	f8 01       	movw	r30, r16
    197e:	90 81       	ld	r25, Z
    1980:	99 23       	and	r25, r25
    1982:	19 f0       	breq	.+6      	; 0x198a <UART_SendString+0x3c>
    1984:	cf 5f       	subi	r28, 0xFF	; 255
    1986:	cf 3f       	cpi	r28, 0xFF	; 255
    1988:	89 f7       	brne	.-30     	; 0x196c <UART_SendString+0x1e>
    198a:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    198e:	cf 91       	pop	r28
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	08 95       	ret

0000199a <UART_ReceiveString>:
    199a:	ef 92       	push	r14
    199c:	ff 92       	push	r15
    199e:	0f 93       	push	r16
    19a0:	1f 93       	push	r17
    19a2:	cf 93       	push	r28
    19a4:	df 93       	push	r29
    19a6:	7c 01       	movw	r14, r24
    19a8:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    19ac:	88 23       	and	r24, r24
    19ae:	d1 f0       	breq	.+52     	; 0x19e4 <UART_ReceiveString+0x4a>
    19b0:	d6 2f       	mov	r29, r22
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <gError>
    19b8:	c0 e0       	ldi	r28, 0x00	; 0
    19ba:	10 c0       	rjmp	.+32     	; 0x19dc <UART_ReceiveString+0x42>
    19bc:	87 01       	movw	r16, r14
    19be:	0c 0f       	add	r16, r28
    19c0:	11 1d       	adc	r17, r1
    19c2:	c8 01       	movw	r24, r16
    19c4:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_ReceiveData>
    19c8:	f8 01       	movw	r30, r16
    19ca:	90 81       	ld	r25, Z
    19cc:	9d 30       	cpi	r25, 0x0D	; 13
    19ce:	11 f0       	breq	.+4      	; 0x19d4 <UART_ReceiveString+0x3a>
    19d0:	9a 30       	cpi	r25, 0x0A	; 10
    19d2:	19 f4       	brne	.+6      	; 0x19da <UART_ReceiveString+0x40>
    19d4:	f8 01       	movw	r30, r16
    19d6:	10 82       	st	Z, r1
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <UART_ReceiveString+0x46>
    19da:	cf 5f       	subi	r28, 0xFF	; 255
    19dc:	cd 17       	cp	r28, r29
    19de:	70 f3       	brcs	.-36     	; 0x19bc <UART_ReceiveString+0x22>
    19e0:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <gError>
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	ff 90       	pop	r15
    19ee:	ef 90       	pop	r14
    19f0:	08 95       	ret

000019f2 <__vector_13>:


/* ISRs----------------------------------------------------------*/

ISR(UART_RX_vect)
{
    19f2:	1f 92       	push	r1
    19f4:	0f 92       	push	r0
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	0f 92       	push	r0
    19fa:	11 24       	eor	r1, r1
    19fc:	2f 93       	push	r18
    19fe:	3f 93       	push	r19
    1a00:	4f 93       	push	r20
    1a02:	5f 93       	push	r21
    1a04:	6f 93       	push	r22
    1a06:	7f 93       	push	r23
    1a08:	8f 93       	push	r24
    1a0a:	9f 93       	push	r25
    1a0c:	af 93       	push	r26
    1a0e:	bf 93       	push	r27
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (RXC_Callback!=NULLPTR)
    1a14:	e0 91 48 07 	lds	r30, 0x0748	; 0x800748 <RXC_Callback>
    1a18:	f0 91 49 07 	lds	r31, 0x0749	; 0x800749 <RXC_Callback+0x1>
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <__vector_13+0x30>
	{
		//call the function
		RXC_Callback();
    1a20:	09 95       	icall
	}
}
    1a22:	ff 91       	pop	r31
    1a24:	ef 91       	pop	r30
    1a26:	bf 91       	pop	r27
    1a28:	af 91       	pop	r26
    1a2a:	9f 91       	pop	r25
    1a2c:	8f 91       	pop	r24
    1a2e:	7f 91       	pop	r23
    1a30:	6f 91       	pop	r22
    1a32:	5f 91       	pop	r21
    1a34:	4f 91       	pop	r20
    1a36:	3f 91       	pop	r19
    1a38:	2f 91       	pop	r18
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <__vector_15>:
ISR(UART_TX_vect)
{
    1a44:	1f 92       	push	r1
    1a46:	0f 92       	push	r0
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	0f 92       	push	r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	2f 93       	push	r18
    1a50:	3f 93       	push	r19
    1a52:	4f 93       	push	r20
    1a54:	5f 93       	push	r21
    1a56:	6f 93       	push	r22
    1a58:	7f 93       	push	r23
    1a5a:	8f 93       	push	r24
    1a5c:	9f 93       	push	r25
    1a5e:	af 93       	push	r26
    1a60:	bf 93       	push	r27
    1a62:	ef 93       	push	r30
    1a64:	ff 93       	push	r31
	//if the global pointer to function points to a valid position
	if (TXC_Callback!=NULLPTR)
    1a66:	e0 91 46 07 	lds	r30, 0x0746	; 0x800746 <TXC_Callback>
    1a6a:	f0 91 47 07 	lds	r31, 0x0747	; 0x800747 <TXC_Callback+0x1>
    1a6e:	30 97       	sbiw	r30, 0x00	; 0
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <__vector_15+0x30>
	{
		//call the function
		TXC_Callback();
    1a72:	09 95       	icall
	}
}
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__subsf3>:
    1a96:	50 58       	subi	r21, 0x80	; 128

00001a98 <__addsf3>:
    1a98:	bb 27       	eor	r27, r27
    1a9a:	aa 27       	eor	r26, r26
    1a9c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__addsf3x>
    1aa0:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_round>
    1aa4:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscA>
    1aa8:	38 f0       	brcs	.+14     	; 0x1ab8 <__addsf3+0x20>
    1aaa:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_pscB>
    1aae:	20 f0       	brcs	.+8      	; 0x1ab8 <__addsf3+0x20>
    1ab0:	39 f4       	brne	.+14     	; 0x1ac0 <__addsf3+0x28>
    1ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab4:	19 f4       	brne	.+6      	; 0x1abc <__addsf3+0x24>
    1ab6:	26 f4       	brtc	.+8      	; 0x1ac0 <__addsf3+0x28>
    1ab8:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_nan>
    1abc:	0e f4       	brtc	.+2      	; 0x1ac0 <__addsf3+0x28>
    1abe:	e0 95       	com	r30
    1ac0:	e7 fb       	bst	r30, 7
    1ac2:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>

00001ac6 <__addsf3x>:
    1ac6:	e9 2f       	mov	r30, r25
    1ac8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_split3>
    1acc:	58 f3       	brcs	.-42     	; 0x1aa4 <__addsf3+0xc>
    1ace:	ba 17       	cp	r27, r26
    1ad0:	62 07       	cpc	r22, r18
    1ad2:	73 07       	cpc	r23, r19
    1ad4:	84 07       	cpc	r24, r20
    1ad6:	95 07       	cpc	r25, r21
    1ad8:	20 f0       	brcs	.+8      	; 0x1ae2 <__addsf3x+0x1c>
    1ada:	79 f4       	brne	.+30     	; 0x1afa <__addsf3x+0x34>
    1adc:	a6 f5       	brtc	.+104    	; 0x1b46 <__addsf3x+0x80>
    1ade:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__fp_zero>
    1ae2:	0e f4       	brtc	.+2      	; 0x1ae6 <__addsf3x+0x20>
    1ae4:	e0 95       	com	r30
    1ae6:	0b 2e       	mov	r0, r27
    1ae8:	ba 2f       	mov	r27, r26
    1aea:	a0 2d       	mov	r26, r0
    1aec:	0b 01       	movw	r0, r22
    1aee:	b9 01       	movw	r22, r18
    1af0:	90 01       	movw	r18, r0
    1af2:	0c 01       	movw	r0, r24
    1af4:	ca 01       	movw	r24, r20
    1af6:	a0 01       	movw	r20, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	ff 27       	eor	r31, r31
    1afc:	59 1b       	sub	r21, r25
    1afe:	99 f0       	breq	.+38     	; 0x1b26 <__addsf3x+0x60>
    1b00:	59 3f       	cpi	r21, 0xF9	; 249
    1b02:	50 f4       	brcc	.+20     	; 0x1b18 <__addsf3x+0x52>
    1b04:	50 3e       	cpi	r21, 0xE0	; 224
    1b06:	68 f1       	brcs	.+90     	; 0x1b62 <__addsf3x+0x9c>
    1b08:	1a 16       	cp	r1, r26
    1b0a:	f0 40       	sbci	r31, 0x00	; 0
    1b0c:	a2 2f       	mov	r26, r18
    1b0e:	23 2f       	mov	r18, r19
    1b10:	34 2f       	mov	r19, r20
    1b12:	44 27       	eor	r20, r20
    1b14:	58 5f       	subi	r21, 0xF8	; 248
    1b16:	f3 cf       	rjmp	.-26     	; 0x1afe <__addsf3x+0x38>
    1b18:	46 95       	lsr	r20
    1b1a:	37 95       	ror	r19
    1b1c:	27 95       	ror	r18
    1b1e:	a7 95       	ror	r26
    1b20:	f0 40       	sbci	r31, 0x00	; 0
    1b22:	53 95       	inc	r21
    1b24:	c9 f7       	brne	.-14     	; 0x1b18 <__addsf3x+0x52>
    1b26:	7e f4       	brtc	.+30     	; 0x1b46 <__addsf3x+0x80>
    1b28:	1f 16       	cp	r1, r31
    1b2a:	ba 0b       	sbc	r27, r26
    1b2c:	62 0b       	sbc	r22, r18
    1b2e:	73 0b       	sbc	r23, r19
    1b30:	84 0b       	sbc	r24, r20
    1b32:	ba f0       	brmi	.+46     	; 0x1b62 <__addsf3x+0x9c>
    1b34:	91 50       	subi	r25, 0x01	; 1
    1b36:	a1 f0       	breq	.+40     	; 0x1b60 <__addsf3x+0x9a>
    1b38:	ff 0f       	add	r31, r31
    1b3a:	bb 1f       	adc	r27, r27
    1b3c:	66 1f       	adc	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	c2 f7       	brpl	.-16     	; 0x1b34 <__addsf3x+0x6e>
    1b44:	0e c0       	rjmp	.+28     	; 0x1b62 <__addsf3x+0x9c>
    1b46:	ba 0f       	add	r27, r26
    1b48:	62 1f       	adc	r22, r18
    1b4a:	73 1f       	adc	r23, r19
    1b4c:	84 1f       	adc	r24, r20
    1b4e:	48 f4       	brcc	.+18     	; 0x1b62 <__addsf3x+0x9c>
    1b50:	87 95       	ror	r24
    1b52:	77 95       	ror	r23
    1b54:	67 95       	ror	r22
    1b56:	b7 95       	ror	r27
    1b58:	f7 95       	ror	r31
    1b5a:	9e 3f       	cpi	r25, 0xFE	; 254
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <__addsf3x+0x9a>
    1b5e:	b0 cf       	rjmp	.-160    	; 0x1ac0 <__addsf3+0x28>
    1b60:	93 95       	inc	r25
    1b62:	88 0f       	add	r24, r24
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <__addsf3x+0xa2>
    1b66:	99 27       	eor	r25, r25
    1b68:	ee 0f       	add	r30, r30
    1b6a:	97 95       	ror	r25
    1b6c:	87 95       	ror	r24
    1b6e:	08 95       	ret

00001b70 <__divsf3>:
    1b70:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__divsf3x>
    1b74:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_round>
    1b78:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_pscB>
    1b7c:	58 f0       	brcs	.+22     	; 0x1b94 <__divsf3+0x24>
    1b7e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscA>
    1b82:	40 f0       	brcs	.+16     	; 0x1b94 <__divsf3+0x24>
    1b84:	29 f4       	brne	.+10     	; 0x1b90 <__divsf3+0x20>
    1b86:	5f 3f       	cpi	r21, 0xFF	; 255
    1b88:	29 f0       	breq	.+10     	; 0x1b94 <__divsf3+0x24>
    1b8a:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1b8e:	51 11       	cpse	r21, r1
    1b90:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1b94:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_nan>

00001b98 <__divsf3x>:
    1b98:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_split3>
    1b9c:	68 f3       	brcs	.-38     	; 0x1b78 <__divsf3+0x8>

00001b9e <__divsf3_pse>:
    1b9e:	99 23       	and	r25, r25
    1ba0:	b1 f3       	breq	.-20     	; 0x1b8e <__divsf3+0x1e>
    1ba2:	55 23       	and	r21, r21
    1ba4:	91 f3       	breq	.-28     	; 0x1b8a <__divsf3+0x1a>
    1ba6:	95 1b       	sub	r25, r21
    1ba8:	55 0b       	sbc	r21, r21
    1baa:	bb 27       	eor	r27, r27
    1bac:	aa 27       	eor	r26, r26
    1bae:	62 17       	cp	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	84 07       	cpc	r24, r20
    1bb4:	38 f0       	brcs	.+14     	; 0x1bc4 <__divsf3_pse+0x26>
    1bb6:	9f 5f       	subi	r25, 0xFF	; 255
    1bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bba:	22 0f       	add	r18, r18
    1bbc:	33 1f       	adc	r19, r19
    1bbe:	44 1f       	adc	r20, r20
    1bc0:	aa 1f       	adc	r26, r26
    1bc2:	a9 f3       	breq	.-22     	; 0x1bae <__divsf3_pse+0x10>
    1bc4:	35 d0       	rcall	.+106    	; 0x1c30 <__divsf3_pse+0x92>
    1bc6:	0e 2e       	mov	r0, r30
    1bc8:	3a f0       	brmi	.+14     	; 0x1bd8 <__divsf3_pse+0x3a>
    1bca:	e0 e8       	ldi	r30, 0x80	; 128
    1bcc:	32 d0       	rcall	.+100    	; 0x1c32 <__divsf3_pse+0x94>
    1bce:	91 50       	subi	r25, 0x01	; 1
    1bd0:	50 40       	sbci	r21, 0x00	; 0
    1bd2:	e6 95       	lsr	r30
    1bd4:	00 1c       	adc	r0, r0
    1bd6:	ca f7       	brpl	.-14     	; 0x1bca <__divsf3_pse+0x2c>
    1bd8:	2b d0       	rcall	.+86     	; 0x1c30 <__divsf3_pse+0x92>
    1bda:	fe 2f       	mov	r31, r30
    1bdc:	29 d0       	rcall	.+82     	; 0x1c30 <__divsf3_pse+0x92>
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	88 1f       	adc	r24, r24
    1be4:	bb 1f       	adc	r27, r27
    1be6:	26 17       	cp	r18, r22
    1be8:	37 07       	cpc	r19, r23
    1bea:	48 07       	cpc	r20, r24
    1bec:	ab 07       	cpc	r26, r27
    1bee:	b0 e8       	ldi	r27, 0x80	; 128
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <__divsf3_pse+0x56>
    1bf2:	bb 0b       	sbc	r27, r27
    1bf4:	80 2d       	mov	r24, r0
    1bf6:	bf 01       	movw	r22, r30
    1bf8:	ff 27       	eor	r31, r31
    1bfa:	93 58       	subi	r25, 0x83	; 131
    1bfc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfe:	3a f0       	brmi	.+14     	; 0x1c0e <__divsf3_pse+0x70>
    1c00:	9e 3f       	cpi	r25, 0xFE	; 254
    1c02:	51 05       	cpc	r21, r1
    1c04:	78 f0       	brcs	.+30     	; 0x1c24 <__divsf3_pse+0x86>
    1c06:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1c0a:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1c0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c10:	e4 f3       	brlt	.-8      	; 0x1c0a <__divsf3_pse+0x6c>
    1c12:	98 3e       	cpi	r25, 0xE8	; 232
    1c14:	d4 f3       	brlt	.-12     	; 0x1c0a <__divsf3_pse+0x6c>
    1c16:	86 95       	lsr	r24
    1c18:	77 95       	ror	r23
    1c1a:	67 95       	ror	r22
    1c1c:	b7 95       	ror	r27
    1c1e:	f7 95       	ror	r31
    1c20:	9f 5f       	subi	r25, 0xFF	; 255
    1c22:	c9 f7       	brne	.-14     	; 0x1c16 <__divsf3_pse+0x78>
    1c24:	88 0f       	add	r24, r24
    1c26:	91 1d       	adc	r25, r1
    1c28:	96 95       	lsr	r25
    1c2a:	87 95       	ror	r24
    1c2c:	97 f9       	bld	r25, 7
    1c2e:	08 95       	ret
    1c30:	e1 e0       	ldi	r30, 0x01	; 1
    1c32:	66 0f       	add	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	bb 1f       	adc	r27, r27
    1c3a:	62 17       	cp	r22, r18
    1c3c:	73 07       	cpc	r23, r19
    1c3e:	84 07       	cpc	r24, r20
    1c40:	ba 07       	cpc	r27, r26
    1c42:	20 f0       	brcs	.+8      	; 0x1c4c <__divsf3_pse+0xae>
    1c44:	62 1b       	sub	r22, r18
    1c46:	73 0b       	sbc	r23, r19
    1c48:	84 0b       	sbc	r24, r20
    1c4a:	ba 0b       	sbc	r27, r26
    1c4c:	ee 1f       	adc	r30, r30
    1c4e:	88 f7       	brcc	.-30     	; 0x1c32 <__divsf3_pse+0x94>
    1c50:	e0 95       	com	r30
    1c52:	08 95       	ret

00001c54 <__fixsfsi>:
    1c54:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fixunssfsi>
    1c58:	68 94       	set
    1c5a:	b1 11       	cpse	r27, r1
    1c5c:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1c60:	08 95       	ret

00001c62 <__fixunssfsi>:
    1c62:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fp_splitA>
    1c66:	88 f0       	brcs	.+34     	; 0x1c8a <__fixunssfsi+0x28>
    1c68:	9f 57       	subi	r25, 0x7F	; 127
    1c6a:	98 f0       	brcs	.+38     	; 0x1c92 <__fixunssfsi+0x30>
    1c6c:	b9 2f       	mov	r27, r25
    1c6e:	99 27       	eor	r25, r25
    1c70:	b7 51       	subi	r27, 0x17	; 23
    1c72:	b0 f0       	brcs	.+44     	; 0x1ca0 <__fixunssfsi+0x3e>
    1c74:	e1 f0       	breq	.+56     	; 0x1cae <__fixunssfsi+0x4c>
    1c76:	66 0f       	add	r22, r22
    1c78:	77 1f       	adc	r23, r23
    1c7a:	88 1f       	adc	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	1a f0       	brmi	.+6      	; 0x1c86 <__fixunssfsi+0x24>
    1c80:	ba 95       	dec	r27
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__fixunssfsi+0x14>
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <__fixunssfsi+0x4c>
    1c86:	b1 30       	cpi	r27, 0x01	; 1
    1c88:	91 f0       	breq	.+36     	; 0x1cae <__fixunssfsi+0x4c>
    1c8a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__fp_zero>
    1c8e:	b1 e0       	ldi	r27, 0x01	; 1
    1c90:	08 95       	ret
    1c92:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__fp_zero>
    1c96:	67 2f       	mov	r22, r23
    1c98:	78 2f       	mov	r23, r24
    1c9a:	88 27       	eor	r24, r24
    1c9c:	b8 5f       	subi	r27, 0xF8	; 248
    1c9e:	39 f0       	breq	.+14     	; 0x1cae <__fixunssfsi+0x4c>
    1ca0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ca2:	cc f3       	brlt	.-14     	; 0x1c96 <__fixunssfsi+0x34>
    1ca4:	86 95       	lsr	r24
    1ca6:	77 95       	ror	r23
    1ca8:	67 95       	ror	r22
    1caa:	b3 95       	inc	r27
    1cac:	d9 f7       	brne	.-10     	; 0x1ca4 <__fixunssfsi+0x42>
    1cae:	3e f4       	brtc	.+14     	; 0x1cbe <__fixunssfsi+0x5c>
    1cb0:	90 95       	com	r25
    1cb2:	80 95       	com	r24
    1cb4:	70 95       	com	r23
    1cb6:	61 95       	neg	r22
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	8f 4f       	sbci	r24, 0xFF	; 255
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbe:	08 95       	ret

00001cc0 <__floatunsisf>:
    1cc0:	e8 94       	clt
    1cc2:	09 c0       	rjmp	.+18     	; 0x1cd6 <__floatsisf+0x12>

00001cc4 <__floatsisf>:
    1cc4:	97 fb       	bst	r25, 7
    1cc6:	3e f4       	brtc	.+14     	; 0x1cd6 <__floatsisf+0x12>
    1cc8:	90 95       	com	r25
    1cca:	80 95       	com	r24
    1ccc:	70 95       	com	r23
    1cce:	61 95       	neg	r22
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd6:	99 23       	and	r25, r25
    1cd8:	a9 f0       	breq	.+42     	; 0x1d04 <__floatsisf+0x40>
    1cda:	f9 2f       	mov	r31, r25
    1cdc:	96 e9       	ldi	r25, 0x96	; 150
    1cde:	bb 27       	eor	r27, r27
    1ce0:	93 95       	inc	r25
    1ce2:	f6 95       	lsr	r31
    1ce4:	87 95       	ror	r24
    1ce6:	77 95       	ror	r23
    1ce8:	67 95       	ror	r22
    1cea:	b7 95       	ror	r27
    1cec:	f1 11       	cpse	r31, r1
    1cee:	f8 cf       	rjmp	.-16     	; 0x1ce0 <__floatsisf+0x1c>
    1cf0:	fa f4       	brpl	.+62     	; 0x1d30 <__floatsisf+0x6c>
    1cf2:	bb 0f       	add	r27, r27
    1cf4:	11 f4       	brne	.+4      	; 0x1cfa <__floatsisf+0x36>
    1cf6:	60 ff       	sbrs	r22, 0
    1cf8:	1b c0       	rjmp	.+54     	; 0x1d30 <__floatsisf+0x6c>
    1cfa:	6f 5f       	subi	r22, 0xFF	; 255
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1d00:	9f 4f       	sbci	r25, 0xFF	; 255
    1d02:	16 c0       	rjmp	.+44     	; 0x1d30 <__floatsisf+0x6c>
    1d04:	88 23       	and	r24, r24
    1d06:	11 f0       	breq	.+4      	; 0x1d0c <__floatsisf+0x48>
    1d08:	96 e9       	ldi	r25, 0x96	; 150
    1d0a:	11 c0       	rjmp	.+34     	; 0x1d2e <__floatsisf+0x6a>
    1d0c:	77 23       	and	r23, r23
    1d0e:	21 f0       	breq	.+8      	; 0x1d18 <__floatsisf+0x54>
    1d10:	9e e8       	ldi	r25, 0x8E	; 142
    1d12:	87 2f       	mov	r24, r23
    1d14:	76 2f       	mov	r23, r22
    1d16:	05 c0       	rjmp	.+10     	; 0x1d22 <__floatsisf+0x5e>
    1d18:	66 23       	and	r22, r22
    1d1a:	71 f0       	breq	.+28     	; 0x1d38 <__floatsisf+0x74>
    1d1c:	96 e8       	ldi	r25, 0x86	; 134
    1d1e:	86 2f       	mov	r24, r22
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	2a f0       	brmi	.+10     	; 0x1d30 <__floatsisf+0x6c>
    1d26:	9a 95       	dec	r25
    1d28:	66 0f       	add	r22, r22
    1d2a:	77 1f       	adc	r23, r23
    1d2c:	88 1f       	adc	r24, r24
    1d2e:	da f7       	brpl	.-10     	; 0x1d26 <__floatsisf+0x62>
    1d30:	88 0f       	add	r24, r24
    1d32:	96 95       	lsr	r25
    1d34:	87 95       	ror	r24
    1d36:	97 f9       	bld	r25, 7
    1d38:	08 95       	ret

00001d3a <__fp_inf>:
    1d3a:	97 f9       	bld	r25, 7
    1d3c:	9f 67       	ori	r25, 0x7F	; 127
    1d3e:	80 e8       	ldi	r24, 0x80	; 128
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	08 95       	ret

00001d46 <__fp_nan>:
    1d46:	9f ef       	ldi	r25, 0xFF	; 255
    1d48:	80 ec       	ldi	r24, 0xC0	; 192
    1d4a:	08 95       	ret

00001d4c <__fp_pscA>:
    1d4c:	00 24       	eor	r0, r0
    1d4e:	0a 94       	dec	r0
    1d50:	16 16       	cp	r1, r22
    1d52:	17 06       	cpc	r1, r23
    1d54:	18 06       	cpc	r1, r24
    1d56:	09 06       	cpc	r0, r25
    1d58:	08 95       	ret

00001d5a <__fp_pscB>:
    1d5a:	00 24       	eor	r0, r0
    1d5c:	0a 94       	dec	r0
    1d5e:	12 16       	cp	r1, r18
    1d60:	13 06       	cpc	r1, r19
    1d62:	14 06       	cpc	r1, r20
    1d64:	05 06       	cpc	r0, r21
    1d66:	08 95       	ret

00001d68 <__fp_round>:
    1d68:	09 2e       	mov	r0, r25
    1d6a:	03 94       	inc	r0
    1d6c:	00 0c       	add	r0, r0
    1d6e:	11 f4       	brne	.+4      	; 0x1d74 <__fp_round+0xc>
    1d70:	88 23       	and	r24, r24
    1d72:	52 f0       	brmi	.+20     	; 0x1d88 <__fp_round+0x20>
    1d74:	bb 0f       	add	r27, r27
    1d76:	40 f4       	brcc	.+16     	; 0x1d88 <__fp_round+0x20>
    1d78:	bf 2b       	or	r27, r31
    1d7a:	11 f4       	brne	.+4      	; 0x1d80 <__fp_round+0x18>
    1d7c:	60 ff       	sbrs	r22, 0
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <__fp_round+0x20>
    1d80:	6f 5f       	subi	r22, 0xFF	; 255
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	8f 4f       	sbci	r24, 0xFF	; 255
    1d86:	9f 4f       	sbci	r25, 0xFF	; 255
    1d88:	08 95       	ret

00001d8a <__fp_split3>:
    1d8a:	57 fd       	sbrc	r21, 7
    1d8c:	90 58       	subi	r25, 0x80	; 128
    1d8e:	44 0f       	add	r20, r20
    1d90:	55 1f       	adc	r21, r21
    1d92:	59 f0       	breq	.+22     	; 0x1daa <__fp_splitA+0x10>
    1d94:	5f 3f       	cpi	r21, 0xFF	; 255
    1d96:	71 f0       	breq	.+28     	; 0x1db4 <__fp_splitA+0x1a>
    1d98:	47 95       	ror	r20

00001d9a <__fp_splitA>:
    1d9a:	88 0f       	add	r24, r24
    1d9c:	97 fb       	bst	r25, 7
    1d9e:	99 1f       	adc	r25, r25
    1da0:	61 f0       	breq	.+24     	; 0x1dba <__fp_splitA+0x20>
    1da2:	9f 3f       	cpi	r25, 0xFF	; 255
    1da4:	79 f0       	breq	.+30     	; 0x1dc4 <__fp_splitA+0x2a>
    1da6:	87 95       	ror	r24
    1da8:	08 95       	ret
    1daa:	12 16       	cp	r1, r18
    1dac:	13 06       	cpc	r1, r19
    1dae:	14 06       	cpc	r1, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	f2 cf       	rjmp	.-28     	; 0x1d98 <__fp_split3+0xe>
    1db4:	46 95       	lsr	r20
    1db6:	f1 df       	rcall	.-30     	; 0x1d9a <__fp_splitA>
    1db8:	08 c0       	rjmp	.+16     	; 0x1dca <__fp_splitA+0x30>
    1dba:	16 16       	cp	r1, r22
    1dbc:	17 06       	cpc	r1, r23
    1dbe:	18 06       	cpc	r1, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	f1 cf       	rjmp	.-30     	; 0x1da6 <__fp_splitA+0xc>
    1dc4:	86 95       	lsr	r24
    1dc6:	71 05       	cpc	r23, r1
    1dc8:	61 05       	cpc	r22, r1
    1dca:	08 94       	sec
    1dcc:	08 95       	ret

00001dce <__fp_zero>:
    1dce:	e8 94       	clt

00001dd0 <__fp_szero>:
    1dd0:	bb 27       	eor	r27, r27
    1dd2:	66 27       	eor	r22, r22
    1dd4:	77 27       	eor	r23, r23
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__gesf2>:
    1ddc:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__fp_cmp>
    1de0:	08 f4       	brcc	.+2      	; 0x1de4 <__gesf2+0x8>
    1de2:	8f ef       	ldi	r24, 0xFF	; 255
    1de4:	08 95       	ret

00001de6 <__mulsf3>:
    1de6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__mulsf3x>
    1dea:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__fp_round>
    1dee:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <__fp_pscA>
    1df2:	38 f0       	brcs	.+14     	; 0x1e02 <__mulsf3+0x1c>
    1df4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <__fp_pscB>
    1df8:	20 f0       	brcs	.+8      	; 0x1e02 <__mulsf3+0x1c>
    1dfa:	95 23       	and	r25, r21
    1dfc:	11 f0       	breq	.+4      	; 0x1e02 <__mulsf3+0x1c>
    1dfe:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1e02:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__fp_nan>
    1e06:	11 24       	eor	r1, r1
    1e08:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>

00001e0c <__mulsf3x>:
    1e0c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__fp_split3>
    1e10:	70 f3       	brcs	.-36     	; 0x1dee <__mulsf3+0x8>

00001e12 <__mulsf3_pse>:
    1e12:	95 9f       	mul	r25, r21
    1e14:	c1 f3       	breq	.-16     	; 0x1e06 <__mulsf3+0x20>
    1e16:	95 0f       	add	r25, r21
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	55 1f       	adc	r21, r21
    1e1c:	62 9f       	mul	r22, r18
    1e1e:	f0 01       	movw	r30, r0
    1e20:	72 9f       	mul	r23, r18
    1e22:	bb 27       	eor	r27, r27
    1e24:	f0 0d       	add	r31, r0
    1e26:	b1 1d       	adc	r27, r1
    1e28:	63 9f       	mul	r22, r19
    1e2a:	aa 27       	eor	r26, r26
    1e2c:	f0 0d       	add	r31, r0
    1e2e:	b1 1d       	adc	r27, r1
    1e30:	aa 1f       	adc	r26, r26
    1e32:	64 9f       	mul	r22, r20
    1e34:	66 27       	eor	r22, r22
    1e36:	b0 0d       	add	r27, r0
    1e38:	a1 1d       	adc	r26, r1
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	82 9f       	mul	r24, r18
    1e3e:	22 27       	eor	r18, r18
    1e40:	b0 0d       	add	r27, r0
    1e42:	a1 1d       	adc	r26, r1
    1e44:	62 1f       	adc	r22, r18
    1e46:	73 9f       	mul	r23, r19
    1e48:	b0 0d       	add	r27, r0
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	62 1f       	adc	r22, r18
    1e4e:	83 9f       	mul	r24, r19
    1e50:	a0 0d       	add	r26, r0
    1e52:	61 1d       	adc	r22, r1
    1e54:	22 1f       	adc	r18, r18
    1e56:	74 9f       	mul	r23, r20
    1e58:	33 27       	eor	r19, r19
    1e5a:	a0 0d       	add	r26, r0
    1e5c:	61 1d       	adc	r22, r1
    1e5e:	23 1f       	adc	r18, r19
    1e60:	84 9f       	mul	r24, r20
    1e62:	60 0d       	add	r22, r0
    1e64:	21 1d       	adc	r18, r1
    1e66:	82 2f       	mov	r24, r18
    1e68:	76 2f       	mov	r23, r22
    1e6a:	6a 2f       	mov	r22, r26
    1e6c:	11 24       	eor	r1, r1
    1e6e:	9f 57       	subi	r25, 0x7F	; 127
    1e70:	50 40       	sbci	r21, 0x00	; 0
    1e72:	9a f0       	brmi	.+38     	; 0x1e9a <__mulsf3_pse+0x88>
    1e74:	f1 f0       	breq	.+60     	; 0x1eb2 <__mulsf3_pse+0xa0>
    1e76:	88 23       	and	r24, r24
    1e78:	4a f0       	brmi	.+18     	; 0x1e8c <__mulsf3_pse+0x7a>
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	66 1f       	adc	r22, r22
    1e82:	77 1f       	adc	r23, r23
    1e84:	88 1f       	adc	r24, r24
    1e86:	91 50       	subi	r25, 0x01	; 1
    1e88:	50 40       	sbci	r21, 0x00	; 0
    1e8a:	a9 f7       	brne	.-22     	; 0x1e76 <__mulsf3_pse+0x64>
    1e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e8e:	51 05       	cpc	r21, r1
    1e90:	80 f0       	brcs	.+32     	; 0x1eb2 <__mulsf3_pse+0xa0>
    1e92:	0c 94 9d 0e 	jmp	0x1d3a	; 0x1d3a <__fp_inf>
    1e96:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_szero>
    1e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9c:	e4 f3       	brlt	.-8      	; 0x1e96 <__mulsf3_pse+0x84>
    1e9e:	98 3e       	cpi	r25, 0xE8	; 232
    1ea0:	d4 f3       	brlt	.-12     	; 0x1e96 <__mulsf3_pse+0x84>
    1ea2:	86 95       	lsr	r24
    1ea4:	77 95       	ror	r23
    1ea6:	67 95       	ror	r22
    1ea8:	b7 95       	ror	r27
    1eaa:	f7 95       	ror	r31
    1eac:	e7 95       	ror	r30
    1eae:	9f 5f       	subi	r25, 0xFF	; 255
    1eb0:	c1 f7       	brne	.-16     	; 0x1ea2 <__mulsf3_pse+0x90>
    1eb2:	fe 2b       	or	r31, r30
    1eb4:	88 0f       	add	r24, r24
    1eb6:	91 1d       	adc	r25, r1
    1eb8:	96 95       	lsr	r25
    1eba:	87 95       	ror	r24
    1ebc:	97 f9       	bld	r25, 7
    1ebe:	08 95       	ret

00001ec0 <__fp_cmp>:
    1ec0:	99 0f       	add	r25, r25
    1ec2:	00 08       	sbc	r0, r0
    1ec4:	55 0f       	add	r21, r21
    1ec6:	aa 0b       	sbc	r26, r26
    1ec8:	e0 e8       	ldi	r30, 0x80	; 128
    1eca:	fe ef       	ldi	r31, 0xFE	; 254
    1ecc:	16 16       	cp	r1, r22
    1ece:	17 06       	cpc	r1, r23
    1ed0:	e8 07       	cpc	r30, r24
    1ed2:	f9 07       	cpc	r31, r25
    1ed4:	c0 f0       	brcs	.+48     	; 0x1f06 <__fp_cmp+0x46>
    1ed6:	12 16       	cp	r1, r18
    1ed8:	13 06       	cpc	r1, r19
    1eda:	e4 07       	cpc	r30, r20
    1edc:	f5 07       	cpc	r31, r21
    1ede:	98 f0       	brcs	.+38     	; 0x1f06 <__fp_cmp+0x46>
    1ee0:	62 1b       	sub	r22, r18
    1ee2:	73 0b       	sbc	r23, r19
    1ee4:	84 0b       	sbc	r24, r20
    1ee6:	95 0b       	sbc	r25, r21
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <__fp_cmp+0x38>
    1eea:	0a 26       	eor	r0, r26
    1eec:	61 f0       	breq	.+24     	; 0x1f06 <__fp_cmp+0x46>
    1eee:	23 2b       	or	r18, r19
    1ef0:	24 2b       	or	r18, r20
    1ef2:	25 2b       	or	r18, r21
    1ef4:	21 f4       	brne	.+8      	; 0x1efe <__fp_cmp+0x3e>
    1ef6:	08 95       	ret
    1ef8:	0a 26       	eor	r0, r26
    1efa:	09 f4       	brne	.+2      	; 0x1efe <__fp_cmp+0x3e>
    1efc:	a1 40       	sbci	r26, 0x01	; 1
    1efe:	a6 95       	lsr	r26
    1f00:	8f ef       	ldi	r24, 0xFF	; 255
    1f02:	81 1d       	adc	r24, r1
    1f04:	81 1d       	adc	r24, r1
    1f06:	08 95       	ret

00001f08 <__udivmodhi4>:
    1f08:	aa 1b       	sub	r26, r26
    1f0a:	bb 1b       	sub	r27, r27
    1f0c:	51 e1       	ldi	r21, 0x11	; 17
    1f0e:	07 c0       	rjmp	.+14     	; 0x1f1e <__udivmodhi4_ep>

00001f10 <__udivmodhi4_loop>:
    1f10:	aa 1f       	adc	r26, r26
    1f12:	bb 1f       	adc	r27, r27
    1f14:	a6 17       	cp	r26, r22
    1f16:	b7 07       	cpc	r27, r23
    1f18:	10 f0       	brcs	.+4      	; 0x1f1e <__udivmodhi4_ep>
    1f1a:	a6 1b       	sub	r26, r22
    1f1c:	b7 0b       	sbc	r27, r23

00001f1e <__udivmodhi4_ep>:
    1f1e:	88 1f       	adc	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	5a 95       	dec	r21
    1f24:	a9 f7       	brne	.-22     	; 0x1f10 <__udivmodhi4_loop>
    1f26:	80 95       	com	r24
    1f28:	90 95       	com	r25
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	08 95       	ret

00001f30 <__divmodhi4>:
    1f30:	97 fb       	bst	r25, 7
    1f32:	07 2e       	mov	r0, r23
    1f34:	16 f4       	brtc	.+4      	; 0x1f3a <__divmodhi4+0xa>
    1f36:	00 94       	com	r0
    1f38:	07 d0       	rcall	.+14     	; 0x1f48 <__divmodhi4_neg1>
    1f3a:	77 fd       	sbrc	r23, 7
    1f3c:	09 d0       	rcall	.+18     	; 0x1f50 <__divmodhi4_neg2>
    1f3e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <__udivmodhi4>
    1f42:	07 fc       	sbrc	r0, 7
    1f44:	05 d0       	rcall	.+10     	; 0x1f50 <__divmodhi4_neg2>
    1f46:	3e f4       	brtc	.+14     	; 0x1f56 <__divmodhi4_exit>

00001f48 <__divmodhi4_neg1>:
    1f48:	90 95       	com	r25
    1f4a:	81 95       	neg	r24
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	08 95       	ret

00001f50 <__divmodhi4_neg2>:
    1f50:	70 95       	com	r23
    1f52:	61 95       	neg	r22
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255

00001f56 <__divmodhi4_exit>:
    1f56:	08 95       	ret

00001f58 <__divmodsi4>:
    1f58:	05 2e       	mov	r0, r21
    1f5a:	97 fb       	bst	r25, 7
    1f5c:	1e f4       	brtc	.+6      	; 0x1f64 <__divmodsi4+0xc>
    1f5e:	00 94       	com	r0
    1f60:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__negsi2>
    1f64:	57 fd       	sbrc	r21, 7
    1f66:	07 d0       	rcall	.+14     	; 0x1f76 <__divmodsi4_neg2>
    1f68:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__udivmodsi4>
    1f6c:	07 fc       	sbrc	r0, 7
    1f6e:	03 d0       	rcall	.+6      	; 0x1f76 <__divmodsi4_neg2>
    1f70:	4e f4       	brtc	.+18     	; 0x1f84 <__divmodsi4_exit>
    1f72:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__negsi2>

00001f76 <__divmodsi4_neg2>:
    1f76:	50 95       	com	r21
    1f78:	40 95       	com	r20
    1f7a:	30 95       	com	r19
    1f7c:	21 95       	neg	r18
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	4f 4f       	sbci	r20, 0xFF	; 255
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255

00001f84 <__divmodsi4_exit>:
    1f84:	08 95       	ret

00001f86 <__negsi2>:
    1f86:	90 95       	com	r25
    1f88:	80 95       	com	r24
    1f8a:	70 95       	com	r23
    1f8c:	61 95       	neg	r22
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	8f 4f       	sbci	r24, 0xFF	; 255
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	08 95       	ret

00001f96 <__tablejump2__>:
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	05 90       	lpm	r0, Z+
    1f9c:	f4 91       	lpm	r31, Z
    1f9e:	e0 2d       	mov	r30, r0
    1fa0:	09 94       	ijmp

00001fa2 <__udivmodsi4>:
    1fa2:	a1 e2       	ldi	r26, 0x21	; 33
    1fa4:	1a 2e       	mov	r1, r26
    1fa6:	aa 1b       	sub	r26, r26
    1fa8:	bb 1b       	sub	r27, r27
    1faa:	fd 01       	movw	r30, r26
    1fac:	0d c0       	rjmp	.+26     	; 0x1fc8 <__udivmodsi4_ep>

00001fae <__udivmodsi4_loop>:
    1fae:	aa 1f       	adc	r26, r26
    1fb0:	bb 1f       	adc	r27, r27
    1fb2:	ee 1f       	adc	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	a2 17       	cp	r26, r18
    1fb8:	b3 07       	cpc	r27, r19
    1fba:	e4 07       	cpc	r30, r20
    1fbc:	f5 07       	cpc	r31, r21
    1fbe:	20 f0       	brcs	.+8      	; 0x1fc8 <__udivmodsi4_ep>
    1fc0:	a2 1b       	sub	r26, r18
    1fc2:	b3 0b       	sbc	r27, r19
    1fc4:	e4 0b       	sbc	r30, r20
    1fc6:	f5 0b       	sbc	r31, r21

00001fc8 <__udivmodsi4_ep>:
    1fc8:	66 1f       	adc	r22, r22
    1fca:	77 1f       	adc	r23, r23
    1fcc:	88 1f       	adc	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	1a 94       	dec	r1
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <__udivmodsi4_loop>
    1fd4:	60 95       	com	r22
    1fd6:	70 95       	com	r23
    1fd8:	80 95       	com	r24
    1fda:	90 95       	com	r25
    1fdc:	9b 01       	movw	r18, r22
    1fde:	ac 01       	movw	r20, r24
    1fe0:	bd 01       	movw	r22, r26
    1fe2:	cf 01       	movw	r24, r30
    1fe4:	08 95       	ret

00001fe6 <atof>:
    1fe6:	66 27       	eor	r22, r22
    1fe8:	77 27       	eor	r23, r23
    1fea:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <strtod>

00001fee <__itoa_ncheck>:
    1fee:	bb 27       	eor	r27, r27
    1ff0:	4a 30       	cpi	r20, 0x0A	; 10
    1ff2:	31 f4       	brne	.+12     	; 0x2000 <__itoa_ncheck+0x12>
    1ff4:	99 23       	and	r25, r25
    1ff6:	22 f4       	brpl	.+8      	; 0x2000 <__itoa_ncheck+0x12>
    1ff8:	bd e2       	ldi	r27, 0x2D	; 45
    1ffa:	90 95       	com	r25
    1ffc:	81 95       	neg	r24
    1ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    2000:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__utoa_common>

00002004 <__utoa_ncheck>:
    2004:	bb 27       	eor	r27, r27

00002006 <__utoa_common>:
    2006:	fb 01       	movw	r30, r22
    2008:	55 27       	eor	r21, r21
    200a:	aa 27       	eor	r26, r26
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	aa 1f       	adc	r26, r26
    2012:	a4 17       	cp	r26, r20
    2014:	10 f0       	brcs	.+4      	; 0x201a <__utoa_common+0x14>
    2016:	a4 1b       	sub	r26, r20
    2018:	83 95       	inc	r24
    201a:	50 51       	subi	r21, 0x10	; 16
    201c:	b9 f7       	brne	.-18     	; 0x200c <__utoa_common+0x6>
    201e:	a0 5d       	subi	r26, 0xD0	; 208
    2020:	aa 33       	cpi	r26, 0x3A	; 58
    2022:	08 f0       	brcs	.+2      	; 0x2026 <__utoa_common+0x20>
    2024:	a9 5d       	subi	r26, 0xD9	; 217
    2026:	a1 93       	st	Z+, r26
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	79 f7       	brne	.-34     	; 0x200a <__utoa_common+0x4>
    202c:	b1 11       	cpse	r27, r1
    202e:	b1 93       	st	Z+, r27
    2030:	11 92       	st	Z+, r1
    2032:	cb 01       	movw	r24, r22
    2034:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <strrev>

00002038 <strtod>:
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e2 e2       	ldi	r30, 0x22	; 34
    203e:	f0 e1       	ldi	r31, 0x10	; 16
    2040:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__prologue_saves__+0xc>
    2044:	ec 01       	movw	r28, r24
    2046:	6b 01       	movw	r12, r22
    2048:	61 15       	cp	r22, r1
    204a:	71 05       	cpc	r23, r1
    204c:	19 f0       	breq	.+6      	; 0x2054 <strtod+0x1c>
    204e:	fb 01       	movw	r30, r22
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	7e 01       	movw	r14, r28
    2056:	ff ef       	ldi	r31, 0xFF	; 255
    2058:	ef 1a       	sub	r14, r31
    205a:	ff 0a       	sbc	r15, r31
    205c:	08 81       	ld	r16, Y
    205e:	80 2f       	mov	r24, r16
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <isspace>
    2066:	89 2b       	or	r24, r25
    2068:	11 f0       	breq	.+4      	; 0x206e <strtod+0x36>
    206a:	e7 01       	movw	r28, r14
    206c:	f3 cf       	rjmp	.-26     	; 0x2054 <strtod+0x1c>
    206e:	0d 32       	cpi	r16, 0x2D	; 45
    2070:	39 f4       	brne	.+14     	; 0x2080 <strtod+0x48>
    2072:	7e 01       	movw	r14, r28
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	e8 0e       	add	r14, r24
    2078:	f1 1c       	adc	r15, r1
    207a:	09 81       	ldd	r16, Y+1	; 0x01
    207c:	11 e0       	ldi	r17, 0x01	; 1
    207e:	08 c0       	rjmp	.+16     	; 0x2090 <strtod+0x58>
    2080:	0b 32       	cpi	r16, 0x2B	; 43
    2082:	29 f4       	brne	.+10     	; 0x208e <strtod+0x56>
    2084:	7e 01       	movw	r14, r28
    2086:	92 e0       	ldi	r25, 0x02	; 2
    2088:	e9 0e       	add	r14, r25
    208a:	f1 1c       	adc	r15, r1
    208c:	09 81       	ldd	r16, Y+1	; 0x01
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	e7 01       	movw	r28, r14
    2092:	21 97       	sbiw	r28, 0x01	; 1
    2094:	43 e0       	ldi	r20, 0x03	; 3
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	66 e7       	ldi	r22, 0x76	; 118
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	ce 01       	movw	r24, r28
    209e:	0e 94 73 11 	call	0x22e6	; 0x22e6 <strncasecmp_P>
    20a2:	89 2b       	or	r24, r25
    20a4:	c1 f4       	brne	.+48     	; 0x20d6 <strtod+0x9e>
    20a6:	23 96       	adiw	r28, 0x03	; 3
    20a8:	45 e0       	ldi	r20, 0x05	; 5
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	61 e7       	ldi	r22, 0x71	; 113
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	ce 01       	movw	r24, r28
    20b2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <strncasecmp_P>
    20b6:	89 2b       	or	r24, r25
    20b8:	09 f4       	brne	.+2      	; 0x20bc <strtod+0x84>
    20ba:	25 96       	adiw	r28, 0x05	; 5
    20bc:	c1 14       	cp	r12, r1
    20be:	d1 04       	cpc	r13, r1
    20c0:	19 f0       	breq	.+6      	; 0x20c8 <strtod+0x90>
    20c2:	f6 01       	movw	r30, r12
    20c4:	d1 83       	std	Z+1, r29	; 0x01
    20c6:	c0 83       	st	Z, r28
    20c8:	11 11       	cpse	r17, r1
    20ca:	f6 c0       	rjmp	.+492    	; 0x22b8 <strtod+0x280>
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	80 e8       	ldi	r24, 0x80	; 128
    20d2:	9f e7       	ldi	r25, 0x7F	; 127
    20d4:	fa c0       	rjmp	.+500    	; 0x22ca <strtod+0x292>
    20d6:	43 e0       	ldi	r20, 0x03	; 3
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	6e e6       	ldi	r22, 0x6E	; 110
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	ce 01       	movw	r24, r28
    20e0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <strncasecmp_P>
    20e4:	89 2b       	or	r24, r25
    20e6:	59 f4       	brne	.+22     	; 0x20fe <strtod+0xc6>
    20e8:	c1 14       	cp	r12, r1
    20ea:	d1 04       	cpc	r13, r1
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <strtod+0xb8>
    20ee:	e9 c0       	rjmp	.+466    	; 0x22c2 <strtod+0x28a>
    20f0:	f2 e0       	ldi	r31, 0x02	; 2
    20f2:	ef 0e       	add	r14, r31
    20f4:	f1 1c       	adc	r15, r1
    20f6:	f6 01       	movw	r30, r12
    20f8:	f1 82       	std	Z+1, r15	; 0x01
    20fa:	e0 82       	st	Z, r14
    20fc:	e2 c0       	rjmp	.+452    	; 0x22c2 <strtod+0x28a>
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	a9 01       	movw	r20, r18
    2104:	c0 e0       	ldi	r28, 0x00	; 0
    2106:	d0 e0       	ldi	r29, 0x00	; 0
    2108:	f7 01       	movw	r30, r14
    210a:	80 ed       	ldi	r24, 0xD0	; 208
    210c:	a8 2e       	mov	r10, r24
    210e:	a0 0e       	add	r10, r16
    2110:	89 e0       	ldi	r24, 0x09	; 9
    2112:	8a 15       	cp	r24, r10
    2114:	30 f1       	brcs	.+76     	; 0x2162 <strtod+0x12a>
    2116:	91 2f       	mov	r25, r17
    2118:	92 60       	ori	r25, 0x02	; 2
    211a:	b9 2e       	mov	r11, r25
    211c:	81 2f       	mov	r24, r17
    211e:	88 70       	andi	r24, 0x08	; 8
    2120:	12 ff       	sbrs	r17, 2
    2122:	04 c0       	rjmp	.+8      	; 0x212c <strtod+0xf4>
    2124:	81 11       	cpse	r24, r1
    2126:	24 c0       	rjmp	.+72     	; 0x2170 <strtod+0x138>
    2128:	21 96       	adiw	r28, 0x01	; 1
    212a:	22 c0       	rjmp	.+68     	; 0x2170 <strtod+0x138>
    212c:	81 11       	cpse	r24, r1
    212e:	21 97       	sbiw	r28, 0x01	; 1
    2130:	a5 e0       	ldi	r26, 0x05	; 5
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	0e 94 a3 11 	call	0x2346	; 0x2346 <__muluhisi3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	aa 1f       	adc	r26, r26
    2142:	bb 1f       	adc	r27, r27
    2144:	9c 01       	movw	r18, r24
    2146:	ad 01       	movw	r20, r26
    2148:	2a 0d       	add	r18, r10
    214a:	31 1d       	adc	r19, r1
    214c:	41 1d       	adc	r20, r1
    214e:	51 1d       	adc	r21, r1
    2150:	28 39       	cpi	r18, 0x98	; 152
    2152:	89 e9       	ldi	r24, 0x99	; 153
    2154:	38 07       	cpc	r19, r24
    2156:	48 07       	cpc	r20, r24
    2158:	89 e1       	ldi	r24, 0x19	; 25
    215a:	58 07       	cpc	r21, r24
    215c:	48 f0       	brcs	.+18     	; 0x2170 <strtod+0x138>
    215e:	16 60       	ori	r17, 0x06	; 6
    2160:	06 c0       	rjmp	.+12     	; 0x216e <strtod+0x136>
    2162:	9e ef       	ldi	r25, 0xFE	; 254
    2164:	a9 12       	cpse	r10, r25
    2166:	0a c0       	rjmp	.+20     	; 0x217c <strtod+0x144>
    2168:	13 fd       	sbrc	r17, 3
    216a:	40 c0       	rjmp	.+128    	; 0x21ec <strtod+0x1b4>
    216c:	18 60       	ori	r17, 0x08	; 8
    216e:	b1 2e       	mov	r11, r17
    2170:	8f ef       	ldi	r24, 0xFF	; 255
    2172:	e8 1a       	sub	r14, r24
    2174:	f8 0a       	sbc	r15, r24
    2176:	00 81       	ld	r16, Z
    2178:	1b 2d       	mov	r17, r11
    217a:	c6 cf       	rjmp	.-116    	; 0x2108 <strtod+0xd0>
    217c:	80 2f       	mov	r24, r16
    217e:	8f 7d       	andi	r24, 0xDF	; 223
    2180:	85 34       	cpi	r24, 0x45	; 69
    2182:	a1 f5       	brne	.+104    	; 0x21ec <strtod+0x1b4>
    2184:	80 81       	ld	r24, Z
    2186:	8d 32       	cpi	r24, 0x2D	; 45
    2188:	11 f4       	brne	.+4      	; 0x218e <strtod+0x156>
    218a:	10 61       	ori	r17, 0x10	; 16
    218c:	06 c0       	rjmp	.+12     	; 0x219a <strtod+0x162>
    218e:	8b 32       	cpi	r24, 0x2B	; 43
    2190:	21 f0       	breq	.+8      	; 0x219a <strtod+0x162>
    2192:	31 96       	adiw	r30, 0x01	; 1
    2194:	61 e0       	ldi	r22, 0x01	; 1
    2196:	70 e0       	ldi	r23, 0x00	; 0
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <strtod+0x16a>
    219a:	81 81       	ldd	r24, Z+1	; 0x01
    219c:	32 96       	adiw	r30, 0x02	; 2
    219e:	62 e0       	ldi	r22, 0x02	; 2
    21a0:	70 e0       	ldi	r23, 0x00	; 0
    21a2:	80 53       	subi	r24, 0x30	; 48
    21a4:	8a 30       	cpi	r24, 0x0A	; 10
    21a6:	18 f0       	brcs	.+6      	; 0x21ae <strtod+0x176>
    21a8:	e6 1b       	sub	r30, r22
    21aa:	f7 0b       	sbc	r31, r23
    21ac:	1f c0       	rjmp	.+62     	; 0x21ec <strtod+0x1b4>
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	60 38       	cpi	r22, 0x80	; 128
    21b4:	9c e0       	ldi	r25, 0x0C	; 12
    21b6:	79 07       	cpc	r23, r25
    21b8:	5c f4       	brge	.+22     	; 0x21d0 <strtod+0x198>
    21ba:	db 01       	movw	r26, r22
    21bc:	aa 0f       	add	r26, r26
    21be:	bb 1f       	adc	r27, r27
    21c0:	aa 0f       	add	r26, r26
    21c2:	bb 1f       	adc	r27, r27
    21c4:	6a 0f       	add	r22, r26
    21c6:	7b 1f       	adc	r23, r27
    21c8:	66 0f       	add	r22, r22
    21ca:	77 1f       	adc	r23, r23
    21cc:	68 0f       	add	r22, r24
    21ce:	71 1d       	adc	r23, r1
    21d0:	31 96       	adiw	r30, 0x01	; 1
    21d2:	df 01       	movw	r26, r30
    21d4:	11 97       	sbiw	r26, 0x01	; 1
    21d6:	8c 91       	ld	r24, X
    21d8:	80 53       	subi	r24, 0x30	; 48
    21da:	8a 30       	cpi	r24, 0x0A	; 10
    21dc:	50 f3       	brcs	.-44     	; 0x21b2 <strtod+0x17a>
    21de:	14 ff       	sbrs	r17, 4
    21e0:	03 c0       	rjmp	.+6      	; 0x21e8 <strtod+0x1b0>
    21e2:	71 95       	neg	r23
    21e4:	61 95       	neg	r22
    21e6:	71 09       	sbc	r23, r1
    21e8:	c6 0f       	add	r28, r22
    21ea:	d7 1f       	adc	r29, r23
    21ec:	11 ff       	sbrs	r17, 1
    21ee:	08 c0       	rjmp	.+16     	; 0x2200 <strtod+0x1c8>
    21f0:	c1 14       	cp	r12, r1
    21f2:	d1 04       	cpc	r13, r1
    21f4:	29 f0       	breq	.+10     	; 0x2200 <strtod+0x1c8>
    21f6:	cf 01       	movw	r24, r30
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	f6 01       	movw	r30, r12
    21fc:	91 83       	std	Z+1, r25	; 0x01
    21fe:	80 83       	st	Z, r24
    2200:	ca 01       	movw	r24, r20
    2202:	b9 01       	movw	r22, r18
    2204:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <__floatunsisf>
    2208:	21 2f       	mov	r18, r17
    220a:	23 70       	andi	r18, 0x03	; 3
    220c:	23 30       	cpi	r18, 0x03	; 3
    220e:	19 f0       	breq	.+6      	; 0x2216 <strtod+0x1de>
    2210:	4b 01       	movw	r8, r22
    2212:	5c 01       	movw	r10, r24
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <strtod+0x1ea>
    2216:	4b 01       	movw	r8, r22
    2218:	5c 01       	movw	r10, r24
    221a:	b7 fa       	bst	r11, 7
    221c:	b0 94       	com	r11
    221e:	b7 f8       	bld	r11, 7
    2220:	b0 94       	com	r11
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	a9 01       	movw	r20, r18
    2228:	c5 01       	movw	r24, r10
    222a:	b4 01       	movw	r22, r8
    222c:	0e 94 9b 11 	call	0x2336	; 0x2336 <__cmpsf2>
    2230:	88 23       	and	r24, r24
    2232:	09 f4       	brne	.+2      	; 0x2236 <strtod+0x1fe>
    2234:	3e c0       	rjmp	.+124    	; 0x22b2 <strtod+0x27a>
    2236:	d7 ff       	sbrs	r29, 7
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <strtod+0x20e>
    223a:	d1 95       	neg	r29
    223c:	c1 95       	neg	r28
    223e:	d1 09       	sbc	r29, r1
    2240:	0d e8       	ldi	r16, 0x8D	; 141
    2242:	10 e0       	ldi	r17, 0x00	; 0
    2244:	02 c0       	rjmp	.+4      	; 0x224a <strtod+0x212>
    2246:	05 ea       	ldi	r16, 0xA5	; 165
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	68 01       	movw	r12, r16
    224c:	f8 e1       	ldi	r31, 0x18	; 24
    224e:	cf 1a       	sub	r12, r31
    2250:	d1 08       	sbc	r13, r1
    2252:	90 e2       	ldi	r25, 0x20	; 32
    2254:	e9 2e       	mov	r14, r25
    2256:	f1 2c       	mov	r15, r1
    2258:	ce 15       	cp	r28, r14
    225a:	df 05       	cpc	r29, r15
    225c:	74 f0       	brlt	.+28     	; 0x227a <strtod+0x242>
    225e:	f8 01       	movw	r30, r16
    2260:	25 91       	lpm	r18, Z+
    2262:	35 91       	lpm	r19, Z+
    2264:	45 91       	lpm	r20, Z+
    2266:	54 91       	lpm	r21, Z
    2268:	c5 01       	movw	r24, r10
    226a:	b4 01       	movw	r22, r8
    226c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__mulsf3>
    2270:	4b 01       	movw	r8, r22
    2272:	5c 01       	movw	r10, r24
    2274:	ce 19       	sub	r28, r14
    2276:	df 09       	sbc	r29, r15
    2278:	ef cf       	rjmp	.-34     	; 0x2258 <strtod+0x220>
    227a:	04 50       	subi	r16, 0x04	; 4
    227c:	11 09       	sbc	r17, r1
    227e:	f5 94       	asr	r15
    2280:	e7 94       	ror	r14
    2282:	0c 15       	cp	r16, r12
    2284:	1d 05       	cpc	r17, r13
    2286:	41 f7       	brne	.-48     	; 0x2258 <strtod+0x220>
    2288:	8a 2d       	mov	r24, r10
    228a:	88 0f       	add	r24, r24
    228c:	8b 2d       	mov	r24, r11
    228e:	88 1f       	adc	r24, r24
    2290:	8f 3f       	cpi	r24, 0xFF	; 255
    2292:	49 f0       	breq	.+18     	; 0x22a6 <strtod+0x26e>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	a9 01       	movw	r20, r18
    229a:	c5 01       	movw	r24, r10
    229c:	b4 01       	movw	r22, r8
    229e:	0e 94 9b 11 	call	0x2336	; 0x2336 <__cmpsf2>
    22a2:	81 11       	cpse	r24, r1
    22a4:	06 c0       	rjmp	.+12     	; 0x22b2 <strtod+0x27a>
    22a6:	82 e2       	ldi	r24, 0x22	; 34
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	90 93 52 07 	sts	0x0752, r25	; 0x800752 <errno+0x1>
    22ae:	80 93 51 07 	sts	0x0751, r24	; 0x800751 <errno>
    22b2:	c5 01       	movw	r24, r10
    22b4:	b4 01       	movw	r22, r8
    22b6:	09 c0       	rjmp	.+18     	; 0x22ca <strtod+0x292>
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	70 e0       	ldi	r23, 0x00	; 0
    22bc:	80 e8       	ldi	r24, 0x80	; 128
    22be:	9f ef       	ldi	r25, 0xFF	; 255
    22c0:	04 c0       	rjmp	.+8      	; 0x22ca <strtod+0x292>
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	80 ec       	ldi	r24, 0xC0	; 192
    22c8:	9f e7       	ldi	r25, 0x7F	; 127
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	ec e0       	ldi	r30, 0x0C	; 12
    22d0:	0c 94 d0 11 	jmp	0x23a0	; 0x23a0 <__epilogue_restores__+0xc>

000022d4 <isspace>:
    22d4:	91 11       	cpse	r25, r1
    22d6:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__ctype_isfalse>
    22da:	80 32       	cpi	r24, 0x20	; 32
    22dc:	19 f0       	breq	.+6      	; 0x22e4 <isspace+0x10>
    22de:	89 50       	subi	r24, 0x09	; 9
    22e0:	85 50       	subi	r24, 0x05	; 5
    22e2:	c8 f7       	brcc	.-14     	; 0x22d6 <isspace+0x2>
    22e4:	08 95       	ret

000022e6 <strncasecmp_P>:
    22e6:	fb 01       	movw	r30, r22
    22e8:	dc 01       	movw	r26, r24
    22ea:	41 50       	subi	r20, 0x01	; 1
    22ec:	50 40       	sbci	r21, 0x00	; 0
    22ee:	88 f0       	brcs	.+34     	; 0x2312 <strncasecmp_P+0x2c>
    22f0:	8d 91       	ld	r24, X+
    22f2:	81 34       	cpi	r24, 0x41	; 65
    22f4:	1c f0       	brlt	.+6      	; 0x22fc <strncasecmp_P+0x16>
    22f6:	8b 35       	cpi	r24, 0x5B	; 91
    22f8:	0c f4       	brge	.+2      	; 0x22fc <strncasecmp_P+0x16>
    22fa:	80 5e       	subi	r24, 0xE0	; 224
    22fc:	65 91       	lpm	r22, Z+
    22fe:	61 34       	cpi	r22, 0x41	; 65
    2300:	1c f0       	brlt	.+6      	; 0x2308 <strncasecmp_P+0x22>
    2302:	6b 35       	cpi	r22, 0x5B	; 91
    2304:	0c f4       	brge	.+2      	; 0x2308 <strncasecmp_P+0x22>
    2306:	60 5e       	subi	r22, 0xE0	; 224
    2308:	86 1b       	sub	r24, r22
    230a:	61 11       	cpse	r22, r1
    230c:	71 f3       	breq	.-36     	; 0x22ea <strncasecmp_P+0x4>
    230e:	99 0b       	sbc	r25, r25
    2310:	08 95       	ret
    2312:	88 1b       	sub	r24, r24
    2314:	fc cf       	rjmp	.-8      	; 0x230e <strncasecmp_P+0x28>

00002316 <strrev>:
    2316:	dc 01       	movw	r26, r24
    2318:	fc 01       	movw	r30, r24
    231a:	67 2f       	mov	r22, r23
    231c:	71 91       	ld	r23, Z+
    231e:	77 23       	and	r23, r23
    2320:	e1 f7       	brne	.-8      	; 0x231a <strrev+0x4>
    2322:	32 97       	sbiw	r30, 0x02	; 2
    2324:	04 c0       	rjmp	.+8      	; 0x232e <strrev+0x18>
    2326:	7c 91       	ld	r23, X
    2328:	6d 93       	st	X+, r22
    232a:	70 83       	st	Z, r23
    232c:	62 91       	ld	r22, -Z
    232e:	ae 17       	cp	r26, r30
    2330:	bf 07       	cpc	r27, r31
    2332:	c8 f3       	brcs	.-14     	; 0x2326 <strrev+0x10>
    2334:	08 95       	ret

00002336 <__cmpsf2>:
    2336:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__fp_cmp>
    233a:	08 f4       	brcc	.+2      	; 0x233e <__cmpsf2+0x8>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	08 95       	ret

00002340 <__ctype_isfalse>:
    2340:	99 27       	eor	r25, r25
    2342:	88 27       	eor	r24, r24

00002344 <__ctype_istrue>:
    2344:	08 95       	ret

00002346 <__muluhisi3>:
    2346:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__umulhisi3>
    234a:	a5 9f       	mul	r26, r21
    234c:	90 0d       	add	r25, r0
    234e:	b4 9f       	mul	r27, r20
    2350:	90 0d       	add	r25, r0
    2352:	a4 9f       	mul	r26, r20
    2354:	80 0d       	add	r24, r0
    2356:	91 1d       	adc	r25, r1
    2358:	11 24       	eor	r1, r1
    235a:	08 95       	ret

0000235c <__prologue_saves__>:
    235c:	2f 92       	push	r2
    235e:	3f 92       	push	r3
    2360:	4f 92       	push	r4
    2362:	5f 92       	push	r5
    2364:	6f 92       	push	r6
    2366:	7f 92       	push	r7
    2368:	8f 92       	push	r8
    236a:	9f 92       	push	r9
    236c:	af 92       	push	r10
    236e:	bf 92       	push	r11
    2370:	cf 92       	push	r12
    2372:	df 92       	push	r13
    2374:	ef 92       	push	r14
    2376:	ff 92       	push	r15
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	ca 1b       	sub	r28, r26
    2386:	db 0b       	sbc	r29, r27
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	09 94       	ijmp

00002394 <__epilogue_restores__>:
    2394:	2a 88       	ldd	r2, Y+18	; 0x12
    2396:	39 88       	ldd	r3, Y+17	; 0x11
    2398:	48 88       	ldd	r4, Y+16	; 0x10
    239a:	5f 84       	ldd	r5, Y+15	; 0x0f
    239c:	6e 84       	ldd	r6, Y+14	; 0x0e
    239e:	7d 84       	ldd	r7, Y+13	; 0x0d
    23a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    23a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    23a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    23a6:	b9 84       	ldd	r11, Y+9	; 0x09
    23a8:	c8 84       	ldd	r12, Y+8	; 0x08
    23aa:	df 80       	ldd	r13, Y+7	; 0x07
    23ac:	ee 80       	ldd	r14, Y+6	; 0x06
    23ae:	fd 80       	ldd	r15, Y+5	; 0x05
    23b0:	0c 81       	ldd	r16, Y+4	; 0x04
    23b2:	1b 81       	ldd	r17, Y+3	; 0x03
    23b4:	aa 81       	ldd	r26, Y+2	; 0x02
    23b6:	b9 81       	ldd	r27, Y+1	; 0x01
    23b8:	ce 0f       	add	r28, r30
    23ba:	d1 1d       	adc	r29, r1
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	ed 01       	movw	r28, r26
    23c8:	08 95       	ret

000023ca <__umulhisi3>:
    23ca:	a2 9f       	mul	r26, r18
    23cc:	b0 01       	movw	r22, r0
    23ce:	b3 9f       	mul	r27, r19
    23d0:	c0 01       	movw	r24, r0
    23d2:	a3 9f       	mul	r26, r19
    23d4:	70 0d       	add	r23, r0
    23d6:	81 1d       	adc	r24, r1
    23d8:	11 24       	eor	r1, r1
    23da:	91 1d       	adc	r25, r1
    23dc:	b2 9f       	mul	r27, r18
    23de:	70 0d       	add	r23, r0
    23e0:	81 1d       	adc	r24, r1
    23e2:	11 24       	eor	r1, r1
    23e4:	91 1d       	adc	r25, r1
    23e6:	08 95       	ret

000023e8 <_exit>:
    23e8:	f8 94       	cli

000023ea <__stop_program>:
    23ea:	ff cf       	rjmp	.-2      	; 0x23ea <__stop_program>
